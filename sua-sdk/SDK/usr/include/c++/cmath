// cmath standard header
#pragma once
#ifndef _CMATH_
#define _CMATH_
#include <yvals.h>



#ifdef _STD_USING
 #undef _STD_USING
  #include <math.h>
 #define _STD_USING

#else /* _STD_USING */
 #include <math.h>

#ifndef RC_INVOKED
 #if _GLOBAL_USING

#ifdef _MS_SUA_
inline float fabsf( float _mathcpp_X)
	{return ((float)fabs((double)_mathcpp_X)); }

inline float frexpf( float _mathcpp_X, int * _Y)
	{return ((float)frexp((double)_mathcpp_X, _Y)); }

inline float ldexpf(__in float _X, __in int _Y)
        {return ((float)ldexp((double)_X, _Y)); }

inline long double acosl(__in long double _X)
        {return (acos((double)_X)); }
inline long double asinl(__in long double _X)
        {return (asin((double)_X)); }
inline long double atanl(__in long double _X)
        {return (atan((double)_X)); }
inline long double atan2l(__in long double _X, __in long double _Y)
        {return (atan2((double)_X, (double)_Y)); }
inline long double ceill(__in long double _X)
        {return (ceil((double)_X)); }
inline long double cosl(__in long double _X)
        {return (cos((double)_X)); }
inline long double coshl(__in long double _X)
        {return (cosh((double)_X)); }
inline long double expl(__in long double _X)
        {return (exp((double)_X)); }
inline long double fabsl(__in long double _X)
        {return (fabs((double)_X)); }
inline long double floorl(__in long double _X)
        {return (floor((double)_X)); }
inline long double fmodl(__in long double _X, __in long double _Y)
        {return (fmod((double)_X, (double)_Y)); }
inline long double frexpl(__in long double _X, __out int *_Y)
        {return (frexp((double)_X, _Y)); }
inline long double ldexpl(__in long double _X, __in int _Y)
        {return (ldexp((double)_X, _Y)); }
inline long double modfl(__in long double _X, __out long double *_Y)
        {double _Di, _Df = modf((double)_X, &_Di);
        *_Y = (long double)_Di;
        return (_Df); }
inline long double logl(__in long double _X)
        {return (log((double)_X)); }
inline long double log10l(__in long double _X)
        {return (log10((double)_X)); }
inline long double powl(__in long double _X, __in long double _Y)
        {return (pow((double)_X, (double)_Y)); }
inline long double sinl(__in long double _X)
        {return (sin((double)_X)); }
inline long double sinhl(__in long double _X)
        {return (sinh((double)_X)); }
inline long double sqrtl(__in long double _X)
        {return (sqrt((double)_X)); }
inline long double tanl(__in long double _X)
        {return (tan((double)_X)); }
inline long double tanhl(__in long double _X)
        {return (tanh((double)_X)); }

inline long abs (long _X) 
	{if (_X >=0 ) return _X; else return -_X;}
inline float modf(float _X, float * _Y)
        {return (modff(_X, _Y)); }

#endif  /* _MS_SUA_ */

_STD_BEGIN
using ::acosf; using ::asinf;
using ::atanf; using ::atan2f; using ::ceilf;
using ::cosf; using ::coshf; using ::expf;
using ::fabsf; using ::floorf; using ::fmodf;
using ::frexpf; using ::ldexpf; using ::logf;
using ::log10f; using ::modff; using ::powf;
using ::sinf; using ::sinhf; using ::sqrtf;
using ::tanf; using ::tanhf;

using ::acosl; using ::asinl;
using ::atanl; using ::atan2l; using ::ceill;
using ::cosl; using ::coshl; using ::expl;
using ::fabsl; using ::floorl; using ::fmodl;
using ::frexpl; using ::ldexpl; using ::logl;
using ::log10l; using ::modfl; using ::powl;
using ::sinl; using ::sinhl; using ::sqrtl;
using ::tanl; using ::tanhl;

using ::abs;
using ::acos; using ::asin;
using ::atan; using ::atan2; using ::ceil;
using ::cos; using ::cosh; using ::exp;
using ::fabs; using ::floor; using ::fmod;
using ::frexp; using ::ldexp; using ::log;
using ::log10; using ::modf; using ::pow;
using ::sin; using ::sinh; using ::sqrt;
using ::tan; using ::tanh;

_STD_END
 #endif /* _GLOBAL_USING */
#endif /* RC_INVOKED */

#endif /* _STD_USING */
#endif /* _CMATH_ */

/*
 * Copyright (c) 1992-2004 by P.J. Plauger.  ALL RIGHTS RESERVED.
 * Consult your license regarding permissions and restrictions.
 V4.04:0009 */
