accept(2)                                                     accept(2)

  aacccceepptt(())

  NNAAMMEE

    accept() - accept a connection on a socket

  SSYYNNOOPPSSIISS

    #include <sys/types.h>
    #include <sys/socket.h>

    int accept (int socket, struct sockaddr *addr, int *addrlen)

  DDEESSCCRRIIPPTTIIOONN

    The argument socket is a socket that has been created with _ss_oo_cc_kk_ee_tt(2),
    bound to an address with _bb_ii_nn_dd(2), and is listening for connections after a
    _ll_ii_ss_tt_ee_nn(2). The _aa_cc_cc_ee_pp_tt(2) argument extracts the first connection request on
    the queue of pending connections, creates a new socket with the same
    properties of socket and allocates a new file descriptor for the socket.
    If no pending connections are present on the queue and the socket is not
    marked as non-blocking, _aa_cc_cc_ee_pp_tt(2) blocks the caller until a connection is
    present. If the socket is marked non-blocking and no pending connections
    are present on the queue, _aa_cc_cc_ee_pp_tt(2) returns an error as described below.
    The accepted socket may not be used to accept more connections. The
    original socket identified by the socket argument remains open.

    If addr and addrlen are both non-NULL, _aa_cc_cc_ee_pp_tt(2) fills the argument addr
    with the address of the connecting entity, as known to the communications
    layer. The exact format of the addr parameter is determined by the domain
    in which the communication is occurring. The addrlen is a value-result
    parameter; it should initially contain the amount of space pointed to by
    addr; on return it will contain the actual length (in bytes) of the
    address returned. This call is used with connection-based socket types,
    such as SOCK_STREAM.

    If either argument is null, no information is returned.

    You can _ss_ee_ll_ee_cc_tt(2) a socket for the purposes of doing an _aa_cc_cc_ee_pp_tt(2) by
    selecting it for read.

  RREETTUURRNN VVAALLUUEESS

    The call returns -1 on error. If it succeeds, it returns a non-negative
    integer that is a descriptor for the accepted socket.

  EERRRROORRSS

    The _aa_cc_cc_ee_pp_tt(2) will fail if:

    [EBADF]
        The descriptor is invalid.

    [ENOTSOCK]
        The descriptor references a file, not a socket.

    [EOPNOTSUPP]
        The referenced socket is not of type SOCK_STREAM.

    [EFAULT]
        The addr parameter is not in a writable part of the user address
        space.

    [EWOULDBLOCK]

        The socket is marked non-blocking and no connections are present to be
        accepted.

  SSEEEE AALLSSOO

    _b_i_n_d(2)

    _c_o_n_n_e_c_t(2)

    _l_i_s_t_e_n(2)

    _s_e_l_e_c_t(2)

    _s_o_c_k_e_t(2)

  UUSSAAGGEE NNOOTTEESS

    The aacccceepptt function is thread safe.

    The aacccceepptt function is async-signal safe.

