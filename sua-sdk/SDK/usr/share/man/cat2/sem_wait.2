sem_wait(2)                                                 sem_wait(2)

  sseemm__ttrryywwaaiitt(())

  NNAAMMEE

    sem_trywait(), sem_wait() - lock a semaphore

  SSYYNNOOPPSSIISS

    #include <semaphore.h>

    int sem_trywait(sem_t *sem);
    int sem_wait(sem_t *sem);

  DDEESSCCRRIIPPTTIIOONN

    The sseemm__wwaaiitt(2) function locks the semaphore object referenced by the sem
    argument. If the semaphore value is zero, the calling thread is blocked
    until the semaphore is unlocked or sseemm__wwaaiitt() is interrupted by a signal.
    When sseemm__wwaaiitt() returns, the specified semaphore object is locked.

    The sseemm__ttrryywwaaiitt(2) function locks the semaphore referenced by the sem
    argument only if the semaphore is not currently locked (that is, the
    semaphore value is positive). Otherwise, it does not lock the semaphore
    and returns immediately.

  RREETTUURRNN VVAALLUUEESS

    On success, the function returns 0; otherwise, -1 is returned and errno is
    set to an error code to indicate the error.

  EERRRROORRSS

    The sseemm__ttrryywwaaiitt() function can fail for the following reason:

    [EAGAIN]
        The semaphore was already locked.

    Both functions can fail for the following reasons:

    [EDEADLK]
        A deadlock condition occurred

    [EINTR]
        The function was interrupted by a signal.

    [EINVAL]
        The sem argument does not refer to a valid semaphore.

  SSEEEE AALLSSOO

    _s_e_m_c_t_l(2)

    _s_e_m_g_e_t(2)

    _s_e_m_o_p(2)

    _s_e_m___p_o_s_t(2)

    _s_e_m___t_i_m_e_d_w_a_i_t(2)

  UUSSAAGGEE NNOOTTEESS

    All of these functions are thread safe.

    None of these functions are async-signal safe.

