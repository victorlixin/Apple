pthread_cond_signal(2)                           pthread_cond_signal(2)

  pptthhrreeaadd__ccoonndd__bbrrooaaddccaasstt(())

  NNAAMMEE

    pthread_cond_broadcast(), pthread_cond_signal() - unblock one or more
    threads

  SSYYNNOOPPSSIISS

    #include <pthread.h>

    int pthread_cond_broadcast(pthread_cond_t *cond);
    int pthread_cond_signal(pthread_cond_t *cond);

  DDEESSCCRRIIPPTTIIOONN

    The pptthhrreeaadd__ccoonndd__bbrrooaaddccaasstt(2) function unblocks all threads that are
    blocked on the condition variable specified by the cond argument.

    The pptthhrreeaadd__ccoonndd__ssiiggnnaall(2) function unblocks one or more threads that are
    blocked on the condition variable specified by cond, if any.

    If multiple threads are blocked on the condition variable, the thread's
    scheduling policy determines the order in which the threads are unblocked.
    Each thread that is unblocked by a call to pptthhrreeaadd__ccoonndd__bbrrooaaddccaasstt() or
    pptthhrreeaadd__ccoonndd__ssiiggnnaall() owns the mutex with which it called
    _pp_tt_hh_rr_ee_aa_dd____cc_oo_nn_dd____tt_ii_mm_ee_dd_ww_aa_ii_tt(2) or _pp_tt_hh_rr_ee_aa_dd____cc_oo_nn_dd____ww_aa_ii_tt(2) after returning from
    that function call. The thread or threads that are unblocked contend for
    the mutex according to the scheduling policy, if applicable, as though
    each thread had called _pp_tt_hh_rr_ee_aa_dd____mm_uu_tt_ee_xx____ll_oo_cc_kk(2).

    A thread can call pptthhrreeaadd__ccoonndd__bbrrooaaddccaasstt() or pptthhrreeaadd__ccoonndd__ssiiggnnaall()
    regardless of whether the thread owns the mutex that threads that have
    called pptthhrreeaadd__ccoonndd__ttiimmeeddwwaaiitt() or pptthhrreeaadd__ccoonndd__wwaaiitt() associated with the
    condition variable during their waits. To provide for predictable
    scheduling behavior, the mutex can be locked by the thread calling
    pptthhrreeaadd__ccoonndd__bbrrooaaddccaasstt() or pptthhrreeaadd__ccoonndd__ssiiggnnaall().

    If no threads are blocked on the condition variable specified by cond, the
    pptthhrreeaadd__ccoonndd__bbrrooaaddccaasstt() or pptthhrreeaadd__ccoonndd__ssiiggnnaall() functions have no
    effect.

  RREETTUURRNN VVAALLUUEESS

    On success, both functions return 0; otherwise, an error code is returned.

  EERRRROORRSS

    Both functions can fail for the following reason:

    [EINVAL]
        The value specified by the cond argument is not an initialized
        condition variable.

    This function does not return [EINTR].

  SSEEEE AALLSSOO

    _p_t_h_r_e_a_d___c_o_n_d___d_e_s_t_r_o_y(2)

    _p_t_h_r_e_a_d___c_o_n_d___t_i_m_e_d_w_a_i_t(2)

  UUSSAAGGEE NNOOTTEESS

    All of these functions are thread safe.

    None of these functions are async-signal safe.

