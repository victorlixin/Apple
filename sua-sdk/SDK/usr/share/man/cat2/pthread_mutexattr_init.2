pthread_mutexattr_init(2)                     pthread_mutexattr_init(2)

  pptthhrreeaadd__mmuutteexxaattttrr__ddeessttrrooyy(())

  NNAAMMEE

    pthread_mutexattr_destroy(), pthread_mutexattr_init() - initialize or
    destroy a mutex attributes object

  SSYYNNOOPPSSIISS

    #include <pthread.h>

    int pthread_mutexattr_destroy(pthread_mutexattr_t *attr);
    int pthread_mutexattr_init(pthread_mutexattr_t *attr);

  DDEESSCCRRIIPPTTIIOONN

    The pptthhrreeaadd__mmuutteexxaattttrr__iinniitt(2) function initializes the mutex attributes
    object referenced by the attr argument with default values. This object
    can be used in a call to _pp_tt_hh_rr_ee_aa_dd____mm_uu_tt_ee_xx____ii_nn_ii_tt(2) to set the attributes of
    the mutex when it is initialized.

    The pptthhrreeaadd__mmuutteexxaattttrr__ddeessttrrooyy(2) function destroys the mutex attributes
    object referenced by the attr argument.

  RREETTUURRNN VVAALLUUEESS

    On success, both functions return 0; otherwise, an error code is returned.

  EERRRROORRSS

    The pptthhrreeaadd__mmuutteexxaattttrr__ddeessttrrooyy() function can fail for the following
    reason:

    [EINVAL]
        The attr argument is invalid.

    The pptthhrreeaadd__mmuutteexxaattttrr__iinniitt() function can fail for the following reason:

    [ENOMEM]
        Not enough free memory exists to initialize the mutex attributes
        object.

    Neither function returns [EINTR].

  SSEEEE AALLSSOO

    _p_t_h_r_e_a_d___c_o_n_d___d_e_s_t_r_o_y(2)

    _p_t_h_r_e_a_d___c_r_e_a_t_e(2)

    _p_t_h_r_e_a_d___m_u_t_e_x___d_e_s_t_r_o_y(2)

    _p_t_h_r_e_a_d___m_u_t_e_x_a_t_t_r___g_e_t_p_s_h_a_r_e_d(2)

    _p_t_h_r_e_a_d___m_u_t_e_x_a_t_t_r___g_e_t_t_y_p_e(2)

  UUSSAAGGEE NNOOTTEESS

    All of these functions are thread safe.

    None of these functions are async-signal safe.

