pthread_sigmask(2)                                   pthread_sigmask(2)

  ssiiggpprrooccmmaasskk(())

  NNAAMMEE

    sigprocmask(), pthread_sigmask()- manipulate current signal mask

  SSYYNNOOPPSSIISS

    #include <signal.h>

    int sigprocmask(int how, const sigset_t *set, sigset_t *oset);
    int pthread_sigmask(int how, const sigset_t *set, sigset_t *oset);

  DDEESSCCRRIIPPTTIIOONN

    The _ss_ii_gg_pp_rr_oo_cc_mm_aa_ss_kk(2) function examines and/or changes the current signal
    mask (those signals that are blocked from delivery) of the calling thread.
    Signals that belong to the current signal mask set are blocked. This
    function can be called only in a single-thread process.

    The _pp_tt_hh_rr_ee_aa_dd____ss_ii_gg_mm_aa_ss_kk(2) function is equivalent to ssiiggpprrooccmmaasskk(2) except
    that it examines and/or changes the calling thread's signal mask, no
    matter how many threads are in the process.

    The oset argument is set by the call to the previous value of the signal
    mask. If it is set to NULL, it is ignored.

    The set argument points to a signal set that describes the changes to be
    made to the process's signal mask. If set is NULL, the mask isn't changed.

    The how argument describes the change being requested (these values are
    defined in <<ssiiggnnaall..hh>>):

    SIG_BLOCK
        The new mask is the union of the current mask and the specified set.

    SIG_UNBLOCK
        The new mask is the intersection of the current mask and the
        complement of the specified set.

    SIG_SETMASK
        The current mask is replaced by the specified set.

    If set is NULL, how is ignored. You can examine the current signal set by
    using NULL for set and loading the current signal set into oset.

    You cannot block SIGKILL or SIGSTOP.

  RREETTUURRNN VVAALLUUEESS

    The pptthhrreeaadd__ssiiggmmaasskk(2) function returns a 0 value to indicate that the
    call succeeded. If an error occurs, pptthhrreeaadd__ssiiggmmaasskk(2) returns the
    corresponding error number.

    The ssiiggpprrooccmmaasskk(2) functions returns a 0 value to indicate that the call
    succeeded. A -1 return value indicates an error occurred and errno is set
    to indicated the reason.

  EERRRROORRSS

    The _ss_ii_gg_pp_rr_oo_cc_mm_aa_ss_kk(2) call will fail and the signal mask will be unchanged if
    one of the following occurs:

    [EINVAL]
        how has a value other than those listed here.

    The pptthhrreeaadd__ssiiggmmaasskk(2) function does not return the [EINTR] error code.

  SSEEEE AALLSSOO

    _k_i_l_l(2)

    _p_t_h_r_e_a_d___k_i_l_l(2)

    _s_i_g_a_c_t_i_o_n(2)

    _s_i_g_a_d_d_s_e_t(3)

    _s_i_g_d_e_l_s_e_t(3)

    _s_i_g_e_m_p_t_y_s_e_t(3)

    _s_i_g_f_i_l_l_s_e_t(3)

    _s_i_g_i_s_m_e_m_b_e_r(3)

    _s_i_g_s_u_s_p_e_n_d(2)

  UUSSAAGGEE NNOOTTEESS

    All of these functions are thread safe.

    The ssiiggpprrooccmmaasskk function is async-signal safe. The pptthhrreeaadd__ssiiggmmaasskk
    function is not async-signal safe.

