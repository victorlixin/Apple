pthread_mutex_destroy(2)                       pthread_mutex_destroy(2)

  pptthhrreeaadd__mmuutteexx__ddeessttrrooyy(())

  NNAAMMEE

    pthread_mutex_destroy(), pthread_mutex_init() - initialize or destroy a
    mutex object

  SSYYNNOOPPSSIISS

    #include <pthread.h>

    int pthread_mutex_destroy(pthread_mutex_t *mutex);
    int pthread_mutex_init(pthread_mutex_t *mutex,
         const pthread_mutexattr_t *attr);
    pthread_mutex_t mutex = PTHREAD_MUTEX_INITIALIZER;

  DDEESSCCRRIIPPTTIIOONN

    The pptthhrreeaadd__mmuutteexx__iinniitt(2) function initializes the mutex object referenced
    by mutex with the attributes specified by the attributes referenced by the
    attr argument or with default attributes if attr is null. When the mutex
    object is successfully initialized, it is unlocked.

    The PPTTHHRREEAADD__MMUUTTEEXX__IINNIITTIIAALLIIZZEERR macro can be used to initialize a mutex
    object that is statically allocated with default attributes. Using this
    macro is equivalent to calling pptthhrreeaadd__mmuutteexx__iinniitt() with a null attr
    argument, except that no error checking is performed.

    The pptthhrreeaadd__mmuutteexx__ddeessttrrooyy(2) function destroys the mutex object referenced
    by the mutex argument. This function should not be called if the specified
    mutex is locked by another thread.

  RREETTUURRNN VVAALLUUEESS

    On success, both functions return 0; otherwise, an error code is returned.

  EERRRROORRSS

    The pptthhrreeaadd__mmuutteexx__ddeessttrrooyy() function can fail for the following reasons:

    [EBUSY]
        An attempt was made to destroy the mutex while it is still locked or
        referenced by another thread.

    [EINVAL]
        The mutex argument does not refer to a valid mutex.

    The pptthhrreeaadd__mmuutteexx__iinniitt() function can fail for the following reasons:

    [EAGAIN]
        A required system resource, other than memory, has been exhausted.

    [EBUSY]
        The specified mutex has already been initialized.

    [EINVAL]
        The attr argument is invalid.

    [ENOMEM]
        Not enough free memory exists to initialize the mutex.

    [EPERM]
        The caller does not have sufficient permissions to perform the
        operation.

    Neither function returns [EINTR].

  SSEEEE AALLSSOO

    _p_t_h_r_e_a_d___m_u_t_e_x___l_o_c_k(2)

    _p_t_h_r_e_a_d___m_u_t_e_x___t_i_m_e_d_l_o_c_k(2)

    _p_t_h_r_e_a_d___m_u_t_e_x_a_t_t_r___g_e_t_p_s_h_a_r_e_d(2)

  UUSSAAGGEE NNOOTTEESS

    All of these functions are thread safe.

    None of these functions are async-signal safe.

