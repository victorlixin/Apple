pthread_key_create(2)                             pthread_key_create(2)

  pptthhrreeaadd__kkeeyy__ccrreeaattee(())

  NNAAMMEE

    pthread_key_create() - create data key

  SSYYNNOOPPSSIISS

    #include <pthread.h>

    int pthread_key_create(pthread_key_t *key, void (*destructor)(void *));

  DDEESSCCRRIIPPTTIIOONN

    The pptthhrreeaadd__kkeeyy__ccrreeaattee(2) function creates a data key that a thread can
    associate thread-specific data with by calling _pp_tt_hh_rr_ee_aa_dd____ss_ee_tt_ss_pp_ee_cc_ii_ff_ii_cc(2).
    Although the data association is thread-specific, the key itself can be
    accessed by other threads in the same process.

    When the function returns, the identifier of the new key is stored in the
    location specified by the key argument.

    The destructor argument can be used to specify an optional destructor
    routine for the key value. When the thread exits, if the key value for
    that thread is not null, then the key value is set to null and the
    destructor routine is called with the previous key value as its only
    argument.

    When a new key is created, no value (null) is associated with the key in
    all threads. When a new thread is created, no value (null) is associated
    with all defined keys available to the new thread.

  RREETTUURRNN VVAALLUUEESS

    On success, the function returns 0; otherwise, an error code is returned.

  EERRRROORRSS

    The pptthhrreeaadd__kkeeyy__ccrreeaattee() function can fail for the following reasons:

    [EAGAIN]
        The system does not have sufficient resources to create a new key, or
        the maximum number of keys allowed has been reached.

    [ENOMEM]
        Not enough memory is free to create the key.

    This function does not return [EINTR].

  SSEEEE AALLSSOO

    _p_t_h_r_e_a_d___g_e_t_s_p_e_c_i_f_i_c(2)

    _p_t_h_r_e_a_d___k_e_y___d_e_l_e_t_e(2)

  UUSSAAGGEE NNOOTTEESS

    The pptthhrreeaadd__kkeeyy__ccrreeaattee function is thread safe.

    The pptthhrreeaadd__kkeeyy__ccrreeaattee function is not async-signal safe.

