pipe(2)                                                         pipe(2)

  ppiippee(())

  NNAAMMEE

    pipe() - create descriptor pair for interprocess communication

  SSYYNNOOPPSSIISS

    #include <unistd.h>

    int pipe (int *fd)

  DDEESSCCRRIIPPTTIIOONN

    The _pp_ii_pp_ee(2) function creates a pipe which is an object allowing
    unidirectional data flow, and allocates a pair of file descriptors. The
    first descriptor connects to the read end of the pipe, and the second
    connects to the write end so that data written to fd[1] appears on (i.e.,
    can be read from) fd[0]. This allows the output of one program to be sent
    to another program: the source's standard output is set up to be the write
    end of the pipe, and the sink's standard input is set up to be the read
    end of the pipe. The pipe itself persists until all its associated
    descriptors are closed.

    A pipe whose read or write end has been closed is considered widowed
    Writing on such a pipe causes the writing process to receive a SIGPIPE
    signal. Widowing a pipe is the only way to deliver end-of-file to a
    reader: after the reader consumes any buffered data, reading a widowed
    pipe returns a zero count.

  RREETTUURRNN VVAALLUUEESS

    On successful creation of the pipe, zero is returned. Otherwise, a value
    of -1 is returned and the variable errno set to indicate the error.

  EERRRROORRSS

    The _pp_ii_pp_ee(2) call will fail if:

    [EMFILE]
        Too many descriptors are active.

    [ENFILE]
        The system file table is full.

    [EFAULT]
        The fd buffer is in an invalid area of the process's address space.

  SSEEEE AALLSSOO

    _s_h(1)

    _r_e_a_d(2)

    _w_r_i_t_e(2)

    _f_o_r_k(2)

  UUSSAAGGEE NNOOTTEESS

    The ppiippee function is thread safe.

    The ppiippee function is async-signal safe.

