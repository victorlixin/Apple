unixpath2win(2)                                         unixpath2win(2)

  uunniixxppaatthh22wwiinn(())

  NNAAMMEE

    unixpath2win() - convert a Subsystem for UNIX-based Applications pathname to Windows syntax

  SSYYNNOOPPSSIISS

    #include <interix/interix.h>

    int unixpath2win(const char *path, int flags, char *buf, size_t buflen)

  DDEESSCCRRIIPPTTIIOONN

    The _uu_nn_ii_xx_pp_aa_tt_hh_22_ww_ii_nn(2) call converts a Subsystem for UNIX-based Applications pathname to an equivalent
    Windows pathname.

    The Subsystem for UNIX-based Applications pathname is not required to name an existing file. However,
    some prefix of the pathname will name an existing file, even if the prefix
    is the degenerate case of "/". The _uu_nn_ii_xx_pp_aa_tt_hh_22_ww_ii_nn(2) call will find the
    longest prefix of the Subsystem for UNIX-based Applications path that names an existing file and which
    is accessible to the effective user, and it will resolve symbolic links
    within this prefix.

    If the PATH_SYMLINK bit of the flags argument is set, and if the path
    names an existing symlink file, then the symlink named by path will not be
    followed, although symlinks named by prefixes of path will still be
    followed. (The PATH_SYMLINK bit is the only bit in flags that can be set;
    setting any other bit in flags produces an error.)

    The Subsystem for UNIX-based Applications pathname //ddeevv//nnuullll is translated to the Windows pathname
    "nul". Support for other device names will be added in the future.

  RREETTUURRNN VVAALLUUEE

    On success, _uu_nn_ii_xx_pp_aa_tt_hh_22_ww_ii_nn(2) returns 0 and stores a null-terminated
    pathname in buf. On failure, it returns -1 and sets errno.

  EERRRROORRSS

    The _uu_nn_ii_xx_pp_aa_tt_hh_22_ww_ii_nn(2) call will fail if:

    [ENOENT]
        The path argument points to an empty string.

    [ENAMETOOLONG]
        The length of the path argument exceeds {PATH_MAX} or a pathname
        component is longer than {NAME_MAX}.

    [ELOOP]
        Too many symbolic links were encountered in resolving path.

    [EWINPATH]
        The Subsystem for UNIX-based Applications pathname names a virtual file that does not correspond to
        any file in the Windows name space. Examples include //pprroocc and //ddeevv//
        ppttmmxx.

    [EINVAL]
        An invalid flags value was passed, such as flags & ~(PATH_SYMLINK).

    [ERANGE]
        The resultant Windows pathname contains more than PATH_MAX characters.

    [ERANGE]
        The resultant Windows pathname is too large to store in buf.

    [ENOMEM]
        The client program or the Subsystem for UNIX-based Applications could not allocate enough
        memory to complete the operation.

    [EILSEQ]
        The Subsystem for UNIX-based Applications pathname contains a character that is not legal in Windows
        pathnames.

  BBUUGGSS

    If path contains funny characters such as ? or *, which are legal in
    Subsystem for UNIX-based Applications pathnames but not legal in Windows pathnames, then these are
    translated internally into bizarre Unicode characters, which cause an
    EILSEQ error when the Unicode string is translated back to an 8-bit or
    multi-byte string. This nastiness would be avoided if we had a way to
    return the Windows pathname as a Unicode or UTF-8 string.

    The _uu_nn_ii_xx_pp_aa_tt_hh_22_ww_ii_nn(2) call will fail if the resultant Windows pathname
    contains more than PATH_MAX characters, even if the buffer you supplied is
    big enough to hold the result. But that's okay, since most Windows
    programs will fail if given a pathname longer than PATH_MAX characters,
    due to restrictions imposed by the Windows operating system.

    The resultant Windows pathname is always an absolute pathname, even if the
    original Subsystem for UNIX-based Applications pathname is a relative pathname.

  SSEEEE AALLSSOO

    _w_i_n_p_a_t_h_2_u_n_i_x(2)

  UUSSAAGGEE NNOOTTEESS

    The uunniixxppaatthh22wwiinn function is thread safe.

    The uunniixxppaatthh22wwiinn function is not async-signal safe.

