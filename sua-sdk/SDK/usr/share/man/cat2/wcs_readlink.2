wcs_readlink(2)                                         wcs_readlink(2)

  rreeaaddlliinnkk(())

  NNAAMMEE

    readlink(), wcs_readlink() - read the contents of a symbolic link

  SSYYNNOOPPSSIISS

    #include <unistd.h>

    int readlink(const char *path, char *buf, size_t bufsize)
    int wcs_readlink(const wchar_t *path, wchar_t *buf, size_t bufsize)

  DDEESSCCRRIIPPTTIIOONN

    The rreeaaddlliinnkk(2) and wwccss__rreeaaddlliinnkk(2) functions are identical, except that
    wwccss__rreeaaddlliinnkk(2) accepts wide characters in the path and buf arguments.

    The rreeaaddlliinnkk(2) and wwccss__rreeaaddlliinnkk(2) functions store the contents of the
    symbolic link file path in the buffer buf, which is of size bufsize. On
    Interix, the contents of buf are null-terminated, though portable programs
    should not assume this is so.

    If the symlink data are longer than bufsiz, then only the first bufsiz
    bytes of the symlink data are written into the buffer, and the value
    bufsiz is returned; errno is not set.

    However, if you _ll_ss_tt_aa_tt(2) the symbolic link, then the sstt__ssiizzee field is set
    to the total number of bytes of symlink data.

  RREETTUURRNN VVAALLUUEE

    On success, the rreeaaddlliinnkk(2) or wwccss__rreeaaddlliinnkk(2) call returns the number of
    bytes stored in bufsize; otherwise it returns -1 and sets errno.

  EERRRROORRSS

    The rreeaaddlliinnkk(2) call can fail for the following reasons:

    [EACCES]
        Process does not have permission to search some directory in the path.

    [EINVAL]
        The path is not a symbolic link file, or the file is on a device that
        does not support the operation.

    [EIO]
        An I/O error occurred while reading from the filesystem.

    [ENOENT]
        Either path is an empty string or some component of path does not
        exist.

    [ELOOP]
        Too many symbolic links were encountered in resolving path.

    [ENAMETOOLONG]
        The path is longer than {PATH_MAX} or some component of path is longer
        than {NAME_MAX}, or the pathname resolution of a symbolic link
        produced some intermediate result that was longer than {PATH_MAX}.

    [ENOTDIR]
        Some component of the prefix in path is not a directory.

  UUSSAAGGEE NNOOTTEESS

    All of these functions are thread safe.

    All of these functions are async-signal safe.

