pthread_attr_getscope(2)                       pthread_attr_getscope(2)

  pptthhrreeaadd__aattttrr__ggeettssccooppee(())

  NNAAMMEE

    pthread_attr_getscope(), pthread_attr_setscope() - get or set the thread
    contention-scope attribute

  SSYYNNOOPPSSIISS

    #include <pthread.h>

    int pthread_attr_getscope(const pthread_attr_t *attr, int *scope);
    int pthread_attr_setscope(pthread_attr_t *attr, int scope);

  DDEESSCCRRIIPPTTIIOONN

    The pptthhrreeaadd__aattttrr__sseettssccooppee(2) function sets the contention-scope attribute
    in the thread attributes object referenced by attr using the value of the
    scope argument, which can be set to either of these values:

    *     PTHREAD_SCOPE_SYSTEM: system scheduling contention scope
    *     PTHREAD_SCOPE_PROCESS: process scheduling contention scope

    After the attributes have been set in the thread attributes object
    referenced by attr, the _pp_tt_hh_rr_ee_aa_dd____cc_rr_ee_aa_tt_ee(2) function can be called to create
    a new thread with the specified attributes. This function does not affect
    the current running thread.

    The pptthhrreeaadd__aattttrr__ggeettssccooppee(2) function retrieves the contention-scope
    attribute in the thread attributes object referenced by attr, storing the
    value in the location referenced by the scope argument.

  RREETTUURRNN VVAALLUUEESS

    On success, both functions return 0; otherwise, they return an error
    number.

  EERRRROORRSS

    The pptthhrreeaadd__aattttrr__sseettssccooppee() function can fail for the following reasons:

    [EINVAL]
        The scope argument is invalid.

    [ENOTSUP]
        An attempt was made to set the contention-scope attribute to an
        unsupported value.

    Neither function returns [EINTR].

  SSEEEE AALLSSOO

    _p_t_h_r_e_a_d___a_t_t_r___d_e_s_t_r_o_y(2)

    _p_t_h_r_e_a_d___a_t_t_r___g_e_t_i_n_h_e_r_i_t_s_c_h_e_d(2)

    _p_t_h_r_e_a_d___a_t_t_r___g_e_t_s_c_h_e_d_p_a_r_a_m(2)

    _p_t_h_r_e_a_d___a_t_t_r___g_e_t_s_c_h_e_d_p_o_l_i_c_y(2)

    _p_t_h_r_e_a_d___c_r_e_a_t_e(2)

  UUSSAAGGEE NNOOTTEESS

    All of these functions are thread safe.

    None of these functions are async-signal safe.

