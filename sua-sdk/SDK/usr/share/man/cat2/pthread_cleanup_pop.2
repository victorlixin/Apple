pthread_cleanup_pop(2)                           pthread_cleanup_pop(2)

  pptthhrreeaadd__cclleeaannuupp__ppoopp(())

  NNAAMMEE

    pthread_cleanup_pop(), pthread_cleanup_push() - establish and execute a
    thread's cleanup handlers

  SSYYNNOOPPSSIISS

    #include <pthread.h>

    void pthread_cleanup_pop(int execute);
    void pthread_cleanup_push(void (*routine)(void*), void *arg);

  DDEESSCCRRIIPPTTIIOONN

    The pptthhrreeaadd__cclleeaannuupp__ppuusshh(2) macro pushes the cleanup handler macro
    referenced by routine onto the calling thread's cancellation cleanup
    stack. If the specified macro is at the top of the stack, it is popped
    from the stack and executed with the argument referenced by arg under the
    following circumstances:

    *     When the thread exits (that is, _pp_tt_hh_rr_ee_aa_dd____ee_xx_ii_tt(2) is called for the
          thread)
    *     The thread responds to a cancellation request (that is,
          _pp_tt_hh_rr_ee_aa_dd____cc_aa_nn_cc_ee_ll() is called for the thread)
    *     The thread calls pptthhrreeaadd__cclleeaannuupp__ppoopp() with the execute argument set
          to a value other than 0.

    The pptthhrreeaadd__cclleeaannuupp__ppoopp(2) macro removes the routine at the top of the
    calling thread's cancellation cleanup stack and, if execute is non-zero,
    calls it.

    Applications must ensure that pptthhrreeaadd__cclleeaannuupp__ppuusshh() and
    pptthhrreeaadd__cclleeaannuupp__ppoopp() are called in pairs within the same lexical scope.

  RREETTUURRNN VVAALLUUEESS

    None.

  EERRRROORRSS

    None.

  SSEEEE AALLSSOO

    _p_t_h_r_e_a_d___c_a_n_c_e_l(2)

    _p_t_h_r_e_a_d___s_e_t_c_a_n_c_e_l_s_t_a_t_e(2)

  UUSSAAGGEE NNOOTTEESS

    All of these macros are thread safe.

    None of these macros are async-signal safe.

