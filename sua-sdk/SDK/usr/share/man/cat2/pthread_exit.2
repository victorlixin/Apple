pthread_exit(2)                                         pthread_exit(2)

  pptthhrreeaadd__eexxiitt(())

  NNAAMMEE

    pthread_exit() - terminate a thread

  SSYYNNOOPPSSIISS

    #include <pthread.h>

    void pthread_exit(void *value_ptr);

  DDEESSCCRRIIPPTTIIOONN

    The pptthhrreeaadd__eexxiitt(2) function terminates the calling thread, making the
    value referenced by the value_ptr argument available to any thread that
    was previously joined to the calling thread. If any cancellation cleanup
    handlers have been pushed onto the cleanup handler stack without having
    been popped, they are popped and executed in the reverse order in which
    they were pushed onto the stack. Calling this function to terminate a
    thread does not release process resources visible to the application, such
    as mutexes and file descriptors, nor does it result in any process-level
    cleanup operations.

    The pptthhrreeaadd__eexxiitt() function is called implicitly whenever a thread returns
    from the start routine that created it, except for the thread in which
    mmaaiinn() was first called. The function's return value is the thread's exit
    status.

    After the last thread has been terminated, the process exits with the exit
    status zero, as though _ee_xx_ii_tt(3) had been called with zero as the argument
    when the last thread was terminated.

  RREETTUURRNN VVAALLUUEESS

    This function does not return to the caller.

  EERRRROORRSS

    None.

  NNOOTTEESS

    Access to local variables of the thread after the thread is terminated
    cannot be guaranteed. For this reason, you should not use local variables
    as the value_ptr argument.

  SSEEEE AALLSSOO

    _e_x_i_t(3)

    _p_t_h_r_e_a_d___c_r_e_a_t_e(2)

    _p_t_h_r_e_a_d___j_o_i_n(2)

  UUSSAAGGEE NNOOTTEESS

    The pptthhrreeaadd__eexxiitt function is thread safe.

    The pptthhrreeaadd__eexxiitt function is not async-signal safe.

