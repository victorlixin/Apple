getpriority(2)                                           getpriority(2)

  ggeettpprriioorriittyy(())

  NNAAMMEE

    getpriority(), setpriority() - get or set process' nice value

  SSYYNNOOPPSSIISS

    #include <sys/resource.h>

    int getpriority(int which, id_t who)
    int setpriority(int which, id_t who, int value)

  DDEESSCCRRIIPPTTIIOONN

    The _gg_ee_tt_pp_rr_ii_oo_rr_ii_tt_yy(2) call returns the current nice value for a process,
    process group, or a user. The returned nice value is in the range of [-
    NZERO, NZERO-1]. NZERO is defined in /usr/include/limits.h and specifies
    the default process priority. (This is the value that would be set with
    _ss_ee_tt_pp_rr_ii_oo_rr_ii_tt_yy(2) minus NZERO.)

    The _ss_ee_tt_pp_rr_ii_oo_rr_ii_tt_yy(2) call sets the current nice value for a process, process
    group, or a user to the value of value + NZERO.

    For both calls, the target processes are identified by the which and who
    arguments: which is one of PRIO_PROCESS, PRIO_PGRP, or PRIO_USER
    (indicating a process, a process group, and a user, respectively); the who
    argument is the process ID, process group ID, or effective user ID,
    depending upon the value of which. If who is 0, it indicates the current
    process, process group, or user.

    The third argument to _ss_ee_tt_pp_rr_ii_oo_rr_ii_tt_yy(2) is value, the new nice value. This is
    an integer in the range of [0, 2*NZERO-1]. If value is too low, the nice
    value is set to the lowest possible value; if value is too high, the nice
    value is set to the highest possible value. Lower values cause better
    scheduling. However, only a process with appropriate privileges can lower
    its own nice value.

    Since -1 is a valid return value for _gg_ee_tt_pp_rr_ii_oo_rr_ii_tt_yy(2), set errno to 0 before
    calling _gg_ee_tt_pp_rr_ii_oo_rr_ii_tt_yy(2); then, if _gg_ee_tt_pp_rr_ii_oo_rr_ii_tt_yy(2) returns -1, check to see
    if errno is non-zero.

  RREETTUURRNN VVAALLUUEESS

    If it succeeds, the _gg_ee_tt_pp_rr_ii_oo_rr_ii_tt_yy(2) call returns a value in the range of [-
    NZERO, NZERO-1], which is the nice value of the target process, process
    group, or user. If it fails, the _gg_ee_tt_pp_rr_ii_oo_rr_ii_tt_yy(2) call returns -1 and sets
    errno to indicate the error.

    The _ss_ee_tt_pp_rr_ii_oo_rr_ii_tt_yy(2) call returns 0 on successful completion. Otherwise, it
    returns -1 and sets errno to indicate the error.

  EERRRROORRSS

    The _gg_ee_tt_pp_rr_ii_oo_rr_ii_tt_yy(2) and _ss_ee_tt_pp_rr_ii_oo_rr_ii_tt_yy(2) calls can fail for these reasons:

    [EINVAL]
        The which argument was not recognized or the who argument is not a
        valid ID.

    [ESRCH]
        There was no process matching the which and who arguments.

    The _ss_ee_tt_pp_rr_ii_oo_rr_ii_tt_yy(2) call can also fail for these reasons:

    [EACCES]
        The value of value was negative and the process did not have the
        appropriate privileges to lower the nice value.

    [EPERM]
        Although a process was located, its effective user ID did not match
        either the real or effective user ID of the executing process.

  SSEEEE AALLSSOO

    _n_i_c_e(1)

    _r_e_n_i_c_e(1)

    _n_i_c_e(3)

  UUSSAAGGEE NNOOTTEESS

    All of these functions are thread safe.

    None of these functions are async-signal safe.

