sem_timedwait(2)                                       sem_timedwait(2)

  sseemm__ttiimmeeddwwaaiitt(())

  NNAAMMEE

    sem_timedwait() - lock a semaphore with expiration time

  SSYYNNOOPPSSIISS

    #include <semaphore.h>

    int sem_timedwait(sem_t *sem, const struct timespec *abs_timeout);

  DDEESSCCRRIIPPTTIIOONN

    The sseemm__ttiimmeeddwwaaiitt(2) locks the semaphore referenced by the sem argument.
    If the semaphore is already locked, the calling thread or process is
    blocked until the semaphore becomes available, as with the _ss_ee_mm____ww_aa_ii_tt(2)
    function. If the semaphore cannot be locked because another process or
    thread has the semaphore locked, the block ends when the system clock
    reaches the time referenced by the abs_timeout argument, or if the time
    has already passed when the call is made.

  RREETTUURRNN VVAALLUUEESS

    On success, the function returns 0; otherwise, -1 is returned and errno is
    set to an error code to indicate the error.

  EERRRROORRSS

    The sseemm__ttiimmeeddwwaaiitt() function can fail for the following reasons:

    [EDEADLK]
        A deadlock condition occurred

    [EINTR]
        The function was interrupted by a signal.

    [EINVAL]
        The sem argument does not refer to a valid semaphore, or the process
        or thread would have blocked and the abs_timeout argument specifies a
        value in nanoseconds less than zero or greater than or equal to 1000
        million.

    [ETIMEDOUT]
        A lock could not be obtained before the specified time was reached.

  SSEEEE AALLSSOO

    _s_e_m_c_t_l(2)

    _s_e_m_g_e_t(2)

    _s_e_m_o_p(2)

    _s_e_m___p_o_s_t(2)

    _s_e_m___t_r_y_w_a_i_t(2)

    _s_e_m___w_a_i_t(2)

    _t_i_m_e(2)

  UUSSAAGGEE NNOOTTEESS

    The sseemm__ttiimmeeddwwaaiitt function is thread safe.

    The sseemm__ttiimmeeddwwaaiitt function is not async-signal safe.

