setuser(2)                                                   setuser(2)

  sseettuusseerr

  NNAAMMEE

    setuser() - change effective and real uid and gid of process

  SSYYNNOOPPSSIISS

    #include <interix/security.h>

    int setuser(char *username, char *password, int flags)

  DDEESSCCRRIIPPTTIIOONN

    The _ss_ee_tt_uu_ss_ee_rr(2) function changes the effective and real uid and gid of the
    current process to that of the specified username. All of the security
    attributes and permissions become those of username. However, the process'
    current working directory does not change.

    The _ss_ee_tt_uu_ss_ee_rr(2) function takes the following arguments:

    username
        The name of the user.

    password
        The plaintext password for the specified username. The password is not
        needed if the security ID of the calling process is one of SYSTEM,
        local+Administrator (where local is the name of the local domain), or
        pdomain+Administrator (where pdomain is the name of the principal
        domain). In this case, password can be passed as the NULL pointer.

    flags
        Control flags. These possible values for flags are defined in
        <<iinntteerriixx//sseeccuurriittyy..hh>>:

        SU_COMPLETE
            Change the real and effective user and group IDs and all security
            attributes to the default for the specified user.

        SU_CHECK
            Check that the process will be able to perform a _ss_ee_tt_uu_ss_ee_rr(2) action
            using SU_COMPLETE for the specified username and password. This is
            a quick way to verify a password for a user. This action is
            equivalent to the older Subsystem for UNIX-based Applications call, _aa_uu_tt_hh_ee_nn_tt_ii_cc_aa_tt_ee_uu_ss_ee_rr(2).

    There can be a performance degradation if a process changes identity to a
    user who does not have permission to be located in the current working
    directory. The best solution is, after a call to _ss_ee_tt_uu_ss_ee_rr(2), call _cc_hh_dd_ii_rr(2)
    to set the working directory to a directory known to be permitted for the
    new identity.

    You must have the right to log on interactively on a domain controller for
    someone to call sseettuusseerr(2) for you. An administrator, however, can call
    sseettuusseerr(2) for you even if you do not have the right to log on
    interactively to a domain controller. If the administrator calls
    sseettuusseerr(2) for you, he or she is not required to use your password.

  RREETTUURRNN VVAALLUUEE

    On success, the _ss_ee_tt_uu_ss_ee_rr(2) function returns 0. On failure, it returns -
    1 and sets errno.

  EERRRROORRSS

    The _ss_ee_tt_uu_ss_ee_rr(2) function can fail for the following reasons:

    [ENOMEM]
        Not enough memory to complete the request.

    [EINVAL]
        An argument is invalid or is missing.

    [EPERM]
        The requesting process does not have permission to change to the new
        user. Either or both of the username or password were incorrectly
        specified.

  NNOOTTEESS

    This function replaces _aa_uu_tt_hh_ee_nn_tt_ii_cc_aa_tt_ee_uu_ss_ee_rr(2). In fact, the version of
    _aa_uu_tt_hh_ee_nn_tt_ii_cc_aa_tt_ee_uu_ss_ee_rr(2) in this release is a wrapper around _ss_ee_tt_uu_ss_ee_rr(2).

  SSEEEE AALLSSOO

    _s_e_t_u_i_d(2)

    _s_e_t_g_i_d(2)

    _e_x_e_c___a_s_u_s_e_r(2)

    _a_u_t_h_e_n_t_i_c_a_t_e_u_s_e_r(2)

  UUSSAAGGEE NNOOTTEESS

    The sseettuusseerr function is thread safe.

    The sseettuusseerr function is not async-signal safe.

