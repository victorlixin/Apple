munmap(2)                                                     munmap(2)

  mmuunnmmaapp(())

  NNAAMMEE

    munmap() - remove mappings for files in memory

  SSYYNNOOPPSSIISS

    #include <sys/mman.h>

    int munmap (void *addr, size_t len)

  DDEESSCCRRIIPPTTIIOONN

    The _mm_uu_nn_mm_aa_pp(2) function removes a mapping for a file from the range [addr
    addr + len).

    Addr should be a multiple of the page size as given by _ss_yy_ss_cc_oo_nn_ff(2). The len
    argument is rounded up to the next multiple of the page size.

    Mapped files are automatically unmapped when the process terminates.

    Note that there is a limitation of memory-mapping in
    Subsystem for UNIX-based Applications: if a memory mapped region is
    created with MAP_PRIVATE flag, then it is not possible to unmap
    only a part of this region. Suppose a mapped region of size 2
    pages is created (using the  mm_mm_aa_pp(2) system call) with the MAP_PRIVATE
    flag and the user attempts to unmap only one of these two, the _mm_uu_nn_mm_aa_pp(2)
    system call will simply fail with EINVAL, indicating that the operation 
    is invalid. However, if the user tries to unmap the entire region (both 
    the pages) at once,  _mm_uu_nn_mm_aa_pp() will succeed. In other words, using _mm_uu_nn_mm_aa_pp() 
    to unmap only part of a region created using the MAP_PRIVATE flag is not
    allowed. Note that this limitation does not apply if the mapping was
    created using the MAP_SHARED flag.

  RREETTUURRNN VVAALLUUEE

    On success, _mm_uu_nn_mm_aa_pp(2) returns 0. On failure, it returns -1 and sets errno
    to indicate the error.

  EERRRROORRSS

    The _mm_uu_nn_mm_aa_pp(2) function can fail if:

    [EINVAL]
        The addr is not a multiple of the page size.
        Addresses in the range [addr addr + len) are not in the valid range
        for a process' address space.
        Len is 0.

  SSEEEE AALLSSOO

    _e_x_e_c(2)

    _f_c_n_t_l(2)

    _f_o_r_k(2)

    _m_m_a_p(2)

    _s_h_m_a_t(2)

    _s_y_s_c_o_n_f(2)

  UUSSAAGGEE NNOOTTEESS

    The mmuunnmmaapp function is thread safe.

    The mmuunnmmaapp function is not async-signal safe.

