wcs_mkfifo(2)                                             wcs_mkfifo(2)

  mmkkffiiffoo(())

  NNAAMMEE

    mkfifo(), wcs_mkfifo() - make a FIFO special file

  SSYYNNOOPPSSIISS

    #include <sys/types.h>
    #include <sys/stat.h>

    int mkfifo(const char *path, mode_t mode)
    int wcs_mkfifo(const wchar_t *path, mode_t mode)

  DDEESSCCRRIIPPTTIIOONN

    The mmkkffiiffoo(2) and wwccss__mmkkffiiffoo(2) functions are identical except that
    wwccss__mmkkffiiffoo(2) accepts wide characters in the path argument.

    The mmkkffiiffoo() and wwccss__mmkkffiiffoo() functions create a new FIFO special file
    pointed to by path. The file permission bits of the new FIFO are
    initialized from mode. The file permission bits of the mode argument are
    modified by the process' file creation mask.

    When bits in mode other than the file permission bits are set, the effect
    is implementation-dependent.

    The FIFO's user ID will be set to the process' effective user ID. The
    FIFO's group ID will be set to the group ID of the parent directory or to
    the effective group ID of the process.

    Upon successful completion, mmkkffiiffoo() or wwccss__mmkkffiiffoo(2) will mark for update
    the sstt__aattiimmee, sstt__ccttiimmee and sstt__mmttiimmee fields of the file. Also, the sstt__ccttiimmee
    and sstt__mmttiimmee fields of the directory that contains the new entry are
    marked for update.

  RREETTUURRNN VVAALLUUEESS

    Upon successful completion, 0 is returned. Otherwise, -1 is returned, no
    FIFO is created and errno is set to indicate the error.

  EERRRROORRSS

    The mmkkffiiffoo() or wwccss__mmkkffiiffoo() function will fail if:

    [EACCES]
        A component of the path prefix denies search permission, or write
        permission is denied on the parent directory of the FIFO to be
        created.

    [EEXIST]
        The named file already exists.

    [ELOOP]
        Too many symbolic links were encountered in resolving path.

    [ENAMETOOLONG]
        The length of the path argument exceeds {PATH_MAX} or a path name
        component is longer than {NAME_MAX}.

    [ENOENT]
        A component of the path prefix specified by path does not name an
        existing directory or path is an empty string.

    [ENOSPC]
        The directory that would contain the new file cannot be extended or
        the file system is out of file-allocation resources.

    [ENOTDIR]
        A component of the path prefix is not a directory.

    [EROFS]
        The named file resides on a read-only file system.

    The mmkkffiiffoo() or wwccss__mmkkffiiffoo() function may fail if:

    [ENAMETOOLONG]
        Path name resolution of a symbolic link produced an intermediate
        result whose length exceeds {PATH_MAX}.

  SSEEEE AALLSSOO

    _u_m_a_s_k(2)

  DDEERRIIVVAATTIIOONN

    Derived from the POSIX.1-1988 standard.

  UUSSAAGGEE NNOOTTEESS

    All of these functions are thread safe.

    All of these functions are async-signal safe.

