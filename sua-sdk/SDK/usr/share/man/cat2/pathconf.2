pathconf(2)                                                 pathconf(2)

  ppaatthhccoonnff(())

  NNAAMMEE

    pathconf(), wcs_pathconf(), fpathconf() - get configurable pathname
    variables

  SSYYNNOOPPSSIISS

    #include <unistd.h>

    long pathconf (const char *path, int name)
    long wcs_pathconf (const wchar_t *path, int name)
    long fpathconf (int fd, int name)

  DDEESSCCRRIIPPTTIIOONN

    The ppaatthhccoonnff(2) and wwccss__ppaatthhccoonnff(2) functions are identical, except that
    wwccss__ppaatthhccoonnff(2) accepts wide characters in the path argument.

    The ppaatthhccoonnff(2), wwccss__ppaatthhccoonnff(2), and ffppaatthhccoonnff(2) functions provide a
    method for applications to determine the current value of a configurable
    system limit or option variable associated with a pathname or file
    descriptor.

    For ppaatthhccoonnff(2) or wwccss__ppaatthhccoonnff(2), the path argument is the name of a
    file or directory. For ffppaatthhccoonnff(2), the fd argument is an open file
    descriptor. The name argument specifies the system variable to be queried.
    Symbolic constants for each name value are found in the include file
    <<uunniissttdd..hh>>.

    The available values are as follows:

    _PC_LINK_MAX
        The maximum file link count.

    _PC_MAX_CANON
        The maximum number of bytes in terminal canonical input line.

    _PC_MAX_INPUT
        The minimum maximum number of bytes for which space is available in a
        terminal input queue.

    _PC_NAME_MAX
        The maximum number of bytes in a file name.

    _PC_PATH_MAX
        The maximum number of bytes in a pathname.

    _PC_PIPE_BUF
        The maximum number of bytes which will be written atomically to a
        pipe.

    _PC_CHOWN_RESTRICTED
        Return 1 if appropriate privileges are required for the _cc_hh_oo_ww_nn(2)
        system call, otherwise 0.

    _PC_NO_TRUNC
        Return 1 if file names longer than {KERN_NAME_MAX} are truncated.

    _PC_VDISABLE
        Returns the terminal character disabling value.

  RREETTUURRNN VVAALLUUEESS

    If the call to ppaatthhccoonnff(2), wwccss__ppaatthhccoonnff(2), or ffppaatthhccoonnff(2) is not
    successful, -1 is returned and errno is set appropriately. Otherwise, if
    the variable is associated with functionality that does not have a limit
    in the system, -1 is returned and errno is not modified. Otherwise, the
    current variable value is returned.

  EERRRROORRSS

    If any of the following conditions occur, the ppaatthhccoonnff(2),
    wwccss__ppaatthhccoonnff(2), and ffppaatthhccoonnff(2) functions return -1 and set errno to the
    corresponding value.

    [EINVAL]
        The value of the name argument is invalid.

    [EINVAL]
        The implementation does not support an association of the variable
        name with the associated file.
    The ppaatthhccoonnff(2) or wwccss__ppaatthhccoonnff(2) call will fail if:

    [EACCES]
        Search permission is denied for a component of the path prefix.

    [EIO]
        An I/O error occurred while reading from or writing to the file
        system.

    [ELOOP]
        Too many symbolic links were encountered in translating the pathname.

    [ENAMETOOLONG]
        A component of a pathname exceeded {NAME_MAX} characters, or an entire
        pathname exceeded {PATH_MAX} characters.

    [ENOENT]
        The named file does not exist.

    [ENOTDIR]
        A component of the path prefix is not a directory.

    The ffppaatthhccoonnff(2) call will fail if:

    [EBADF]
        fd is not a valid open file descriptor.

    [EIO]
        An I/O error occurred while reading from or writing to the file
        system.

  UUSSAAGGEE NNOOTTEESS

    All of these functions are thread safe.

    All of these functions are async-signal safe.

