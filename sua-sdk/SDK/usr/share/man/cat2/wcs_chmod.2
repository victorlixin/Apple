wcs_chmod(2)                                               wcs_chmod(2)

  cchhmmoodd(())

  NNAAMMEE

    chmod(), wcs_chmod(), fchmod() - change mode of file

  SSYYNNOOPPSSIISS

    #include <sys/stat.h>

    int chmod (const char *path, mode_t mode)
    int wcs_chmod (const wchar_t *path, mode_t mode)
    int fchmod (int fildes, mode_t mode)

  DDEESSCCRRIIPPTTIIOONN

    The cchhmmoodd(2) and wwccss__cchhmmoodd(2) functions are identical, except that
    wwccss__cchhmmoodd(2) accepts wide characters in the path argument.

    The cchhmmoodd(2) and wwccss__cchhmmoodd(2) set the file permission bits of the file
    specified by the pathname path to mode. The ffcchhmmoodd(2) function does the
    same, except that the file is specified by the file descriptor filedes.

    The cchhmmoodd(2), wwccss__cchhmmoodd(2), and ffcchhmmoodd(2) functions verify that the
    process owner (user) owns the file specified by path. A mode is created
    from OR'd permission bit masks defined in <<ssyyss//ssttaatt..hh>>:
    SSyymmbbooll      VVaalluuee       MMeeaanniinngg

    S_IRWXU     0000700     RWX mask for owner

    S_IRUSR     0000400     R for owner

    S_IWUSR     0000200     W for owner

    S_IXUSR     0000100     X for owner

    S_IRWXG     0000070     RWX mask for group

    S_IRGRP     0000040     R for group

    S_IWGRP     0000020     W for group

    S_IXGRP     0000010     X for group

    S_IRWXO     0000007     RWX mask for other

    S_IROTH     0000004     R for other

    S_IWOTH     0000002     W for other

    S_IXOTH     0000001     X for other

    S_ISUID     0004000     set user ID on execution; see NOTES later in
                            this topic

    S_ISGID     0002000     set group ID on execution; see NOTES later in
                            this topic

    Calling the cchhmmoodd(2) or wwccss__cchhmmoodd(2) function on a file with open file
    descriptors has no effect on the open file descriptors.

  RREETTUURRNN VVAALLUUEESS

    Upon successful completion, a value of 0 is returned. Otherwise, a value
    of -1 is returned and errno is set to indicate the error.

  EERRRROORRSS

    The cchhmmoodd(2) or wwccss__cchhmmoodd(2) function will fail and the file mode will be
    unchanged if:

    [EACCES]
        Search permission is denied for a component of the path prefix.

    [EFAULT]
        Path points outside the process's allocated address space.

    [EINVAL]
        The pathname contains a character with the high-order bit set, or the
        operation is not valid on this type of file (such as a pipe or a
        socket).

    [EIO]
        An I/O error occurred while reading from or writing to the file
        system.

    [ENAMETOOLONG]

        A component of a pathname exceeded {NAME_MAX} characters, or an entire
        pathname exceeded {PATH_MAX} characters.

    [ENOENT]
        The named file does not exist.

    [ENOTDIR]
        A component of the path prefix is not a directory.

    [ELOOP]
        Too many symbolic links were encountered in translating the pathname.

    [EOPNOTSUPP ]
        The mode argument specified permissions other than S_IRWXU, S_IRWXG,
        and S_IRWXO for a file on a file system that doesn't support the
        additional permissions.

    [EPERM]
        The effective user ID does not match the owner of the file.

    [EROFS]
        The named file resides on a read-only file system.

    The ffcchhmmoodd(2) function can fail for the following reasons:

    [EBADF]
        The fildes is not an open file descriptor.

    [EINTR]
        The call was interrupted by a signal.

    [EINVAL]
        The mode was invalid, or the operation is not valid on this type of
        file (such as a pipe or a socket).

    [EPERM]
        The named file resides on a read-only file system.

    [EROFS]
        The file is on a read-only file system.

  NNOOTTEESS

    When you use cchhmmoodd(2), wwccss__cchhmmoodd(2), or ffcchhmmoodd(2) to make a file
    writeable, the function will unset the Win32 Read-Only attribute, if it is
    set on the file. (If the Read-Only attribute is set, the _ss_tt_aa_tt(2) function
    will report that the file is not writeable, regardless of the permissions
    on the ACLs associated with the file.)

    By default, Subsystem for UNIX-based Applications does not execute files with the set-user-ID (setuid)
    or set-group-ID (setgid) mode bit set for security reasons. If an attempt
    is made to execute such a file, the ENOSETUID error is returned. For more
    information and and instructions for enabling execution of files with
    these mode bits set, see _T_h_e_ _s_u_p_e_r_u_s_e_r_ _a_c_c_o_u_n_t_ _a_n_d_ _a_p_p_r_o_p_r_i_a_t_e_ _p_r_i_v_i_l_e_g_e_s
    in the Subsystem for UNIX-based Applications Help.

  SSEEEE AALLSSOO

    _c_h_m_o_d(1)

    _o_p_e_n(2)

    _c_h_o_w_n(2)

    _s_t_a_t(2)

    _p_r_i_v_i_l_e_g_e_s(5)

  UUSSAAGGEE NNOOTTEESS

    All of these functions are thread safe.

    All of these functions are async-signal safe.

