symlink(2)                                                   symlink(2)

  ssyymmlliinnkk(())

  NNAAMMEE

    symlink(), wcs_symlink - create symbolic link to a file

  SSYYNNOOPPSSIISS

    #include <unistd.h>

    int symlink(const char *path1, const char *path2)
    int wcs_symlink(const wchar_t *path1, const wchar_t *path2)

  DDEESSCCRRIIPPTTIIOONN

    The ssyymmlliinnkk(2) and wwccss__ssyymmlliinnkk(2) functions are identical, except that
    wwccss__ssyymmlliinnkk(2) accepts wide characters in the path1 and path2 arguments.

    The ssyymmlliinnkk(2) or wwccss__ssyymmlliinnkk(2) function creates a symbolic link, with
    the pathname path2, with the contents path1. There must be no existing
    file or symbolic link with the name path2.

  RREETTUURRNN VVAALLUUEE

    Upon sucess, ssyymmlliinnkk(2) or wwccss__ssyymmlliinnkk(2) returns 0; otherwise it returns
    -1 and sets the value of errno.

  EERRRROORRSS

    The ssyymmlliinnkk(2) or wwccss__ssyymmlliinnkk(2) function can fail for the following
    reasons:

    [EACCES]
        Process does not have write permission in the directory where the
        symbolic link is being created or does not have search permission for
        some component of path2.

    [EEXIST]
        The path2 argument names a file or link that exists.

    [EIO]
        An I/O error occurred.

    [EINVAL]
        The underlying device doesn't support the operation.

    [ELOOP]
        While resolving path2, the system encountered too many symbolic links.

    [ENAMETOOLONG]
        Either a pathname component is longer than {NAME_MAX}, or the length
        of path2 is longer than {PATH_MAX}.

    [ENOENT]
        Either path2 is an empty string or some component does not name an
        existing file.

    [ENOSPC]
        There is no space on the file system, so the directory containing the
        link cannot be extended or the link cannot be created, or the system
        is out of file allocation resources.

    [ENOTDIR]
        Some component of the path prefix of path2 is not a directory.

    [EROFS]
        The new symbolic link would be on a read-only filesystem.

  NNOOTTEESS

    Remember that unlike a hard link the presence of a symbolic link does not
    guarantee the existence of path1, not even when the link is created. Also
    unlike hard links, a symbolic link can point to a directory and it can
    cross file system boundaries.

  SSEEEE AALLSSOO

    _l_c_h_o_w_n(2)

    _l_i_n_k(2)

    _l_s_t_a_t(2)

    _o_p_e_n(2)

    _r_e_a_d_l_i_n_k(2)

  UUSSAAGGEE NNOOTTEESS

    All of these functions are thread safe.

    All of these functions are async-signal safe.

