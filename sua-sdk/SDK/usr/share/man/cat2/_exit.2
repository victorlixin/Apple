_exit(2)                                                       _exit(2)

  __eexxiitt(())

  NNAAMMEE

    _exit() - terminate the calling process

  SSYYNNOOPPSSIISS

    #include <unistd.h>

    void _exit (int status)

  DDEESSCCRRIIPPTTIIOONN

    The ____ee_xx_ii_tt(2) function terminates a process with the following
    consequences:
    *     All of the descriptors open in the calling process are closed. This
          may entail delays, for example, waiting for output to drain; a
          process in this state may not be killed, as it is already dying.
    *     If the parent process of the calling process has an outstanding
          wwaaiitt(1) call or catches the SIGCHLD signal, it is notified of the
          calling process's termination and the status is set as defined by
          _ww_aa_ii_tt(2).
    *     The parent process-ID of all of the calling process's existing child
          processes are set to 1; the initialization process inherits each of
          these processes.
    *     If the termination of the process causes any process group to become
          orphaned (usually because the parents of all members of the group
          have now exited) and if any member of the orphaned group is stopped,
          the SIGHUP signal and the SIGCONT signal are sent to all members of
          the newly-orphaned process group.
    *     If the process is a controlling process, the SIGHUP signal is sent
          to the foreground process group of the controlling terminal, and all
          current access to the controlling terminal is revoked.

    Most C programs call the library routine _ee_xx_ii_tt(3) rather than ____ee_xx_ii_tt(2),
    which flushes buffers, closes streams, unlinks temporary files, etc.,
    before calling ____ee_xx_ii_tt(2).

  RREETTUURRNN VVAALLUUEE

    ____ee_xx_ii_tt(2) can never return.

  SSEEEE AALLSSOO

    _f_o_r_k(2)

    _w_a_i_t(2)

    _e_x_i_t(3)

  UUSSAAGGEE NNOOTTEESS

    The __eexxiitt function is not thread safe.

    The __eexxiitt function is async-signal safe.

