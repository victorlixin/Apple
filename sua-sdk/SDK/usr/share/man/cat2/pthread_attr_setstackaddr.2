pthread_attr_setstackaddr(2)               pthread_attr_setstackaddr(2)

  pptthhrreeaadd__aattttrr__ggeettssttaacckkaaddddrr(())

  NNAAMMEE

    pthread_attr_getstackaddr(), pthread_attr_getstackaddr() - get or set the
    thread stack-address attribute

  SSYYNNOOPPSSIISS

    #include <pthread.h>

    int pthread_attr_getstackaddr(const pthread_attr_t *attr, void
    **stackaddr);
    int pthread_attr_setstackaddr(pthread_attr_t *attr, void *stackaddr);

  DDEESSCCRRIIPPTTIIOONN

    The pptthhrreeaadd__aattttrr__sseettssttaacckkaaddddrr(2) function sets the stack-address attribute
    in the thread attributes object referenced by attr using the value of the
    stackaddr argument. The stackaddr argument specifies the lowest
    addressable byte of the stack area of the thread to be created using the
    attr structure.

    After the attributes have been set in the thread attributes object
    referenced by attr, the _pp_tt_hh_rr_ee_aa_dd____cc_rr_ee_aa_tt_ee(2) function can be called to create
    a new thread with the specified attributes. This function does not affect
    the current running thread.

    The pptthhrreeaadd__aattttrr__ggeettssttaacckkaaddddrr(2) function retrieves the stack-address
    attribute in the thread attributes object referenced by attr, storing the
    value in the location referenced by the stackaddr argument.

  RREETTUURRNN VVAALLUUEESS

    On success, both functions return 0.

  EERRRROORRSS

    These functions do not return specific error codes.

  SSEEEE AALLSSOO

    _p_t_h_r_e_a_d___a_t_t_r___i_n_i_t(2)

    _p_t_h_r_e_a_d___a_t_t_r___g_e_t_s_t_a_c_k(2)

    _p_t_h_r_e_a_d___a_t_t_r___g_e_t_s_t_a_c_k_s_i_z_e(2)

    _p_t_h_r_e_a_d___c_r_e_a_t_e(2)

  UUSSAAGGEE NNOOTTEESS

    All of these functions are thread safe.

    None of these functions are async-signal safe.

