signal(2)                                                     signal(2)

  ssiiggnnaall(())

  NNAAMMEE

    signal() - specify signal handling (C Standard version)

  SSYYNNOOPPSSIISS

    #include <signal.h>

    void (*signal (int sig, void (*func)(int)))(int)

  DDEESSCCRRIIPPTTIIOONN

    The _ss_ii_gg_nn_aa_ll(2) call allows a process to catch, ignore, or to generate an
    interrupt on receiving a signal. (The exceptions are SIG_KILL and
    SIG_STOP, which cannot be caught or ignored.) The recommended call instead
    of _ss_ii_gg_nn_aa_ll(2) is the POSIX _ss_ii_gg_aa_cc_tt_ii_oo_nn(2) call, which is slightly more
    robust.

    The sig is a signal number (possible values are listed below or in the
    file <<ssiiggnnaall..hh>>).

    The func argument is either a function to catch and handle the signal or
    one of these macros:

    SIG_DFL
        Set the signal to the default action (listed below).

    SIG_IGN
        Ignore the signal and discard pending instances. If SIG_IGN is not
        used, further occurrences of the signal are automatically blocked and
        func is called.

    Signals allow the manipulation of a process from outside its domain as
    well as allowing the process to manipulate itself or copies of itself
    (children). There are two general types of signals: those that cause
    termination of a process and those that do not. Signals which cause
    termination of a program might result from an irrecoverable error or might
    be the result of a user at a terminal typing the 'interrupt' character.
    For example, signals are used when a process is stopped to access the
    process's control terminal while in the background. Signals are optionally
    generated when a process resumes after being stopped, when the status of
    child processes changes, or when input is ready at the control terminal.
    Most signals result in the termination of the process receiving them if no
    action is taken; some signals instead cause the process receiving them to
    be stopped, or are simply discarded if the process has not requested
    otherwise.

    For a list of signals defined in the file <<ssiiggnnaall..hh>>, see the _ss_ii_gg_aa_cc_tt_ii_oo_nn(2)
    reference page. The _ss_ii_gg_nn_aa_ll(2) function cannot be used to set a signal
    handler for the SIGCANCEL signal, which is reserved for internal use only.

    The handled signal is unblocked with the function returns and the process
    continues from where it left off when the signal occurred.

    When a process which has installed signal handlers forks, the child
    process inherits the signals. All caught signals may be reset to their
    default action by a call to the _ee_xx_ee_cc_vv_ee(2) function; ignored signals remain
    ignored.

  RREETTUURRNN VVAALLUUEESS

    On success, _ss_ii_gg_nn_aa_ll(2) returns the previous action. Otherwise, it returns -
    1 and sets errno to indicate the error.

  EERRRROORRSS

    The ssiiggnnaall(2) call will fail and no action will take place if one of the
    following occur:

    [EINVAL]
        Sig is not a valid signal number.

    [EINVAL]
        An attempt is made to ignore or supply a handler for SIGKILL or
        SIGSTOP.

  SSEEEE AALLSSOO

    _k_i_l_l(1)

    _k_i_l_l(2)

    _s_i_g_a_c_t_i_o_n(2)

    _s_i_g_p_r_o_c_m_a_s_k(2)

    _s_i_g_s_u_s_p_e_n_d(2)

    _s_e_t_j_m_p(3)

  UUSSAAGGEE NNOOTTEESS

    The ssiiggnnaall function is thread safe.

    The ssiiggnnaall function is async-signal safe.

