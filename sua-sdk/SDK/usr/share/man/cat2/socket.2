socket(2)                                                     socket(2)

  ssoocckkeett(())

  NNAAMMEE

    socket() - create an endpoint for communication

  SSYYNNOOPPSSIISS

    #include <sys/types.h>
    #include <sys/socket.h>

    int socket (int protofamily, int type, int protocol)

  DDEESSCCRRIIPPTTIIOONN

    The _ss_oo_cc_kk_ee_tt(2) function creates an endpoint for communication and returns a
    descriptor.

    The protofamily parameter specifies a communications protofamily within
    which communication will take place; this selects the protocol family
    which should be used. These families are defined in the include file <<ssyyss//
    ssoocckkeett..hh>>. Currently, the sockets understand only two formats:

    AF_INET
        ARPA Internet protocols

    AF_UNIX
        UNIX internal protocols

    The socket has the indicated type, which specifies the semantics of
    communication. Currently defined types are:

    SOCK_STREAM
    SOCK_DGRAM
    SOCK_RAW
    SOCK_SEQPACKET

    *     A SOCK_STREAM type provides sequenced, reliable, two-way connection
          based byte streams. An out-of-band data transmission mechanism can
          be supported. The AF_UNIX format supports SOCK_STREAM only.
    *     A SOCK_DGRAM socket supports datagrams (connectionless, unreliable
          messages of a fixed (typically small) maximum length).
    *     A SOCK_SEQPACKET socket can provide a sequenced, reliable, two-way
          connection-based data transmission path for datagrams of fixed
          maximum length; a consumer might be required to read an entire
          packet with each read system call. This facility is protocol
          specific, and presently implemented only for PF_NS.
    *     SOCK_RAW sockets provide access to internal network protocols and
          interfaces. They are not described here.

    The protocol specifies a particular protocol to be used with the socket.
    Normally only a single protocol exists to support a particular socket type
    within a given protocol family. However, it is possible that many
    protocols exist, in which case a particular protocol must be specified in
    this manner. Since only AF_INET protocols are supported in this
    implementation and because sockets of type SOCK_STREAM and SOCK_DGRAM only
    support one protocol each, use the value 0 for the protocol.

    Sockets of type SOCK_STREAM are full-duplex byte streams, similar to
    pipes. A stream socket must be in a connected state before any data can be
    sent or received on it. A connection to another socket is created with a
    _cc_oo_nn_nn_ee_cc_tt(2) call. Once connected, data can be transferred using _rr_ee_aa_dd(2) and
    _ww_rr_ii_tt_ee(2) calls or some variant of the _ss_ee_nn_dd(2) and _rr_ee_cc_vv(2) calls. When a
    session has been completed a _cc_ll_oo_ss_ee(2) can be performed. Out-of-band data
    can also be transmitted as described in _ss_ee_nn_dd(2) and received as described
    in _rr_ee_cc_vv(2).

    The communications protocols used to implement a SOCK_STREAM insure that
    data is not lost or duplicated. If a piece of data for which the peer
    protocol has buffer space cannot be successfully transmitted within a
    reasonable length of time, then the connection is considered broken and
    calls will indicate an error with -1 returns and with [ETIMEDOUT] as the
    specific code in the global variable errno The protocols optionally keep
    sockets warm by forcing transmissions roughly every minute in the absence
    of other activity. An error is then indicated if no response can be
    elicited on an otherwise idle connection for a extended period (such as
    five minutes). A SIGPIPE signal is raised if a process sends on a broken
    stream; this causes naive processes, which do not handle the signal, to
    exit.

    SOCK_SEQPACKET sockets employ the same system calls as SOCK_STREAM
    sockets. The only difference is that _rr_ee_aa_dd(2) calls will return only the
    amount of data requested, and any remaining in the arriving packet will be
    discarded.

    SOCK_DGRAM and SOCK_RAW sockets allow sending of datagrams to
    correspondents named in _ss_ee_nn_dd(2) calls. Datagrams are generally received
    with _rr_ee_cc_vv_ff_rr_oo_mm(2), which returns the next datagram with its return address.

    An _ff_cc_nn_tt_ll(2) call can be used to specify a process group to receive a
    SIGURG signal when the out-of-band data arrives. It might also enable non-
    blocking I/O and asynchronous notification of I/O events through SIGIO.

    The operation of sockets is controlled by socket level options These
    options are defined in the file <<ssyyss//ssoocckkeett..hh>>. The _ss_ee_tt_ss_oo_cc_kk_oo_pp_tt(2) and
    _gg_ee_tt_ss_oo_cc_kk_oo_pp_tt(2) functions are used to set and get options, respectively.

  RREETTUURRNN VVAALLUUEESS

    The function returns a descriptor referencing the socket; if the function
    fails, it returns -1 and sets errno to indicate the error.

  EERRRROORRSS

    The _ss_oo_cc_kk_ee_tt(2) call fails if:

    [EPROTONOSUPPORT]
        The protocol type or the specified protocol is not supported within
        this protofamily.

    [EMFILE]
        The per-process descriptor table is full.

    [ENFILE]
        The system file table is full.

    [EACCESS]
        Permission to create a socket of the specified type and/or protocol is
        denied.

    [ENOBUFS]
        Insufficient buffer space is available. The socket cannot be created
        until sufficient resources are freed.

  SSEEEE AALLSSOO

    _a_c_c_e_p_t(2)

    _b_i_n_d(2)

    _c_o_n_n_e_c_t(2)

    _g_e_t_s_o_c_k_n_a_m_e(2)

    _g_e_t_s_o_c_k_o_p_t(2)

    _l_i_s_t_e_n(2)

    _r_e_a_d(2)

    _r_e_c_v(2)

    _s_e_l_e_c_t(2)

    _s_e_n_d(2)

    _w_r_i_t_e(2)

  UUSSAAGGEE NNOOTTEESS

    The ssoocckkeett function is thread safe.

    The ssoocckkeett function is async-signal safe.

