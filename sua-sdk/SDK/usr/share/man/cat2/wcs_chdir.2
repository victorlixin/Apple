wcs_chdir(2)                                               wcs_chdir(2)

  cchhddiirr(())

  NNAAMMEE

    chdir(), wcs_chdir(), fchdir() - change current working directory

  SSYYNNOOPPSSIISS

    #include <unistd.h>

    int chdir (const char *path)
    int wcs_chdir (const wchar_t *path)
    int fchdir (int fildes)

  DDEESSCCRRIIPPTTIIOONN

    The cchhddiirr(2), wwccss__cchhddiirr(2), and ffcchhddiirr(2) calls change the current working
    directory of a process, that is, the starting point for path searches of
    pathnames not beginning with a slash (/).

    The cchhddiirr(2) and wwccss__cchhddiirr(2) functions are identical except that the
    wwccss__cchhddiirr(2) function accepts wide characters in the path argument. For
    cchhddiirr(2) and wwccss__cchhddiirr(2), the path argument points to the pathname of a
    directory. For ffcchhddiirr(2), the fildes argument is an open file descriptor
    specifying a directory.

    In order for a directory to become the current directory, a process must
    have execute (search) access to the directory.

  RREETTUURRNN VVAALLUUEESS

    Upon successfully completing, cchhddiirr(2), wwccss__cchhddiirr(2), and ffcchhddiirr(2) return
    0. Otherwise, they return -1 and errno to indicate the error.

  EERRRROORRSS

    The cchhddiirr(2) and wwccss__cchhddiirr(2) calls will fail and the current working
    directory will be unchanged if one or more of the following are true:

    [EINVAL]
        The pathname contains a character with the high-order bit set.

    [ENOTDIR]
        A component of the path prefix is not a directory.

    [ENAMETOOLONG]
        A component of a pathname exceeded {NAME_MAX} characters, or an entire
        pathname exceeded {PATH_MAX} characters.

    [ENOENT]
        The named directory does not exist.

    [ELOOP]
        Too many symbolic links were encountered in translating the pathname.

    [EACCES]
        Search permission is denied for any component of the pathname.

    The ffcchhddiirr(2) function will fail for these reasons:

    [EACCES]
        The process does not have search permission for the directory
        indicated by fildes.

    [EBADF]
        The fildes argument isn't an open file descriptor.

    [EINTR]
        The call was interrupted by a signal.

    [EIO]
        There was an I/O error while reading from the filesystem.

    [ENOTDIR]
        The file descriptor fildes does not point to a directory.

  UUSSAAGGEE NNOOTTEESS

    All of these functions are thread safe.

    The following functions are async-signal safe: cchhddiirr,, wwccss__cchhddiirr. The
    following function is not async-signal safe: ffcchhddiirr.

