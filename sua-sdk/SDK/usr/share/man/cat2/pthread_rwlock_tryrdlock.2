pthread_rwlock_tryrdlock(2)                 pthread_rwlock_tryrdlock(2)

  pptthhrreeaadd__rrwwlloocckk__rrddlloocckk(())

  NNAAMMEE

    pthread_rwlock_rdlock(), pthread_rwlock_tryrdlock() - lock a read-write
    lock object for reading

  SSYYNNOOPPSSIISS

    #include <pthread.h>

    int pthread_rwlock_rdlock(pthread_rwlock_t *lock);
    int pthread_rwlock_tryrdlock(pthread_rwlock_t *lock);

  DDEESSCCRRIIPPTTIIOONN

    The pptthhrreeaadd__rrwwlloocckk__rrddlloocckk(2) function applies a read lock to the read-
    write lock object referenced by the lock argument. The calling thread
    acquires the lock if a writer does not hold the lock and no writer is
    blocked on the lock. If the read lock is not acquired, then the calling
    thread is blocked until it acquires the lock. If the calling thread has a
    write lock on the lock object, it can deadlock as a result.

    A thread can call pptthhrreeaadd__rrwwlloocckk__rrddlloocckk() multiple times for the same lock
    object without first releasing the lock object. However, the application
    must be sure to call _pp_tt_hh_rr_ee_aa_dd____rr_ww_ll_oo_cc_kk____uu_nn_ll_oo_cc_kk(2) once for each lock that is
    acquired.

    If a thread is blocked waiting to acquire a read lock and receives a
    signal, the thread resumes waiting after the signal handler returns, as
    though the signal had not been received.

    The pptthhrreeaadd__rrwwlloocckk__ttrryyrrddlloocckk(2) function is identical to
    pptthhrreeaadd__rrwwlloocckk__rrddlloocckk except that the function fails and immediately
    returns, and the calling thread is not blocked, if the lock cannot be
    acquired.

  RREETTUURRNN VVAALLUUEESS

    On success, both functions return 0; otherwise, an error code is returned.

  EERRRROORRSS

    The pptthhrreeaadd__rrwwlloocckk__rrddlloocckk() function can fail for the following reason:

    [EDEADLK]
        The calling thread already has a write lock on the specified read-
        write lock object.

    The pptthhrreeaadd__rrwwlloocckk__ttrryyrrddlloocckk() function can fail for the following reason:

    [EBUSY]
        The read-write lock could not be acquired for reading because another
        thread holds a write lock on the object or a writer is blocked on it.

    Both functions can fail for the following reasons:

    [EAGAIN]
        The lock could not be acquired because the maximum permitted number of
        concurrent read locks for the read-write lock object has been reached.

    [EINVAL]
        The lock argument does not refer to a valid read-write lock object.

    Neither function returns [EINTR].

  SSEEEE AALLSSOO

    _p_t_h_r_e_a_d___r_w_l_o_c_k___d_e_s_t_r_o_y(2)

    _p_t_h_r_e_a_d___r_w_l_o_c_k___t_i_m_e_d_r_d_l_o_c_k(2)

    _p_t_h_r_e_a_d___r_w_l_o_c_k___t_i_m_e_d_w_r_l_o_c_k(2)

    _p_t_h_r_e_a_d___r_w_l_o_c_k___t_r_y_w_r_l_o_c_k(2)

    _p_t_h_r_e_a_d___r_w_l_o_c_k___u_n_l_o_c_k(2)

    _p_t_h_r_e_a_d___r_w_l_o_c_k___w_r_l_o_c_k(2)

  UUSSAAGGEE NNOOTTEESS

    All of these functions are thread safe.

    None of these functions are async-signal safe.

