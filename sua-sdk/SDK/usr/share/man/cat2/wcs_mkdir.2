wcs_mkdir(2)                                               wcs_mkdir(2)

  mmkkddiirr(())

  NNAAMMEE

    mkdir(), wcs_mkdir() - make a directory file

  SSYYNNOOPPSSIISS

    #include <sys/stat.h>

    int mkdir (const char *path, mode_t mode)
    int wcs_mkdir (const wchar_t *path, mode_t mode)

  DDEESSCCRRIIPPTTIIOONN

    The mmkkddiirr(2) and wwccss__mmkkddiirr(2) functions are identical except that
    wwccss__mmkkddiirr(2) accepts wide characters in the path argument.

    The directory path is created with the access permissions specified by
    mode and restricted by the the _uu_mm_aa_ss_kk(2) of the calling process.

    The directory's owner ID is set to the process's effective user ID. The
    directory's group ID is set to that of the parent directory in which it is
    created.

  RREETTUURRNN VVAALLUUEESS

    A 0 return value indicates success. A -1 return value indicates an error,
    and an error code is stored in errno

  EERRRROORRSS

    The call will fail and no directory will be created if:

    [EACCES]
        Search permission is denied for a component of the path prefix.

    [EEXIST]
        The named file exists.

    [EFAULT]
        Path points outside the process's allocated address space.

    [EINVAL]
        The pathname contains a character with the high-order bit set.

    [EIO]
        An I/O error occurred while making the directory entry or allocating
        the file serial number.

    [EIO]
        An I/O error occurred while reading from or writing to the file
        system.

    [ELOOP]
        Too many symbolic links were encountered in translating the pathname.

    [ENAMETOOLONG]
        A component of a pathname exceeded {NAME_MAX} characters, or an entire
        pathname exceeded {PATH_MAX} characters.

    [ENOENT]
        A component of the path prefix does not exist.

    [ENOSPC]
        The new directory cannot be created because there is no space left on
        the file system that will contain the directory.

    [ENOSPC]
        There are no free file serial numbers on the file system on which the
        directory is being created.

    [ENOSYS]
        Operation not applicable. The pathname names a file belonging to a
        virtual system that does not exist and cannot be created. For example,
        the call mkdir(/Z, mode) will fail with ENOSYS if drive ZZ:: is not
        mounted; the call mkdir(/proc/foo, mode) will fail with ENOSYS because
        the //pprroocc filesystem is virtual.

    [ENOTDIR]
        A component of the path prefix is not a directory.

    [EPERM]
        The path argument contains a byte with the high-order bit set.

    [EROFS]
        The named file resides on a read-only file system.

  SSEEEE AALLSSOO

    _c_h_m_o_d(2)

    _s_t_a_t(2)

    _u_m_a_s_k(2)

  UUSSAAGGEE NNOOTTEESS

    All of these functions are thread safe.

    All of these functions are async-signal safe.

