ioctl(2)                                                       ioctl(2)

  iiooccttll(())

  NNAAMMEE

    ioctl() - control a socket or file

  SSYYNNOOPPSSIISS

    #include <sys/ioctl.h>
    #include <stropts.h>

    int ioctl (int fd, int command, ...);

  DDEESSCCRRIIPPTTIIOONN

    The _ii_oo_cc_tt_ll(2) function manipulates the underlying device parameters. In
    particular, many operating characteristics of terminals and sockets may be
    controlled with _ii_oo_cc_tt_ll(2) requests. The argument fd must be an open file
    descriptor.

    Encoded in an _ii_oo_cc_tt_ll(2) request is whether the argument is an in parameter
    or an out parameter, and the size of the remaining arguments in bytes.

    The possible values for command are defined in <<ssyyss//iiooccttll..hh>> and include:

    FIONBIO
        Sets or clears on-blocking I/O. The arg should point to an iinntt. If the
        iinntt is non-zero, the flag is set and non-blocking mode is enabled; if
        it is zero, the flag is cleared, and non-blocking mode is disabled.

    FIONREAD
        Returns in arg the number of bytes available to read from fd; arg
        should point to an iinntt.

    SIOCATMARK
        For sockets; this boolean returns true if the socket's read pointer is
        at the out-of-band mark.

    TIOCEXT
        For pseudo terminals only; when this flag is non-zero (on), external
        processing mode is enabled. When zero, external processing mode is
        disabled. External processing mode places the terminal in a mode where
        characters are never echoed, special characters are never processed,
        and no characters are erased. This mode is often used in programs like
        tteellnneettdd(1).

    TIOCSIG
        For pseudo terminals only; the arg should point to an iinntt. Specifies a
        signal that can be applied to the terminal as if the signal were to be
        keyboard-generated. Valid signals are SIGTSTP, SIGINT, and SIGQUIT.

    The call

    ioctl(d, FIONBIO, NULL)

    is equivalent to a call to

    fcntl(d, F_SETFL, O_NONBLOCK)

    except that for each _ff_cc_nn_tt_ll(2) call, all of the flag values must set, while
    the _ii_oo_cc_tt_ll(2) call allows you to set only one flag.

  RREETTUURRNN VVAALLUUEE

    The return value of the _ii_oo_cc_tt_ll(2) depends upon the command. If an error
    occurs, it returns -1 and sets errno to indicate the error.

  EERRRROORRSS

    The _ii_oo_cc_tt_ll(2) call will fail if:

    [EAGAIN]
        A device opened for non-blocking i/o is not yet ready.

    [EBADF]
        Fd is not a valid open file descriptor.

    [EINTR]
        The function was interrupted by a signal.

    [EINVAL]
        the data to which arg points is not valid.

  NNOOTTEESS

    Traditional implementations of _ii_oo_cc_tt_ll(2) also handle the terminal
    interface. For terminal manipulation (traditionally handled with TIOCGETD,
    TIOCSETD, TIOCGETP, and TIOCSETP or with ssttttyy() and ggttttyy()), use the POSIX
    calls _tt_cc_gg_ee_tt_aa_tt_tt_rr(2), _tt_cc_ss_ee_tt_aa_tt_tt_rr(2), _cc_ff_gg_ee_tt_ii_ss_pp_ee_ee_dd(3), _cc_ff_ss_ee_tt_ii_ss_pp_ee_ee_dd(3),
    _cc_ff_gg_ee_tt_oo_ss_pp_ee_ee_dd(3), and _cc_ff_ss_ee_tt_oo_ss_pp_ee_ee_dd(3) to manipulate the tteerrmmiiooss structure,
    instead.

  SSEEEE AALLSSOO

    _e_x_e_c_v_e(2)

    _f_c_n_t_l(2)

  UUSSAAGGEE NNOOTTEESS

    The iiooccttll function is thread safe.

    The iiooccttll function is not async-signal safe.

