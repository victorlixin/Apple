pthread_spin_init(2)                               pthread_spin_init(2)

  pptthhrreeaadd__ssppiinn__ddeessttrrooyy(())

  NNAAMMEE

    pthread_spin_destroy(), pthread_spin_init() - initialize or destroy a spin
    lock

  SSYYNNOOPPSSIISS

    #include <pthread.h>

    int pthread_spin_destroy(pthread_spinlock_t *lock);
    int pthread_spin_init(pthread_spinlock_t *lock, int pshared);

  DDEESSCCRRIIPPTTIIOONN

    The pptthhrreeaadd__ssppiinn__iinniitt(2) function initializes the spin lock referenced by
    the lock argument using the process-shared attribute specified by pshared.
    When the process-shared attribute is set to PTHREAD_PROCESS_SHARED, the
    spin lock can be acted upon by any thread that can access the memory where
    the spin lock is stored, even if the spin lock is allocated in memory
    shared by multiple processes. When the process-shared attribute is set to
    PTHREAD_PROCESS_PRIVATE (the default), the spin lock can be acted upon
    only by threads that have been created in the same process as the thread
    that initialized the spin lock.

    The pptthhrreeaadd__ssppiinn__ddeessttrrooyy(2) function destroys the spin lock referenced by
    the lock argument.

    Note that on the Microsoft Windows Subsystem for Unix Applications, 
    PTHREAD_PROCESS_SHARED spin locks are not supported, yet the 
    pptthhrreeaadd__ssppiinn__iinniitt() function will not fail if the pshared integer 
    is PTHREAD_PROCESS_SHARED. Regardless of the value of the pshared 
    parameter when pptthhrreeaadd__ssppiinn__iinniitt() is called, pptthhrreeaadd__ssppiinn__iinniitt(2) 
    initializes each spin lock as a PTHREAD_PROCESS_PRIVATE lock.

  RREETTUURRNN VVAALLUUEESS

    On success, the functions return 0; otherwise, an error code is returned.

  EERRRROORRSS

    Both functions can fail for the following reasons:

    [EBUSY]
        The specified spin lock is in use by another thread.

    [EINVAL]
        The lock argument is invalid.

    The pptthhrreeaadd__ssppiinn__iinniitt() function can fail for the following reasons:

    [EAGAIN]
        A required system resource, other than memory, has been exhausted

    [ENOMEM]
        Not enough free memory exists to initialize the spin lock.

    Neither function returns [EINTR].

  SSEEEE AALLSSOO

    _p_t_h_r_e_a_d___s_p_i_n___l_o_c_k(2)

    _p_t_h_r_e_a_d___s_p_i_n___u_n_l_o_c_k(2)

  UUSSAAGGEE NNOOTTEESS

    All of these functions are thread safe.

    None of these functions are async-signal safe.

