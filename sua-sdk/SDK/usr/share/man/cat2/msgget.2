msgget(2)                                                     msgget(2)

  mmssggggeett(())

  NNAAMMEE

    msgget() - get message queue

  SSYYNNOOPPSSIISS

    #include <sys/msg.h>

    int msgget (key_t key, int msgflg)

  DDEESSCCRRIIPPTTIIOONN

    The _mm_ss_gg_gg_ee_tt(2) function returns a message queue identifier associated with
    key.

    The key can be an agreed-upon integer or it can have the value
    IPC_PRIVATE.

    The msgflag controls the mode and permissions of the message queue. The
    following bits (defined in <<ssyyss//iippcc..hh>>) can be OR'ed into msgflag:

    IPC_CREAT
        Create the entry if the key doesn't exist.

    IPC_EXCL
        Fail if the key already exists and its creation was requested.

    IPC_NOWAIT
        Return an error if the request must wait. This request controls the
        behavior of _mm_ss_gg_rr_cc_vv(2) and _mm_ss_gg_ss_nn_dd(2), while the IPC_CREAT and IPC_EXCL
        requests control how an IPC handle is obtained.

    If the key already has a message queue identifier associated with it, then
    _mm_ss_gg_gg_ee_tt(2) returns that value.

    The _mm_ss_gg_gg_ee_tt(2) function creates the message queue if:
    *     The key is IPC_PRIVATE; or
    *     the key doesn't already have a message queue identifier associated
          with it and (msgflg is non-zero.

    When a message queue is created, the data structure associated with the
    identifier is initialized as follows:
    Member            Meaning                   IInniittiiaalliizzeedd

    msg_perm.uid      effective user ID         of calling process

    msg_perm.gid      effective group ID        of calling process

    msg_perm.cuid     effective user ID         of calling process

    msg_perm.cgid     effective group ID        of calling process

    msg_perm.mode     Permissions               low-order 9 bits are set to
                                                low-order 9 bits of msgflg

    msg_ctime         time of last change       current time

    msg_lrpid         process ID of last        0
                      mmssggrrccvv()

    msg_lspid         process ID of last        0
                      mmssggssnndd()

    msg_qbytes        max num. of bytes allo    system default
                      on queue

    msg_qnum          number of messages on     0
                      queue

    msg_rtime         Time of last mmssggrrccvv()     0

    msg_stime         Time of last mmssggssnndd()     0

    Note that there is no distinction between user and effective user IDs. The
    limit for msg_qbytes is available memory.

    When you create the queue, it has a size of 4K bytes. This size can be
    changed with the mmssggccttll(IPC_SET) call. The maximum size of a queue is
    limited only be the ability of the system to allocate contiguous memory.

    The header file <<ssyyss//iippcc..hh>> is automatically included when you include the
    file <<ssyyss//mmssgg..hh>>.

  RREETTUURRNN VVAALLUUEE

    On success, _mm_ss_gg_gg_ee_tt(2) returns a message queue identifier, a non-negative
    integer . On failure, it returns -1 and sets errno to indicate the error.

  EERRRROORRSS

    The _mm_ss_gg_gg_ee_tt(2) function can fail for the following reasons:

    [EACCES]
        A message queue identifier already exists for key, but permissions
        cannot be granted.

    [EEXIST]
        A message queue identifier already exists for key, but ((msgflg &&
        (msgflg is non-zero.

    [ENOENT]
        No message queue identifier exists for key and creation of one was not
        requested (that is, msgflg&IPC_CREAT is zero).

    [ENOSPC]
        Creating the message queue identifier would exceed the system-wide
        limit on the number of message queue identifiers.

  SSEEEE AALLSSOO

    _m_s_g_c_t_l(2)

    _m_s_g_r_c_v(2)

    _m_s_g_s_n_d(2)

  UUSSAAGGEE NNOOTTEESS

    The mmssggggeett function is thread safe.

    The mmssggggeett function is not async-signal safe.

