grantpt(2)                                                   grantpt(2)

  ggrraannttpptt(())

  NNAAMMEE

    grantpt(), unlockpt() - Manipulate pty descriptors

  SSYYNNOOPPSSIISS

    #include <stdlib.h>

    int grantpt(int fildes)
    int unlockpt(int fildes)

  DDEESSCCRRIIPPTTIIOONN

    The _gg_rr_aa_nn_tt_pp_tt(2) function takes as an argument a master pseudo-terminal
    device, fildes, and changes the mode and ownership of the corresponding
    subordinate (also known as slave) pseudo-terminal device. The
    subordinate's user ID is set to the calling process' real user ID, and the
    subordinate's permissions are set to readable and writable by the owner,
    and writable by the group.

    NNoottee:: This implementation catches errors but does not actually change the
    mode and ownership.

    The _uu_nn_ll_oo_cc_kk_pp_tt(2) function unlocks the subordinate pseudo-terminal device
    associated with a master pseudo-terminal device; the master pseudo-
    terminal device is indicated by fildes.

  RREETTUURRNN VVAALLUUEE

    Both _gg_rr_aa_nn_tt_pp_tt(2) and _uu_nn_ll_oo_cc_kk_pp_tt(2) return 0 on success, or -1 on failure. If
    one of these functions fails, it sets errno to indicate the error.

  EERRRROORRSS

    The _gg_rr_aa_nn_tt_pp_tt(2) and _uu_nn_ll_oo_cc_kk_pp_tt(2) calls might fail for the following reasons:

    [EBADF]
        The descriptor fildes is not a valid open file descriptor.

    [EINVAL]
        The descriptor fildes does not actually indicate a master pseudo-
        terminal device.

    The _gg_rr_aa_nn_tt_pp_tt(2) call might also fail for the following reason:

    [EACCES]
        The corresponding subordinate pseudo-terminal could not be accessed.

  NNOOTTEESS

    These implementations will catch errors, but they do not actually change
    the mode and ownership (for _gg_rr_aa_nn_tt_pp_tt(2)) or unlock the subordinate pseudo
    terminal device (for _uu_nn_ll_oo_cc_kk_pp_tt(2)).

  SSEEEE AALLSSOO

    _i_o_c_t_l(2)

    _o_p_e_n(2)

    _p_t_s_n_a_m_e(2)

    _p_t_y(4)

    _t_t_y(4)

  UUSSAAGGEE NNOOTTEESS

    All of these functions are thread safe.

    None of these functions are async-signal safe.

