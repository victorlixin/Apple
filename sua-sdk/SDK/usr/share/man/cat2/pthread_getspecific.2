pthread_getspecific(2)                           pthread_getspecific(2)

  pptthhrreeaadd__ggeettssppeecciiffiicc(())

  NNAAMMEE

    pthread_getspecific(), pthread_setspecific() - get or set value by key

  SSYYNNOOPPSSIISS

    #include <pthread.h>

    void * pthread_getspecific(pthread_key_t key);
    int pthread_setspecific(pthread_key_t key, const void *value);

  DDEESSCCRRIIPPTTIIOONN

    The pptthhrreeaadd__sseettssppeecciiffiicc(2) function associates the value referenced by the
    value argument to the key identified by the key argument. This association
    is thread-specific; that is, different threads can associate different
    values with the same key. Typically, these values are pointers to blocks
    of dynamically allocated memory that are reserved for use by the thread.
    The value specified by key must have been obtained from a call to the
    _pp_tt_hh_rr_ee_aa_dd____kk_ee_yy____cc_rr_ee_aa_tt_ee(2) function.

    The pptthhrreeaadd__ggeettssppeecciiffiicc(2) function returns the thread-specific value
    associated with the specified key for the calling thread.

    Both functions can be called from a thread's data-destructor functions.
    Unless the value was changed by a call to pptthhrreeaadd__sseettssppeecciiffiicc() after a
    data destructor had started, a call to pptthhrreeaadd__ggeettssppeecciiffiicc for a key being
    destroyed returns null.

  RREETTUURRNN VVAALLUUEESS

    The pptthhrreeaadd__ggeettssppeecciiffiicc() function returns the value associated with the
    specified key; if no value is associated with that key, then the function
    returns null.

    On success, the pptthhrreeaadd__sseettssppeecciiffiicc() function returns 0; otherwise, an
    error code is returned.

  EERRRROORRSS

    The pptthhrreeaadd__sseettssppeecciiffiicc() function can fail for the following reasons:

    [ENOMEM]
        Not enough memory is free to perform the operation.

    [EINVAL]
        The key argument does not refer to a valid key.

    Neither function returns [EINTR].

  SSEEEE AALLSSOO

    _p_t_h_r_e_a_d___k_e_y___c_r_e_a_t_e(2)

  UUSSAAGGEE NNOOTTEESS

    All of these functions are thread safe.

    None of these functions are async-signal safe.

