fork(2)                                                         fork(2)

  ffoorrkk(())

  NNAAMMEE

    fork() - create a new process

  SSYYNNOOPPSSIISS

    #include <unistd.h>

    pid_t fork (void)

  DDEESSCCRRIIPPTTIIOONN

    The _ff_oo_rr_kk(2) function causes creation of a new process. The new process
    (child process) is an exact copy of the calling process (parent process)
    except for the following:
    *     The child process has a unique process ID.
    *     The child process has a different parent process ID (i.e., the
          process ID of the parent process).
    *     The child process has its own copy of the parent's descriptors.
          These descriptors reference the same underlying objects, so that,
          for instance, file pointers in file objects are shared between the
          child and the parent, so that an _ll_ss_ee_ee_kk(2) on a descriptor in the
          child process can affect a subsequent _rr_ee_aa_dd(2) or _ww_rr_ii_tt_ee(2) by the
          parent. This descriptor copying is also used by the shell to
          establish standard input and output for newly created processes as
          well as to set up pipes.
    *     The child process's values of tms_utime tms_stime tms_cutime and
          tms_cstime are set to zero.
    *     The child does not inherit any file locks set by the parent.
    *     Any pending alarms have been cleared for the child process.
    *     Signals pending for the child process have been initialized to the
          empty set.

  RREETTUURRNN VVAALLUUEESS

    Upon successful completion, _ff_oo_rr_kk(2) returns a value of 0 to the child
    process and returns the process ID of the child process to the parent
    process. Otherwise, a value of -1 is returned to the parent process, no
    child process is created, and the global variable errno is set to indicate
    the error.

  EERRRROORRSS

    The _ff_oo_rr_kk(2) function will fail and no child process will be created if:

    [EAGAIN]
        The system-imposed limit on the total number of processes under
        execution would be exceeded. This limit is configuration-dependent.

    [EAGAIN]
        The system-imposed limit on the total number of processes under
        execution by a single user would be exceeded.

    [ENOMEM]
        Insufficient memory is available.

  SSEEEE AALLSSOO

    _e_x_e_c(2)

    _v_f_o_r_k(2)

    _w_a_i_t(2)

  UUSSAAGGEE NNOOTTEESS

    The ffoorrkk function is thread safe.

    The ffoorrkk function is async-signal safe.

