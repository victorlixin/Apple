close(2)                                                       close(2)

  cclloossee(())

  NNAAMMEE

    close() - delete a descriptor

  SSYYNNOOPPSSIISS

    #include <unistd.h>

    int close (int d)

  DDEESSCCRRIIPPTTIIOONN

    The _cc_ll_oo_ss_ee(2) call deletes the file descriptor d and makes it available for
    re-use. If the calling process owns any outstanding record locks on the
    file indicated by d, the call unlocks them.

    When all of the file descriptors pointing to a file are deleted, the file
    is removed. If the file is a pipe or a FIFO, any data remaining in the
    pipe or FIFO is discarded. For example, on the last close of a file the
    current seek pointer associated with the file is lost. On the last close
    of a _ss_oo_cc_kk_ee_tt(2), the associated naming information and queued data are
    discarded.

    When a process exits, all associated file descriptors are freed, but since
    there is a limit on active descriptors per process, the _cc_ll_oo_ss_ee(2) function
    call is useful when a large quantity of file descriptors are being
    handled.

    When a process forks (see _ff_oo_rr_kk(2)), all descriptors for the new child
    process reference the same objects as they did in the parent before the
    fork. If a new process is then to be run using _ee_xx_ee_cc(2), the process would
    normally inherit these descriptors. Most of the descriptors can be
    rearranged with _dd_uu_pp_22(2) or deleted with _cc_ll_oo_ss_ee(2) before the _ee_xx_ee_cc_vv_ee(2) is
    attempted, but if some of these descriptors will still be needed if the
    _ee_xx_ee_cc_vv_ee(2) fails, it is necessary to arrange for them to be closed if the
    _ee_xx_ee_cc_vv_ee(2) succeeds. To do this, use the call:

    fcntl(d, F_SETFD, 1)

    which arranges that a descriptor will be closed after a successful execve;
    to restore the default (that is, not to close the descriptor), use the
    call:

    fcntl(d, F_SETFD, 0)

  RREETTUURRNN VVAALLUUEESS

    Upon successful completion, a value of 0 is returned. Otherwise, a value
    of -1 is returned and the global integer variable errno is set to indicate
    the error.

  EERRRROORRSS

    The _cc_ll_oo_ss_ee(2) call will fail if:

    [EBADF]
        D is not an active descriptor.

    [EINTR]
        An interrupt was received.

  SSEEEE AALLSSOO

    _a_c_c_e_p_t(2)

    _s_o_c_k_e_t(2)

    _e_x_e_c(2)

    _f_c_n_t_l(2)

    _o_p_e_n(2)

    _p_i_p_e(2)

  UUSSAAGGEE NNOOTTEESS

    The cclloossee function is thread safe.

    The cclloossee function is async-signal safe.

