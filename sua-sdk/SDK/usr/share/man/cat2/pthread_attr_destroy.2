pthread_attr_destroy(2)                         pthread_attr_destroy(2)

  pptthhrreeaadd__aattttrr__ddeessttrrooyy(())

  NNAAMMEE

    pthread_attr_destroy(), pthread_attr_init() - initialize or destroy a
    thread attributes object

  SSYYNNOOPPSSIISS

    #include <pthread.h>

    int pthread_attr_destroy(pthread_attr_t *attr)
    int pthread_attr_init(pthread_attr_t *attr);

  DDEESSCCRRIIPPTTIIOONN

    The pptthhrreeaadd__aattttrr__iinniitt(2) function initializes the thread attributes object
    referenced by attr with default values. This object is supplied to the
    _pp_tt_hh_rr_ee_aa_dd____cc_rr_ee_aa_tt_ee(2) function to specify the attributes of the thread when it
    is created. The same thread attributes object can be used in multiple
    calls to pptthhrreeaadd__ccrreeaattee().

    The pptthhrreeaadd__aattttrr__ddeessttrrooyy() function destroys a thread attributes object.

    After the attributes have been set in the thread attributes object
    referenced by attr, the _pp_tt_hh_rr_ee_aa_dd____cc_rr_ee_aa_tt_ee(2) function can be called to create
    a new thread with the specified attributes. This function does not affect
    the current running thread.

  RREETTUURRNN VVAALLUUEESS

    On success, both functions return 0; otherwise, they return an error
    number.

  EERRRROORRSS

    The pptthhrreeaadd__aattttrr__iinniitt() function can fail for this reason:

    [ENOMEM]
        Not enough memory to initialize the thread attributes object.

    This function does not return [EINTR].

  SSEEEE AALLSSOO

    _p_t_h_r_e_a_d___a_t_t_r___g_e_t_d_e_t_a_c_h_s_t_a_t_e(2)

    _p_t_h_r_e_a_d___a_t_t_r___g_e_t_g_u_a_r_d_s_i_z_e(2)

    _p_t_h_r_e_a_d___a_t_t_r___g_e_t_i_n_h_e_r_i_t_s_c_h_e_d(2)

    _p_t_h_r_e_a_d___a_t_t_r___g_e_t_s_c_h_e_d_p_a_r_a_m(2)

    _p_t_h_r_e_a_d___a_t_t_r___g_e_t_s_c_h_e_d_p_o_l_i_c_y(2)

    _p_t_h_r_e_a_d___a_t_t_r___g_e_t_s_c_o_p_e(2)

    _p_t_h_r_e_a_d___a_t_t_r___g_e_t_s_t_a_c_k(2)

    _p_t_h_r_e_a_d___a_t_t_r___g_e_t_s_t_a_c_k_a_d_d_r(2)

    _p_t_h_r_e_a_d___a_t_t_r___g_e_t_s_t_a_c_k_s_i_z_e(2)

    _p_t_h_r_e_a_d___c_r_e_a_t_e(2)

  UUSSAAGGEE NNOOTTEESS

    All of these functions are thread safe.

    None of these functions are async-signal safe.

