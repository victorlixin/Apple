stat(2)                                                         stat(2)

  ssttaatt(())

  NNAAMMEE

    stat(), wcs_stat(), lstat(), wcs_lstat(), fstat() - get file status

  SSYYNNOOPPSSIISS

    #include <sys/types.h>
    #include <sys/stat.h>

    int stat (const char *path, struct stat *sb)
    int wcs_stat (const wchar_t *path, struct stat *sb)
    int lstat (const char *path, struct stat *sb)
    int wcs_lstat (const wchar_t *path, struct stat *sb)
    int fstat (int fd, struct stat *sb)

  DDEESSCCRRIIPPTTIIOONN

    The ssttaatt(2) and wwccss__ssttaatt(2) functions are identical, as are the llssttaatt(2)
    and wwccss__llssttaatt(2) functions, except that the wwccss__ssttaatt(2) and wwccss__llssttaatt(2)
    functions accept wide characters in the path argument.

    The ssttaatt(2) and wwccss__ssttaatt(2) functions obtain information about the file
    pointed to by path. Read, write or execute permission of the named file is
    not required, but all directories listed in the pathname leading to the
    file must be searchable. If path is a symbolic link, ssttaatt(2) or
    wwccss__ssttaatt(2) returns information about the file the link references.

    The llssttaatt(2) and wwccss__llssttaatt(2) functions are like ssttaatt(2), unless the file
    named by path is a symbolic link. In this case, llssttaatt(2) returns
    information about the link file itself. The function stores the length of
    the pathname in the link file in the sstt__ssiizzee member (without the trailing
    null). The file type information macros defined in <<ssyyss//ssttaatt..hh>> will work
    with a symbolic link.

    The ffssttaatt(2) function obtains the same information about an open file
    identified by the file descriptor fd.

    The sb argument is a pointer to a ssttaatt structure as defined by <<ssyyss//
    ssttaatt..hh>> (shown below) and into which information is placed concerning the
    file.
    TTyyppee        FFiieelldd               DDeessccrriippttiioonn

    mode_t      st_mode             protection mode

    ino_t       st_ino              file serial number

    dev_t       st_dev              device file resides on

    dev_t       st_rdev             type of device file resides on

    nlink_t     st_nlink            number of hard links to the file

    uid_t       st_uid              user-ID of owner

    gid_t       st_gid              group-ID of owner

    off_t       st_size             file size, in bytes

    time_t      st_atime            time of last access

    time_t      st_mtime            time of last data modification

    time_t      st_ctime            time of last file status change

    long        st_blksize          optimal file system I/O ops blocksize

    long        st_blocks           number of blocks allocated for the file

    int         st_attrs            MS-DOS file attributes

    int         st_info             Interix-specific flags

    long        st_reserved[18]     reserved for future use

    The time-related fields of struct stat are as follows:

    st_atime
        Time when file data last accessed. Changed by the _uu_tt_ii_mm_ee(2) and _rr_ee_aa_dd(2)
        calls.

    st_mtime
        Time when file data last modified. Changed by the _uu_tt_ii_mm_ee(2) and
        _ww_rr_ii_tt_ee(2) calls.

    st_ctime
        Time when file status was last changed (file serial data
        modification). Changed by the _cc_hh_mm_oo_dd(2), _cc_hh_oo_ww_nn(2), _ll_ii_nn_kk(2), _rr_ee_nn_aa_mm_ee(2),
        _uu_nn_ll_ii_nn_kk(2), _uu_tt_ii_mm_ee(2) and _ww_rr_ii_tt_ee(2) calls.

    The size-related fields of the ssttrruucctt ssttaatt are:

    st_blksize
        The optimal I/O block size for the file.

    The status information word st_mode has the following bits:
    SSyymmbbooll       MMeeaanniinngg

    S_IFMT       Type of file

    S_IFIFO      named pipe (fifo)

    S_IFCHR      character special

    S_IFDIR      directory

    S_IFBLK      block special

    S_IFREG      regular

    S_IFLNK      symbolic link

    S_IFSOCK     file is socket

    S_ISUID      set user ID on execution

    S_ISGID      set group ID on execution

    S_IRWXU      read, write, execute/search by owner

    S_IRUSR      read permission, owner

    S_IWUSR      write permission, owner

    S_IXUSR      execute/search permission, owner

    S_IRWXG      read, write, execute/search by group

    S_IRGRP      read permission, group

    S_IWGRP      write permission, group

    S_IXGRP      execute/search permission, group

    S_IRWXO      read, write, execute/search by others

    S_IROTH      read permission, file other

    S_IWOTH      write permission, file other

    S_IXOTH      execute/search permission, file other

    For a list of access modes, see <<ssyyss//ssttaatt..hh>>, _aa_cc_cc_ee_ss_ss(2) and _cc_hh_mm_oo_dd(2).

    For a FIFO file, the st_size field contains its PIPE_BUF value.

    The st_attrs field can have the following bits set:
    *     S_READONLY
    *     S_HIDDEN
    *     S_SYSTEM
    *     S_DIRECTORY
    *     S_ARCHIVE
    *     S_TEMPORARY
    *     S_COMPRESSED
    *     S_OFFLINE

    The st_info field has only one flag: When st_info is set to
    S_INO_RELIABLE, st_ino can be trusted.

  DDeetteerrmmiinniinngg FFiillee TTyyppee

    To determine the type of a file, several macros are defined in <<ssyyss//
    ssttaatt..hh>>; these all take the value of the st_mode from the ssttaatt structure
    as their argument:
    S_ISDIR(m)      True if directory file, false otherwise

    S_ISCHR(m)      True if character special file, false otherwise

    S_ISBLK(m)      True if block special file, false otherwise

    S_ISREG(m)      True if regular file, false otherwise

    S_ISFIFO(m)     True if pipe or FIFO special file, false otherwise

    S_ISSOCK(m)     True if a socket, false otherwise

  RREETTUURRNN VVAALLUUEESS

    Upon successful completion, ssttaatt(2), wwccss__ssttaatt(2), and ffssttaatt(2) return 0.
    Otherwise they return -1 and set errno to indicate the error.

  EERRRROORRSS

    The ssttaatt(2), wwccss__ssttaatt(2), llssttaatt(2), and wwccss__llssttaatt(2) calls will fail if:

    [EACCES]
        Search permission is denied for a component of the path prefix.

    [EFAULT]
        Sb or name points to an invalid address.

    [EIO]
        An I/O error occurred while reading from or writing to the file
        system.

    [ELOOP]
        Too many symbolic links were encountered in translating the pathname.

    [EINVAL]
        The pathname contains a character with the high-order bit set, or the
        process attempted to ssttaatt(2) a file on a device that does not support
        the call.

    [ENAMETOOLONG]
        A component of a pathname exceeded characters, or an entire pathname
        exceeded characters.

    [ENOENT]
        The named file does not exist.

    [ENOMEM]
        Insufficient memory to allocate the ssttaatt structure.

    [ENOTDIR]
        A component of the path prefix is not a directory.

    The ffssttaatt(2) call will fail if:

    [EBADF]
        fd is not a valid open file descriptor.

    [EIO]
        An I/O error occurred while reading from or writing to the file
        system.

  NNOOTTEE

    If the Win32 Read-Only attribute is set on a file, ssttaatt(2) reports that
    the file is unwriteable, no matter what the permissions are. To turn off
    the Win32 Read-Only attribute, you can use _cc_hh_mm_oo_dd(2) to enable a write
    permission; _cc_hh_mm_oo_dd(2) will unset the Read-Only attribute.

  SSEEEE AALLSSOO

    _c_h_m_o_d(2)

    _c_h_o_w_n(2)

    _g_r_o_u_p___f_r_o_m___g_i_d(3)

    _u_s_e_r___f_r_o_m___u_i_d(3)

    _u_t_i_m_e(2)

  UUSSAAGGEE NNOOTTEESS

    All of these functions are thread safe.

    All of these functions are async-signal safe.

