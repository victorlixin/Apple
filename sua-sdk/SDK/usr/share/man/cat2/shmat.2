shmat(2)                                                       shmat(2)

  sshhmmaatt(())

  NNAAMMEE

    shmat() - attach shared memory segment

  SSYYNNOOPPSSIISS

    #include <sys/shm.h>

    void *shmat(int shmid, const void *shmaddr, int shmflg);

  DDEESSCCRRIIPPTTIIOONN

    The _ss_hh_mm_aa_tt(2) function attaches the shared memory segment identified by
    shmid to the address space of the calling process. Shmid is the value
    returned from _ss_hh_mm_gg_ee_tt(2).) If shmaddr is NULL, the segment is attached at
    the first available address. Otherwise, the parameters shmaddr and shmflg
    determine the location of the added segment.

    The data structure for shared memory segments and the control flags (such
    as SHM_RND) are defined in <<sshhmm..hh>>.

    To specify the address, make shmaddr non-NULL and:
    *     if shmflg & SHM_RND is zero, the segment is attached at the address
          given by shmaddr.
    *     if shmflg & SHM_RND is non-zero, the segment is attached at the
          address
          shmaddr - ((ptrdiff_t)shmaddr%SHMLBA))
          where % is the C language modulus (remainder) operator.

    Permissions on the shared memory segment are determined by the value of
    shmflg:
    *     If (shmflg & SHM_RDONLY) is zero, and the the calling process has
          read and write permission, the segment is attached for reading and
          writing.
    *     If (shmflg & SHM_RDONLY) is non-zero, and the calling process has
          read permission, the segment is attached for reading.

    The header file <<ssyyss//sshhmm..hh>> includes <<ssyyss//iippcc..hh>>.

  RREETTUURRNN VVAALLUUEE

    On success, _ss_hh_mm_aa_tt(2) increments the value of shm_nattach in the data
    structure and returns the segment's start address.

    On failure, _ss_hh_mm_aa_tt(2) returns -1 and sets errno to indicate the error.

  EERRRROORRSS

    The _ss_hh_mm_aa_tt(2) function can fail for the following reasons:

    [EACCES]
        Permission is denied to the calling process.

    [EINVAL]
        Shmid is not a valid shared memory identifier, or (if shmaddr is not
        NULL) the value of (shmaddr-((pterdiff_t)shmaddr%SHMLBA)) is an
        illegal address, or shmaddr is not a valid address.

    [EMFILE]
        Adding this shared memory segment would exceed the system limit.

    [ENOMEM]
        The data space is not large enough to accommodate the shared memory
        segment.

    [ENOSYS]
        The function is not implemented.

  EEXXAAMMPPLLEESS

    See _s_h_m_c_t_l(2).

  SSEEEE AALLSSOO

    _s_h_m_c_t_l(2)

    _s_h_m_d_t(2),

    _s_h_m_g_e_t(2)

  UUSSAAGGEE NNOOTTEESS

    The sshhmmaatt function is thread safe.

    The sshhmmaatt function is not async-signal safe.

