ulimit(2)                                                     ulimit(2)

  uulliimmiitt(())

  NNAAMMEE

    ulimit - get and set process limits

  SSYYNNOOPPSSIISS

    #include <ulimit.h>

    long int ulimit(int cmd, ...);

  DDEESSCCRRIIPPTTIIOONN

    The uulliimmiitt(2) function provides for control over process limits. The cmd
    values, defined in <ulimit.h> include:

    UL_GDESLIM
        Return the processes current soft limit for open file descriptors.

    UL_GETFSIZE
        Return the soft file size limit of the process. The limit is in units
        of 512-byte blocks and is inherited by child processes. Files of any
        size can be read. The return value is the integer part of the soft
        file size limit divided by 512. If the result cannot be represented as
        a lloonngg iinntt, the result is unspecified.

    UL_SETFSIZE
        Set the hard and soft file size limits for output operations of the
        process to the value of the second argument, taken as a lloonngg iinntt. Any
        process may decrease its own hard limit, but only a process with
        appropriate privileges may increase the limit. The new file size limit
        is returned. The hard and soft file size limits are set to the
        specified value multiplied by 512. If the result would overflow an
        rlim_t, the actual value set is unspecified.

  RREETTUURRNN VVAALLUUEE

    Upon successful completion, uulliimmiitt(2) returns the value of the requested
    limit. Otherwise -1 is returned and errno is set to indicate the error.
    The uulliimmiitt(2) function will not change the setting of errno if successful.

  EERRRROORRSS

    The uulliimmiitt(2) function will fail and the limit will be unchanged if:

    [EINVAL]
        The cmd argument is not valid.

    [EPERM]
        A process not having appropriate privileges attempts to increase its
        file size limit.

  AAPPPPLLIICCAATTIIOONN UUSSAAGGEE

    As all return values are permissible in a successful situation, an
    application wishing to check for error situations should set errno to 0,
    then call uulliimmiitt(2), and, if it returns -1, check to see if errno is non-
    zero.

  SSEEEE AALLSSOO

    _gg_ee_tt_rr_ll_ii_mm_ii_tt(2)

    _ss_ee_tt_rr_ll_ii_mm_ii_tt(2)

    _ww_rr_ii_tt_ee(2)

  DDEERRIIVVAATTIIOONN

    Derived from Issue 1 of the SVID.

  UUSSAAGGEE NNOOTTEESS

    The uulliimmiitt function is thread safe.

    The uulliimmiitt function is not async-signal safe.

