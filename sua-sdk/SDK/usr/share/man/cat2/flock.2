flock(2)                                                       flock(2)

  fflloocckk(())

  NNAAMMEE

    flock() - apply or remove an advisory lock on an open file

  SSYYNNOOPPSSIISS

    #include <fcntl.h>
    #define LOCK_SH 1 /* shared lock */
    #define LOCK_EX 2 /* exclusive lock */
    #define LOCK_NB 4 /* don't block when locking */
    #define LOCK_UN 8 /* unlock */

    int flock (int fd, int operation)

  DDEESSCCRRIIPPTTIIOONN

    The _ff_ll_oo_cc_kk(2) applies or removes an advisory lock on the file associated
    with the file descriptor fd. A lock is applied by specifying an operation
    parameter that is one of LOCK_SH or LOCK_EX with the optional addition of
    LOCK_NB. To unlock an existing lock operation should be LOCK_UN.

    Advisory locks allow cooperating processes to perform consistent
    operations on files, but do not guarantee consistency (i.e., processes may
    still access files without using advisory locks possibly resulting in
    inconsistencies).

    The locking mechanism allows two types of locks: shared locks and
    exclusive locks. At any time multiple shared locks may be applied to a
    file, but at no time are multiple exclusive, or both shared and exclusive,
    locks allowed simultaneously on a file.

    A shared lock may be upgraded to an exclusive lock, and vice versa, simply
    by specifying the appropriate lock type; this results in the previous lock
    being released and the new lock applied (possibly after other processes
    have gained and released the lock).

    Requesting a lock on an object that is already locked normally causes the
    caller to be blocked until the lock may be acquired. If LOCK_NB is
    included in operation, then this will not happen; instead the call will
    fail and the error [EWOULDBLOCK] will be returned.

  NNOOTTEESS

    Locks are on files, not file descriptors. That is, file descriptors
    duplicated through _dd_uu_pp(2)() or _ff_oo_rr_kk(2)() do not result in multiple
    instances of a lock, but rather multiple references to a single lock. If a
    process holding a lock on a file forks and the child explicitly unlocks
    the file, the parent will lose its lock.

    Processes blocked awaiting a lock may be awakened by signals.

    ff_ll_oo_cc_kk(2) should not be used in mixed mode programming at all; UNIX 
    semantics are advisory in nature - while Windows locking is mandatory in 
    nature. ff_ll_oo_cc_kk(2) calls in mixed mode programs will often yield
    unpredictable results. 

  RREETTUURRNN VVAALLUUEESS

    Zero is returned if the operation was successful; on an error a -1 is
    returned and an error code is left in the global location errno.

  EERRRROORRSS

    The _ff_ll_oo_cc_kk(2) call fails if:

    [EWOULDBLOCK]
        The file is locked and the LOCK_NB option was specified.

    [EBADF]
        The argument fd is an invalid descriptor.

    [EINVAL]
        The argument fd refers to an object other than a file.

  SSEEEE AALLSSOO

    _o_p_e_n(2)

    _c_l_o_s_e(2)

    _d_u_p(2)

    _e_x_e_c_v_e(2)

    _f_o_r_k(2)

  UUSSAAGGEE NNOOTTEESS

    The fflloocckk function is thread safe.

    The fflloocckk function is not async-signal safe.

