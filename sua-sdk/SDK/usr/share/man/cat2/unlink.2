unlink(2)                                                     unlink(2)

  uunnlliinnkk(())

  NNAAMMEE

    unlink(), wcs_unlink() - remove directory entry

  SSYYNNOOPPSSIISS

    #include <unistd.h>

    int unlink (const char *path)
    int wcs_unlink (const wchar_t *path)

  DDEESSCCRRIIPPTTIIOONN

    The uunnlliinnkk(2) and wwccss__uunnlliinnkk(2) functions are identical, except that
    wwccss__uunnlliinnkk(2) accepts wide characters in the path argument.

    The uunnlliinnkk(2) or wwccss__uunnlliinnkk(2) function removes the link named by path
    from its directory and decrements the link count of the file which was
    referenced by the link. If that decrement reduces the link count of the
    file to zero, and no process has the file open, then all resources
    associated with the file are reclaimed. If one or more process have the
    file open when the last link is removed, the link is removed, but the
    removal of the file is delayed until all references to it have been
    closed.

    Calling uunnlliinnkk(2) or wwccss__uunnlliinnkk(2) with a directory is not supported.

  RREETTUURRNN VVAALLUUEESS

    Upon successful completion, a value of 0 is returned. Otherwise, a value
    of -1 is returned and errno is set to indicate the error.

  EERRRROORRSS

    The uunnlliinnkk(2) or wwccss__uunnlliinnkk(2) call succeeds unless:

    [EACCES]
        Search permission is denied for a component of the path prefix.

    [EACCES]
        Write permission is denied on the directory containing the link to be
        removed.

    [ENAMETOOLONG]

        A component of a pathname exceeded {NAME_MAX} characters, or an entire
        pathname exceeded {PATH_MAX} characters.

    [ENOENT]
        The named file does not exist.

    [EPERM]
        The named file is a directory.

    [EPERM]
        The directory containing the file is marked sticky, and neither the
        containing directory nor the file to be removed are owned by the
        effective user ID.

    [EIO]
        An I/O error occurred while deleting the directory entry or
        deallocating the file serial number.

    [EROFS]
        The named file resides on a read-only file system.

  SSEEEE AALLSSOO

    _c_l_o_s_e(2)

    _l_i_n_k(2)

    _r_e_m_o_v_e(2)

    _r_m_d_i_r(2)

  UUSSAAGGEE NNOOTTEESS

    All of these functions are thread safe.

    All of these functions are async-signal safe.

