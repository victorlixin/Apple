pthread_rwlock_timedwrlock(2)             pthread_rwlock_timedwrlock(2)

  pptthhrreeaadd__rrwwlloocckk__ttiimmeeddwwrrlloocckk(())

  NNAAMMEE

    pthread_rwlock_timedwrlock() - lock a read-write lock for writing with
    expiration time

  SSYYNNOOPPSSIISS

    #include <pthread.h>

    int pthread_rwlock_timedwrlock(pthread_rwlock_t *lock,
         const struct timespec *abstime);

  DDEESSCCRRIIPPTTIIOONN

    The pptthhrreeaadd__rrwwlloocckk__ttiimmeeddrrddlloocckk(2) function acquires a write lock on the
    read-write lock object referenced by the lock object. If the read-write
    lock object is already locked for reading or writing, the calling thread
    is blocked until the lock object becomes available, as with the
    _pp_tt_hh_rr_ee_aa_dd____rr_ww_ll_oo_cc_kk____ww_rr_ll_oo_cc_kk(2) function. If the lock object cannot be locked
    because another thread has a read or write lock on the lock object, the
    block ends when the system clock reaches the time referenced by the
    abstime argument, or if the time has already passed when the call is made.

    If a thread is blocked waiting to acquire a write lock and receives a
    signal, the thread resumes waiting after the signal handler returns, as
    though the signal had not been received.

  RREETTUURRNN VVAALLUUEESS

    On success, the function returns 0; otherwise, an error code is returned.

  EERRRROORRSS

    The pptthhrreeaadd__rrwwlloocckk__ttiimmeeddwwrrlloocckk() function can fail for the following
    reasons:

    [EDEADLK]
        The calling thread already has a lock on the specified read-write lock
        object.

    [EINVAL]
        The lock argument does not refer to a valid read-write lock object, or
        the abstime argument specifies a value in nanoseconds less than zero
        or greater than or equal to 1000 million.

    [ETIMEDOUT]
        A lock could not be obtained before the specified time was reached.

    This function does not return [EINTR].

  SSEEEE AALLSSOO

    _p_t_h_r_e_a_d___r_w_l_o_c_k___d_e_s_t_r_o_y(2)

    _p_t_h_r_e_a_d___r_w_l_o_c_k___r_d_l_o_c_k(2)

    _p_t_h_r_e_a_d___r_w_l_o_c_k___t_i_m_e_d_r_d_l_o_c_k(2)

    _p_t_h_r_e_a_d___r_w_l_o_c_k___t_r_y_r_d_l_o_c_k(2)

    _p_t_h_r_e_a_d___r_w_l_o_c_k___t_r_y_w_r_l_o_c_k(2)

    _p_t_h_r_e_a_d___r_w_l_o_c_k___u_n_l_o_c_k(2)

    _p_t_h_r_e_a_d___r_w_l_o_c_k___w_r_l_o_c_k(2)

    _t_i_m_e(2)

  UUSSAAGGEE NNOOTTEESS

    The pptthhrreeaadd__rrwwlloocckk__ttiimmeeddwwrrlloocckk function is thread safe.

    The pptthhrreeaadd__rrwwlloocckk__ttiimmeeddwwrrlloocckk function is not async-signal safe.

