objdump(1)                                                   objdump(1)

  oobbjjdduummpp

  NNAAMMEE

    objdump - display information from object files.

  SSYYNNOOPPSSIISS

    objdump [[-a||--archive-headers]]
            [[-b bfdname||--target=bfdname]]
            [[-C||--demangle[[=style]] ]]
            [[-d||--disassemble]]
            [[-D||--disassemble-all]]
            [[-z||--disassemble-zeroes]]
            [[-EB||-EL||--endian={{big || little }}]]
            [[-f||--file-headers]]
            [[--file-start-context]]
            [[-g||--debugging]]
            [[-h||--section-headers||--headers]]
            [[-i||--info]]
            [[-j section||--section=section]]
            [[-l||--line-numbers]]
            [[-S||--source]]
            [[-m machine||--architecture=machine]]
            [[-M options||--disassembler-options=options]]
            [[-p||--private-headers]]
            [[-r||--reloc]]
            [[-R||--dynamic-reloc]]
            [[-s||--full-contents]]
            [[-G||--stabs]]
            [[-t||--syms]]
            [[-T||--dynamic-syms]]
            [[-x||--all-headers]]
            [[-w||--wide]]
            [[--start-address=address]]
            [[--stop-address=address]]
            [[--prefix-addresses]]
            [[--[[no-]]show-raw-insn]]
            [[--adjust-vma=offset]]
            [[-V||--version]]
            [[-H||--help]]
            objfile...

  DDEESSCCRRIIPPTTIIOONN

    The oobbjjdduummpp(1) utility displays information about one or more object
    files. The options control what particular information to display. This
    information is mostly useful to programmers who are working on the
    compilation tools, as opposed to programmers who just want their program
    to compile and work.

    TThhee ffiilleess iiddeennttiiffiieedd bbyy oobbjjffiillee...... aarree tthhee oobbjjeecctt ffiilleess ttoo bbee eexxaammiinneedd..
    WWhheenn yyoouu ssppeecciiffyy aarrcchhiivveess,, oobbjjdduummpp((11)) sshhoowwss iinnffoorrmmaattiioonn oonn eeaacchh ooff tthhee
    mmeemmbbeerr oobbjjeecctt ffiilleess..

  OOPPTTIIOONNSS

    The long and short forms of options, shown here as alternatives, are
    equivalent. At least one option from the list --aa,--dd,--DD,--ff,--gg,--GG,--hh,--HH,--pp,--
    rr,--RR,--SS,--tt,--TT,--VV,--xx must be given.

    --aa
    ----aarrcchhiivvee--hheeaaddeerr
        If any of the objfile files are archives, display the archive header
        information (in a format similar to llss --ll). Besides the information
        you could list with aarr ttvv, oobbjjdduummpp --aa shows the object file format of
        each archive member.
    ----aaddjjuusstt--vvmmaa==offset
        When dumping information, first add offset to all the section
        addresses. This is useful if the section addresses do not correspond
        to the symbol table, which can happen when putting sections at
        particular addresses when using a format which can not represent
        section addresses, such as a.out.
    --bb bfdname
    ----ttaarrggeett==bfdname
        Specify that the object-code format for the object files is bfdname.
        This option may not be necessary; objdump can automatically recognize
        many formats.
        For example,
        objdump -b oasys -m vax -h fu.o
        displays summary information from the section headers (--hh) of ffuu..oo,
        which is explicitly identified (--mm) as a VAX object file in the format
        produced by Oasys compilers. You can list the formats available with
        the --ii option. @xref{Target Selection}, for more information.
    --CC
    ----ddeemmaannggllee[==style]
        Decode (demangle) low-level symbol names into user-level names.
        Besides removing any initial underscore prepended by the system, this
        makes C++ function names readable. Different compilers have different
        mangling styles. The optional demangling style argument can be used to
        choose an appropriate demangling style for your compiler. See
        _cc_++_++_ff_ii_ll_tt(1) for more information on demangling.

    --GG
    ----ddeebbuuggggiinngg
        Display debugging information. This attempts to parse debugging
        information stored in the file and print it out using a C like syntax.
        Only certain types of debugging information have been implemented.

    --dd
    ----ddiissaasssseemmbbllee
        Display the assembler mnemonics for the machine instructions from
        objfile. This option only disassembles those sections which are
        expected to contain instructions.

    --DD
    ----ddiissaasssseemmbbllee--aallll
        Like --dd, but disassemble the contents of all sections, not just those
        expected to contain instructions.

    ----pprreeffiixx--aaddddrreesssseess
        When disassembling, print the complete address on each line. This is
        the older disassembly format.
    --EEBB
    --EELL
    ----eennddiiaann=={bbiigg|lliittttllee
        Specify the endianness of the object files. This only affects
        disassembly. This can be useful when disassembling a file format which
        does not describe endianness information, such as S-records.

    --ff
    ----ffiillee--hheeaaddeerr
        Display summary information from the overall header of each of the
        objfile files.

    ----ffiillee--ssttaarrtt--ccoonntteexxtt
        Specify that when displaying interlisted source code/disassembly
        (assumes --SS) from a file that has not yet been displayed, extend the
        context to the start of the file.

    --hh
    ----sseeccttiioonn--hheeaaddeerr
    ----hheeaaddeerr
        Display summary information from the section headers of the object
        file.
        File segments may be relocated to nonstandard addresses, for example
        by using the --TTtteexxtt, --TTddaattaa, or --TTbbssss options to lldd(1). However, some
        object file formats, such as a.out, do not store the starting address
        of the file segments. In those situations, although lldd(1) relocates
        the sections correctly, using oobbjjdduummpp --hh to list the file section
        headers cannot show the correct addresses. Instead, it shows the usual
        addresses, which are implicit for the target.

    ----hheellpp
        Print a summary of the options to oobbjjdduummpp(1) and exit.

    --ii
    ----iinnffoo
        Display a list showing all architectures and object formats available
        for specification with --bb or --mm.
    --jj name
    ----sseeccttiioonn==name
        Display information only for section name.

    --ll
    ----lliinnee--nnuummbbeerrss
        Label the display (using debugging information) with the filename and
        source line numbers corresponding to the object code or relocs shown.
        Only useful with --dd, --DD, or --rr.
    --mm machine
    ----aarrcchhiitteeccttuurree==machine
        Specify the architecture to use when disassembling object files. This
        can be useful when disassembling object files which do not describe
        architecture information, such as S-records. You can list the
        available architectures with the --ii option.
    --MM options
    ----ddiissaasssseemmbblleerr--ooppttiioonnss==options
        Pass target specific information to the disassembler. Only supported
        on some targets.
        If the target is an ARM architecture then this switch can be used to
        select which register name set is used during disassembler. Specifying
        --MM rreegg--nnaammee--ssttdd (the default) will select the register names as used
        in ARM's instruction set documentation, but with register 13 called
        'sp', register 14 called 'lr' and register 15 called 'pc'. Specifying
        --MM rreegg--nnaammeess--aappccss will select the name set used by the ARM Procedure
        Call Standard, whilst specifying --MM rreegg--nnaammeess--rraaww will just use rr
        followed by the register number.
        There are also two variants on the APCS register naming scheme enabled
        by --MM rreegg--nnaammeess--aattppccss and --MM rreegg--nnaammeess--ssppeecciiaall--aattppccss which use the
        ARM/Thumb Procedure Call Standard naming conventions. (Either with the
        normal register name or the special register names).
        This option can also be used for ARM architectures to force the
        disassembler to interpret all instructions as Thumb instructions by
        using the switch ----ddiissaasssseemmbblleerr--ooppttiioonnss==ffoorrccee--tthhuummbb. This can be
        useful when attempting to disassemble thumb code produced by other
        compilers.
        For the x86, some of the options duplicate functions of the --mm switch,
        but allow finer grained control. Multiple selections from the
        following may be specified as a comma separated string. xx8866--6644, ii338866
        and ii88008866 select disassembly for the given architecture. iinntteell and aatttt
        select between intel syntax mode and AT&T syntax mode. aaddddrr3322, aaddddrr1166,
        ddaattaa3322 and ddaattaa1166 specify the default address size and operand size.
        These four options will be overridden if xx8866--6644, ii338866 or ii88008866 appear
        later in the option string. Lastly, ssuuffffiixx, when in AT&T mode,
        instructs the dissassembler to print a mnemonic suffix even when the
        suffix could be inferred by the operands.
        For PPC, bbooookkee, bbooookkee3322 and bbooookkee6644 select disassembly of BookE
        instructions. 3322 and 6644 select PowerPC and PowerPC64 disassembly,
        respectively.

    --pp
    ----pprriivvaattee--hheeaaddeerrss
        Print information that is specific to the object file format. The
        exact information printed depends upon the object file format. For
        some object file formats, no additional information is printed.

    --rr
    ----rreelloocc
        Print the relocation entries of the file. If used with --dd or --DD, the
        relocations are printed interspersed with the disassembly.

    --RR
    ----ddyynnaammiicc--rreelloocc
        Print the dynamic relocation entries of the file. This is only
        meaningful for dynamic objects, such as certain types of shared
        libraries.

    --ss
    ----ffuullll--ccoonntteennttss
        Display the full contents of any sections requested.

    --SS
    ----ssoouurrccee
        Display source code intermixed with disassembly, if possible. Implies
        --dd.

    ----sshhooww--rraaww--iinnssnn
        When disassembling instructions, print the instruction in hexadecimal
        as well as in symbolic form. This is the default except when ----pprreeffiixx--
        aaddddrreesssseess is used.

    ----nnoo--sshhooww--rraaww--iinnssnn
        When disassembling instructions, do not print the instruction bytes.
        This is the default when ----pprreeffiixx--aaddddrreesssseess is used.

    --GG
    ----ssttaabbss
        Display the full contents of any sections requested. Display the
        contents of the .stab and .stab.index and .stab.excl sections from an
        ELF file. This is only useful on systems (such as Solaris 2.0) in
        which ..ssttaabb debugging symbol-table entries are carried in an ELF
        section. In most other file formats, debugging symbol-table entries
        are interleaved with linkage symbols, and are visible in the ----ssyymmss
        output.
    ----ssttaarrtt--aaddddrreessss==address
        Start displaying data at the specified address. This affects the
        output of the --dd, --rr and --ss options.
    ----ssttoopp--aaddddrreessss==address
        Stop displaying data at the specified address. This affects the output
        of the --dd, --rr and --ss options.

    --tt
    ----ssyymmss
        Print the symbol table entries of the file. This is similar to the
        information provided by the nnmm program.

    --TT
    ----ddyynnaammiicc--ssyymmss
        Print the dynamic symbol table entries of the file. This is only
        meaningful for dynamic objects, such as certain types of shared
        libraries. This is similar to the information provided by the nnmm
        program when given the --DD (----ddyynnaammiicc) option.

    ----vveerrssiioonn
        Print the version number of oobbjjdduummpp(1) and exit.

    --xx
    ----aallll--hheeaaddeerr
        Display all available header information, including the symbol table
        and relocation entries. Using --xx is equivalent to specifying all of --
        aa --ff --hh --rr --tt.

    --ww
    ----wwiiddee
        Format some lines for output devices that have more than 80 columns.
        Also do not truncate symbol names when they are displayed.

    --zz
    ----ddiissaasssseemmbbllee--zzeerrooeess
        Normally the disassembly output will skip blocks of zeroes. This
        option directs the disassembler to disassemble those blocks, just like
        any other data.

  SSEEEE AALLSSOO

    _n_m(1)

  CCOOPPYYRRIIGGHHTT

    Copyright (c) 1991-2002 Free Software Foundation, Inc.

    Permission is granted to copy, distribute and/or modify this document
    under the terms of the GNU Free Documentation License, Version 1.1 or any
    later version published by the Free Software Foundation; with no Invariant
    Sections, with no Front-Cover Texts, and with no Back-Cover Texts. A copy
    of the license is included in the section entitled "GNU Free Documentation
    License".

