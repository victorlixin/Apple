c89(1)                                                           c89(1)

  cc8899

  NNAAMMEE

    c89, cc - compiler interface

  SSYYNNOOPPSSIISS

    c89 [[-cEgMPSsu]] [[-B linkspec]] [[-D name[[=value]]]] ...
        [[-I directory]] ...  [[-L directory]] ...
        [[-N nostdlib||nostdinc||nostdc||stdc]]
        [[-o outfile]] [[-O1||-O2]] [[-U name]] [[-X CL_options]]
        [[-Y LINK_options]]  ... operand ...

    cc [[-cEgMPSsu]] [[-B linkspec]] [[-D name[[=value]]]] ...
       [[-I directory]] ...  [[-L directory]] ... [[-M]]
       [[-N nostdlib||nostdinc||nostdc||stdc]]
       [[-o outfile]] [[-O1||-O2]] [[-U name]] [[-X CL_options]]
       [[-Y LINK_options]]  ... operand ...

  DDEESSCCRRIIPPTTIIOONN

    The cc8899(1) utility is an interface to the system C compiler (in this case,
    the Microsoft Visual C/C++ compiler).The operands are either the names of
    files to be compiled or linked (in which case they will have the file
    extensions ..cc or ..oobbjj), or they indicate libraries containing modules to
    be linked (in which case they will begin with the prefix --ll).

    The cc8899(1) utility can also be invoked as cccc(1). If invoked as cccc(1), it
    behaves differently in the following ways:

    *     --LL and --oo become operands, not options: they can be in any position
          in the command line. When invoked as cc8899(1), the --LL and --oo arguments
          are options and must come before any operands. In cc8899(1), the
          libraries are operands, not options (even though they begin with --
          ll), and must be placed at the end of the command line.
    *     The option --DD uunniixx is passed, so the macro uunniixx is defined.
    *     Compiler extensions to the ANSI C standard (such as additional
          keywords) are allowed. (cc8899(1) does not allow extensions.)

  OOPPTTIIOONNSS

    The cc8899(1) and cccc(1) utilities accept the following options:

    --bb 
	Generate a .pdb file

    --BB linkspec
        Use the GNU linker, lldd(1), instead of the Visual C linker. If the
        argument linkspec is ddyynnaammiicc, the binary will be dynamically linked using ld.exe.
        If it is ssttaattiicc, the binary will be statically
        linked (using link.exe itself). If the argument is
        ddllll, the compiler will link to libc.dll (again with link.exe), to expose
        functionality as a Subsystem for UNIX-based Applications (SUA) DLL. Please see the
	--GG option for more details on creating SUA DLLs.

    --cc
        Compile but do not link, and do not remove any object files.
    --DD name[[==value]]
        Define name as if the ##ddeeffiinnee keyword had been used. If a value is
        given, it is assigned to name; otherwise, name has a value of 1. You
        can specify more than one --DD option.

    --EE
        Expand all C preprocessor directives and copy the C source files to
        standard output.

    --gg
        Produce symbolic information in the object or executable files.

    --GG
        Create an SUA .dll file that exposes POSIX functionality to
        other Windows process. Use in conjunction with the --BB ddllll flag.
    --II directory
        Search directory for header files before looking in the usual places.
        You can specify more than one --II option.
    --LL directory
        Search directory for library files before looking in the usual places.
        You can specify more than one --LL option. The paths specified using
        this option are combined to set the LIB environment variable before
        Link.exe is executed.

    --mm xx8866 | aammdd6644
	Used to enable cross-compilation of 32-bit applications on
	64-bit platforms (and vice versa). Note that on a 32-bit
	platform, xx8866 is the default, and on a 64-bit platform,
	aammdd6644 is the default. The two options are mutually
	exclusive.  When using this flag, either the C89_COMPILER or 
	C89_LINKER environment variable should be set to point to the 
	correct compiler binary.

        For example, to compile an x86 binary on an AMD64 machine:

          c89 -m x86 hello.c          

    --MM
        Produce a linker map file. This option has no effect if you also
        specified --cc, --EE, or --PP.
    --NN type
        Enable or disable automatic inclusion of certain files, depending upon
        the value of type:

        nnoossttddcc
            Disable ANSI-only mode in the Visual C++ compiler and allows use
            of Microsoft extensions. By default, the compiler is run in ANSI C
            mode. Note that you must use the --NN nnoossttddcc
            flag when linking with ODBC headers (e.g. sqltypes.h), because the 
            headers shipped with Microsoft Visual C++ are not ANSI-based
            files.

        nnoossttddiinncc
            Disable automatic inclusion of standard header files.

        nnoossttddlliibb
            Disable automatic inclusion of standard library files.

        nnoossttddlliibbddiirr
            Do not search the standard directories for library files.

        ssttddcc
            Enable ANSI-only mode in the Visual C++ compiler. This is the
            default.
    --oo outfile
        Use the path name outfile instead of the default name aa..oouutt. This
        option cannot be used with --cc.
    --OO11 | --OO22
        Optimize the code that is generated for the output file. Two levels (--
        OO11 and --OO22) are supported.

    --pp pdb_filename
		Specifies a name for a .pdb file when used with the -^H-b^Hb
		flag. Use this when you do not want to use the default name
		for the .pdb file that is generated.

    --PP
        Preprocess the C source file and write the results to a file with a ..ii
        extension in place of ..cc.

    --RR
	Create a mixed-mode binary.

    --SS
        Create an assembler listing; the format and file extension depend upon
        the underlying compiler.

    --ss
       This option typically strips symbolic names and other extraneous information
	   from the object file or executable; however, because in Windows-based operating 
	   systems, symbolic information is kept in .PDB files instead of obj or executable 
	   files, this option is redundant and has no effect.
		
    --UU name
        Undefine name as if the ##uunnddeeff keyword had been used. This takes
        precedence over any --DD options given on the command line.

    --uu
        Undefine all of the pre-defined macros.
		
    --XX CL_options
        Passes the specified CL_options directly to the CCll..eexxee program.
   
    --YY LINK_options
        Passes the specified LINK_options directly to the
        LLiinnkk..eexxee program. This option cannot be used
        when compiling SUA .dll files.

    The only optimization options allowed are --OO11 and --OO22, both of which
    invoke the //OO22 option of the Microsoft Visual C compiler.

    Libraries can also be specified by using the correct operand; for example,
    --ll mm specifies the math library. (For compatibility with older systems,
    the space between the --ll and the library specifier is not required.) The
    order of operands is important; libraries are searched in the order they
    appear on the command line.

    The cc8899(1) utility understands the following --ll library operands:

    --ll cc
        Include the standard C library. When the linker is invoked, this
        library is opened last.

    --ll ll
        Include the lleexx(1) library.

    --ll mm
        Include the math library.

    --ll yy
        Include the yyaacccc(1) library.

    The cc8899(1) utility knows the default locations of the header files and the
    libraries, normally /usr/include and /usr/lib. It also knows about the
    default libraries, and includes them in the correct order.

    This implementation defines the following macros to be 1: __PPOOSSIIXX__ and
    ____IINNTTEERRIIXX. When invoked as cccc(1), it also defines uunniixx.

  FFIILLEESS

    The cc8899(1) utility makes use of the following files:

    lliibbcc..aa
        Subsystem for UNIX-based Applications implementations of C run-time functions.
		This is placed before lliibbccppssxx..aa so the
		Subsystem for UNIX-based Applications implementations of functions are
		picked up.

    ppssxxddllll..aa
        Subsystem for UNIX-based Applications POSIX subsystem entry points. This normally comes last in the
        command line.

  EENNVVIIRROONNMMEENNTT VVAARRIIAABBLLEESS

    The cc8899(1) utility makes use of the following environment variables, if
    set:

    C89_COMPILER
        The compiler's complete path name. Case is significant (for example, 
        /dev/fs/C/MSVC40/BIN/CL.EXE). Useful if you do not want to include 
        /dev/fs/C/MSVC40/BIN in your PATH.

    C89_ECHO
        If this variable is set to 1, cc8899(1) displays the command lines it
        executes to run the compiler and linker.

    C89_LINKER
        The linker's complete path name. Case is significant (for example, /
        dev/fs/C/MSVC40/BIN/LINK.EXE). Useful if you do not want to include /
        dev/fs/C/MSVC40/BIN in your PATH.

    Note that in the the Microsoft Visual Studio 2005 compilation environment, Cl.exe
    requires other binaries from Visual Studio's installation directory. That 
    installation directory must therefore be in the PATH variable, in Unix-style
    notation. One easy way to retrieve this path is with the winpath2unix command:

      $ winpath2unix "c:\Program Files\Microsoft Visual Studio 2005" 
      /dev/fs/drive_letter/Program Files/Microsoft Visual Studio 8/VC/bin

    You can then copy the above and add it to your PATH variable, in quotes:

      $export PATH=$PATH:"/dev/fs/drive_letter/Program Files/Microsoft Visual Studio 8/VC/bin"

  DDIIAAGGNNOOSSTTIICCSS

    The cc8899(1) utility can return one of the following exit values:

    0
        Success.

    >0
        An error occurred.

  NNOOTTEESS

    These interfaces work with the Microsoft Visual C/C++ compiler, not with
    ggcccc(1). The only compiler environments supported are those of
    Microsoft Visual Studio 8.x and above.

    This implementation of cc8899(1) is an interface to the Microsoft Visual C++
    8.x compiler (Cl.exe) and linker (Link.exe). For this reason, it relies on
    the Windows-based compiler and linker for certain file operations,
    including locating files referenced in build scripts. Like other Windows-
    based applications, Cl.exe and Link.exe are not case sensitive, that is,
    they do not distinguish among file names based on case alone.
    Consequently, Subsystem for UNIX-based Applications build scripts will fail 
	if they reference files whose names differ only by case. For example, if a 
	Subsystem for UNIX-based Applications build script references myheader.h 
	and MyHeader.h, the compiler treats both references as if they were to the 
	same file, even though both files exist in the same directory. The only 
	workaround for this is to rename files whose names differ only by case.

    Because those programs do not understand the POSIX file name format,
    cc8899(1) explicitly unsets the INCLUDE and LIB environment variables before
    running. To search other directories for header files and libraries, use
    the --II and --LL options, respectively.

    When Link.exe runs, it searches the following locations for library files,
    in this order:

    *     The current working directory.
    *     Paths specified using the LLiinnkk //LLIIBBPPAATTHH options. For more
          information on passing options to the Windows linker, see the
          description of the --YY option earlier in this topic.
    *     The LIB environment variable. Before Link.exe is executed, the LIB
          environment variable is unset and then set using paths specified
          using the --LL option.

    The following file extensions are valid in operands:

    ..aa
        Library file.

    ..cc
        C source file.

    ..lliibb
        Library file.

    ..oo
        Object file.

    ..oobbjj
        Object file.

    ..ccpppp
	C++ source file

    ..cC
        C++ source file (note the capitalization).

    For documentation on C++ libraries (eg libstdc++), refer to the MSDN C++ documentation:

        http://msdn2.microsoft.com/en-US/library/52cs05fz   
    
  SSEEEE AALLSSOO

    ggcccc(1)


