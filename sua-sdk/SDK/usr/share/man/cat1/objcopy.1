objcopy(1)                                                   objcopy(1)

  oobbjjccooppyy

  NNAAMMEE

    objcopy - copy and translate object files

  SSYYNNOOPPSSIISS

    objcopy [[-F bfdname||--target=bfdname]]
            [[-I bfdname||--input-target=bfdname]]
            [[-O bfdname||--output-target=bfdname]]
            [[-B bfdarch||--binary-architecture=bfdarch]]
            [[-S||--strip-all]] [[-g||--strip-debug]]
            [[-K symbolname||--keep-symbol=symbolname]]
            [[-N symbolname||--strip-symbol=symbolname]]
            [[-G symbolname||--keep-global-symbol=symbolname]]
            [[-L symbolname||--localize-symbol=symbolname]]
            [[-W symbolname||--weaken-symbol=symbolname]]
            [[-x||--discard-all]] [[-X||--discard-locals]]
            [[-b byte||--byte=byte]]
            [[-i interleave||--interleave=interleave]]
            [[-j sectionname||--only-section=sectionname]]
            [[-R sectionname||--remove-section=sectionname]]
            [[-p||--preserve-dates]]
            [[--debugging]]
            [[--gap-fill=val]] [[--pad-to=address]]
            [[--set-start=val]] [[--adjust-start=incr]]
            [[--change-addresses=incr]]
            [[--change-section-address section{{=,,+,,-}}val]]
            [[--change-section-lma section{{=,,+,,-}}val]]
            [[--change-section-vma section{{=,,+,,-}}val]]
            [[--change-warnings]] [[--no-change-warnings]]
            [[--set-section-flags section=flags]]
            [[--add-section sectionname=filename]]
            [[--rename-section oldname=newname[[,flags]]]]
            [[--change-leading-char ]] [[--remove-leading-char]]
            [[--srec-len=ival ]] [[--srec-forceS3]]
            [[--redefine-sym old=new ]]
            [[--weaken]]
            [[--keep-symbols=filename]]
            [[--strip-symbols=filename]]
            [[--keep-global-symbols=filename]]
            [[--localize-symbols=filename]]
            [[--weaken-symbols=filename]]
            [[--alt-machine-code=index]]
            [[-v||--verbose]]
            [[-V||--version]]
            [[--help]]
            infile [[outfile]]

  DDEESSCCRRIIPPTTIIOONN

    The GNU oobbjjccooppyy(1) utility copies the contents of an object file to
    another. oobbjjccooppyy(1) uses the GNU BFD Library to read and write the object
    files. It can write the destination object file in a format different from
    that of the source object file. The exact behavior of oobbjjccooppyy(1) is
    controlled by command-line options. Note that oobbjjccooppyy(1) should be able to
    copy a fully linked file between any two formats. However, copying a
    relocatable object file between any two formats may not work as expected.

    The oobbjjccooppyy(1) utility creates temporary files to do its translations and
    deletes them afterward. oobbjjccooppyy(1) uses BFD to do all its translation
    work; it has access to all the formats described in BFD and thus is able
    to recognize most formats without being told explicitly.

    The oobbjjccooppyy(1) utility can be used to generate S-records by using an
    output target of ssrreecc (e.g., use --OO ssrreecc).

    The oobbjjccooppyy(1) utility can be used to generate a raw binary file by using
    an output target of bbiinnaarryy (e.g., use --OO bbiinnaarryy). When oobbjjccooppyy(1)
    generates a raw binary file, it will essentially produce a memory dump of
    the contents of the input object file. All symbols and relocation
    information will be discarded. The memory dump will start at the load
    address of the lowest section copied into the output file.

    When generating an S-record or a raw binary file, it may be helpful to use
    --SS to remove sections containing debugging information. In some cases --
    RR will be useful to remove sections which contain information that is not
    needed by the binary file.

    NNoottee:: oobbjjccooppyy(1) is not able to change the endianness of its input files.
    If the input format has an endianness, (some formats do not), oobbjjccooppyy(1)
    can only copy the inputs into file formats that have the same endianness
    or which have no endianness (eg ssrreecc).

  OOPPTTIIOONNSS
    infile
    outfile
        The input and output files, respectively. If you do not specify
        outfile, oobbjjccooppyy(1) creates a temporary file and destructively renames
        the result with the name of infile.
    --IIbfdname
    ----iinnppuutt--ttaarrggeett==bfdname
        Consider the source file's object format to be bfdname, rather than
        attempting to deduce it.
    --OO bfdname
    ----oouuttppuutt--ttaarrggeett==bfdname
        Write the output file using the object format bfdname.
    --FF bfdname
    ----ttaarrggeett==bfdname
        Use bfdname as the object format for both the input and the output
        file; i.e., simply transfer data from source to destination with no
        translation.
    --BB bfdarch
    ----bbiinnaarryy--aarrcchhiitteeccttuurree==bfdarch
        Useful when transforming a raw binary input file into an object file.
        In this case the output architecture can be set to bfdarch. This
        option will be ignored if the input file has a known bfdarch. You can
        access this binary data inside a program by referencing the special
        symbols that are created by the conversion process. These symbols are
        called _binary_objfile_start, _binary_objfile_end and
        _binary_objfile_size. e.g. you can transform a picture file into an
        object file and then access it in your code using these symbols.
    --jj sectionname
    ----oonnllyy--sseeccttiioonn==sectionname
        Copy only the named section from the input file to the output file.
        This option may be given more than once. Note that using this option
        inappropriately may make the output file unusable.
    --RR sectionname
    ----rreemmoovvee--sseeccttiioonn==sectionname
        Remove any section named sectionname from the output file. This option
        may be given more than once. Note that using this option
        inappropriately may make the output file unusable.

    --SS
    ----ssttrriipp--aallll
        Do not copy relocation and symbol information from the source file.

    --gg
    ----ssttrriipp--ddeebbuugg
        Do not copy debugging symbols from the source file.

    ----ssttrriipp--uunnnneeeeddeedd
        Strip all symbols that are not needed for relocation processing.
    --KK symbolname
    ----kkeeeepp--ssyymmbbooll==symbolname
        Copy only symbol symbolname from the source file. This option may be
        given more than once.
    --NN symbolname
    ----ssttrriipp--ssyymmbbooll==symbolname
        Do not copy symbol symbolname from the source file. This option may be
        given more than once.
    --GG symbolname
    ----kkeeeepp--gglloobbaall--ssyymmbbooll==symbolname
        Keep only symbol symbolname global. Make all other symbols local to
        the file, so that they are not visible externally. This option may be
        given more than once.
    --LL symbolname
    ----llooccaalliizzee--ssyymmbbooll==symbolname
        Make symbol symbolname local to the file, so that it is not visible
        externally. This option may be given more than once.
    --WW symbolname
    ----wweeaakkeenn--ssyymmbbooll==symbolname
        Make symbol symbolname weak. This option may be given more than once.

    --xx
    ----ddiissccaarrdd--aallll
        Do not copy non-global symbols from the source file.

    --XX
    ----ddiissccaarrdd--llooccaallss
        Do not copy compiler-generated local symbols. (These usually start
        with LL or ...)
    --bb byte
    ----bbyyttee==byte
        Keep only every byteth byte of the input file (header data is not
        affected). byte can be in the range from 0 to interleave-1, where
        interleave is given by the --ii or ----iinntteerrlleeaavvee option, or the default
        of 4. This option is useful for creating files to program ROM. It is
        typically used with an ssrreecc output target.
    --ii interleave
    ----iinntteerrlleeaavvee==interleave
        Only copy one out of every interleave bytes. Select which byte to copy
        with the --bb or ----bbyyttee option. The default is 4. oobbjjccooppyy(1) ignores
        this option if you do not specify either --bb or ----bbyyttee.

    --pp
    ----pprreesseerrvvee--ddaatteess
        Set the access and modification dates of the output file to be the
        same as those of the input file.

    ----ddeebbuuggggiinngg
        Convert debugging information, if possible. This is not the default
        because only certain debugging formats are supported, and the
        conversion process can be time consuming.
    ----ggaapp--ffiillll val
        Fill gaps between sections with val. This operation applies to the
        load address (LMA) of the sections. It is done by increasing the size
        of the section with the lower address, and filling in the extra space
        created with val.
    ----ppaadd--ttoo address
        Pad the output file up to the load address address. This is done by
        increasing the size of the last section. The extra space is filled in
        with the value specified by ----ggaapp--ffiillll (default zero).
    ----sseett--ssttaarrtt val
        Set the start address of the new file to val. Not all object file
        formats support setting the start address.
    ----cchhaannggee--ssttaarrtt incr
    ----aaddjjuusstt--ssttaarrtt incr
        Change the start address by adding incr. Not all object file formats
        support setting the start address.
    ----cchhaannggee--aaddddrreesssseess incr
    ----aaddjjuusstt--vvmmaa incr
        Change the VMA and LMA addresses of all sections, as well as the start
        address, by adding incr. Some object file formats do not permit
        section addresses to be changed arbitrarily. Note that this does not
        relocate the sections; if the program expects sections to be loaded at
        a certain address, and this option is used to change the sections such
        that they are loaded at a different address, the program may fail.
    ----cchhaannggee--sseeccttiioonn--aaddddrreessss section{==,++,--}val
    ----aaddjjuusstt--sseeccttiioonn--vvmmaa section{==,++,--}val
        Set or change both the VMA address and the LMA address of the named
        section. If == is used, the section address is set to val. Otherwise,
        val is added to or subtracted from the section address. See the
        comments under ----cchhaannggee--aaddddrreesssseess, above. If section does not exist in
        the input file, a warning will be issued, unless ----nnoo--cchhaannggee--wwaarrnniinnggss
        is used.
    ----cchhaannggee--sseeccttiioonn--llmmaa section{==,++,--}val
        Set or change the LMA address of the named section. The LMA address is
        the address where the section will be loaded into memory at program
        load time. Normally this is the same as the VMA address, which is the
        address of the section at program run time, but on some systems,
        especially those where a program is held in ROM, the two can be
        different. If == is used, the section address is set to val. Otherwise,
        val is added to or subtracted from the section address. See the
        comments under ----cchhaannggee--aaddddrreesssseess, above. If section does not exist in
        the input file, a warning will be issued, unless ----nnoo--cchhaannggee--wwaarrnniinnggss
        is used.
    ----cchhaannggee--sseeccttiioonn--vvmmaa section{==,++,--}val
        Set or change the VMA address of the named section. The VMA address is
        the address where the section will be located once the program has
        started executing. Normally this is the same as the LMA address, which
        is the address where the section will be loaded into memory, but on
        some systems, especially those where a program is held in ROM, the two
        can be different. If == is used, the section address is set to val.
        Otherwise, val is added to or subtracted from the section address. See
        the comments under ----cchhaannggee--aaddddrreesssseess, above. If section does not
        exist in the input file, a warning will be issued, unless ----nnoo--cchhaannggee--
        wwaarrnniinnggss is used.

    ----cchhaannggee--wwaarrnniinnggss
    ----aaddjjuusstt--wwaarrnniinnggss
        If ----cchhaannggee--sseeccttiioonn--aaddddrreessss or ----cchhaannggee--sseeccttiioonn--llmmaa or ----cchhaannggee--
        sseeccttiioonn--vvmmaa is used, and the named section does not exist, issue a
        warning. This is the default.

    ----nnoo--cchhaannggee--wwaarrnniinnggss
    ----nnoo--aaddjjuusstt--wwaarrnniinnggss
        Do not issue a warning if ----cchhaannggee--sseeccttiioonn--aaddddrreessss or ----aaddjjuusstt--
        sseeccttiioonn--llmmaa or ----aaddjjuusstt--sseeccttiioonn--vvmmaa is used, even if the named section
        does not exist.
    ----sseett--sseeccttiioonn--ffllaaggss section==flags
        Set the flags for the named section. The flags argument is a comma
        separated string of flag names. The recognized names are aalllloocc,
        ccoonntteennttss, llooaadd, nnoollooaadd, rreeaaddoonnllyy, ccooddee, ddaattaa, rroomm, sshhaarree, and ddeebbuugg.
        You can set the ccoonntteennttss flag for a section which does not have
        contents, but it is not meaningful to clear the ccoonntteennttss flag of a
        section which does have contents--just remove the section instead. Not
        all flags are meaningful for all object file formats.
    ----aadddd--sseeccttiioonn sectionname==filename
        Add a new section named sectionname while copying the file. The
        contents of the new section are taken from the file filename. The size
        of the section will be the size of the file. This option only works on
        file formats which can support sections with arbitrary names.
    ----rreennaammee--sseeccttiioonn oldname==newname[,flags]
        Rename a section from oldname to newname, optionally changing the
        section's flags to flags in the process. This has the advantage over
        usng a linker script to perform the rename in that the output stays as
        an object file and does not become a linked executable.
        This option is particularly helpful when the input format is binary,
        since this will always create a section called .data. If for example,
        you wanted instead to create a section called .rodata containing
        binary data you could use the following command line to achieve it:
          objcopy -I binary -O <output_format> -B <architecture> \
           --rename-section .data=.rodata,alloc,load,readonly,data,contents \
           <input_binary_file> <output_object_file>

    ----cchhaannggee--lleeaaddiinngg--cchhaarr
        Some object file formats use special characters at the start of
        symbols. The most common such character is underscore, which compilers
        often add before every symbol. This option tells oobbjjccooppyy(1) to change
        the leading character of every symbol when it converts between object
        file formats. If the object file formats use the same leading
        character, this option has no effect. Otherwise, it will add a
        character, or remove a character, or change a character, as
        appropriate.

    ----rreemmoovvee--lleeaaddiinngg--cchhaarr
        If the first character of a global symbol is a special symbol leading
        character used by the object file format, remove the character. The
        most common symbol leading character is underscore. This option will
        remove a leading underscore from all global symbols. This can be
        useful if you want to link together objects of different file formats
        with different conventions for symbol names. This is different from ----
        cchhaannggee--lleeaaddiinngg--cchhaarr because it always changes the symbol name when
        appropriate, regardless of the object file format of the output file.
    ----ssrreecc--lleenn==ival
        Meaningful only for srec output. Set the maximum length of the
        Srecords being produced to ival. This length covers both address, data
        and crc fields.

    ----ssrreecc--ffoorrcceeSS33
        Meaningful only for srec output. Avoid generation of S1/S2 records,
        creating S3-only record format.
    ----rreeddeeffiinnee--ssyymm old=new
        Change the name of a symbol old, to new. This can be useful when one
        is trying link two things together for which you have no source, and
        there are name collisions.

    ----wweeaakkeenn
        Change all global symbols in the file to be weak. This can be useful
        when building an object which will be linked against other objects
        using the --RR option to the linker. This option is only effective when
        using an object file format which supports weak symbols.
    ----kkeeeepp--ssyymmbboollss==filename
        Apply ----kkeeeepp--ssyymmbbooll option to each symbol listed in the file filename.
        filename is simply a flat file, with one symbol name per line. Line
        comments may be introduced by the hash character. This option may be
        given more than once.
    ----ssttrriipp--ssyymmbboollss==filename
        Apply ----ssttrriipp--ssyymmbbooll option to each symbol listed in the file
        filename. filename is simply a flat file, with one symbol name per
        line. Line comments may be introduced by the hash character. This
        option may be given more than once.
    ----kkeeeepp--gglloobbaall--ssyymmbboollss==filename
        Apply ----kkeeeepp--gglloobbaall--ssyymmbbooll option to each symbol listed in the file
        filename. filename is simply a flat file, with one symbol name per
        line. Line comments may be introduced by the hash character. This
        option may be given more than once.
    ----llooccaalliizzee--ssyymmbboollss==filename
        Apply ----llooccaalliizzee--ssyymmbbooll option to each symbol listed in the file
        filename. filename is simply a flat file, with one symbol name per
        line. Line comments may be introduced by the hash character. This
        option may be given more than once.
    ----wweeaakkeenn--ssyymmbboollss==filename
        Apply ----wweeaakkeenn--ssyymmbbooll option to each symbol listed in the file
        filename. filename is simply a flat file, with one symbol name per
        line. Line comments may be introduced by the hash character. This
        option may be given more than once.
    ----aalltt--mmaacchhiinnee--ccooddee==index
        If the output architecture has alternate machine codes, use the
        indexth code instead of the default one. This is useful in case a
        machine is assigned an official code and the tool-chain adopts the new
        code, but other applications still depend on the original code being
        used.

    --VV
    ----vveerrssiioonn
        Show the version number of oobbjjccooppyy(1).

    --vv
    ----vveerrbboossee
        Verbose output: list all object files modified. In the case of
        archives, oobbjjccooppyy --VV lists all members of the archive.

    ----hheellpp
        Show a summary of the options to oobbjjccooppyy(1).

  SSEEEE AALLSSOO

    _l_d(1)

    _o_b_j_d_u_m_p(1)

  CCOOPPYYRRIIGGHHTT

    Copyright (c) 1991-2002 Free Software Foundation, Inc.

    Permission is granted to copy, distribute and/or modify this document
    under the terms of the GNU Free Documentation License, Version 1.1 or any
    later version published by the Free Software Foundation; with no Invariant
    Sections, with no Front-Cover Texts, and with no Back-Cover Texts. A copy
    of the license is included in the section entitled "GNU Free Documentation
    License".

