yacc(1)                                                         yacc(1)

  yyaacccc

  NNAAMMEE

    yacc - an LALR(1) parser generator

  SSYYNNOOPPSSIISS

    yacc [[-dlrtv]] [[-b file_prefix]] [[-p symbol_prefix]]filename

  DDEESSCCRRIIPPTTIIOONN

    The yyaacccc(1) command reads the grammar specification in the file
	filename and generates an LR(1) parser for it. The parsers consist of a
	set of LALR(1) parsing tables and a driver routine written in the C programming
	language. The yyaacccc(1) command normally writes the parse tables
	and the driver routine to the file yy..ttaabb..cc.

    The following options are available:
    --bb file_prefix

        Use file_prefix as the prefix prepended to the output file names
        instead of the character y.

    --dd
        Write the header file option causes the header file yy..ttaabb..hh.

    --ll
        Do not insert ##lliinnee directives in the generated code. The ##lliinnee
        directives let the C compiler relate errors in the generated code to
        the user's original code. Any ##lliinnee directives specified by the user
        will be retained. By default, the directives are inserted.
    --pp symbol_prefix

        use symbol_prefix as the prefix prepended to yyaacccc(1)-generated
        symbols. The default prefix is the string yy.

    --rr
        Produce separate files for code and tables. The code file is named
        yy..ccooddee..cc, and the tables file is named yy..ttaabb..cc.

    --tt
        Change the preprocessor directives generated by yyaacccc(1) so that
        debugging statements will be incorporated in the compiled code.

    --vv
        Write a human-readable description of the generated parser to the file
        yy..oouuttppuutt.

  FFOORRMMAATT OOFF TTHHEE IINNPPUUTT FFIILLEE

    The yyaacccc(1) input file consists of three sections, separated by a line
    with just %%%% in it:

    definitions %% rules %% user code

    The definitions section contains declarations; it can also contain C
    comments (delimited by //** and **//), or a literal block of C code, copied to
    the beginning of the generated file. This literal block usually contains
    declaration and #include lines. The following keywords can be used in the
    definitions section:
    %%{{...%%}}
        Delimits a literal block of C code. The literal block usually contains
        declarations of variables and functions used by the code in the rules
        section.
    %%lleefftt operator

        Declares an operator left-associative. Operators must be declared in
        increasing order of precedence.
    %%nnoonnaassssoocc operator

        Declares an operator non-associative. Operators must be declared in
        increasing order of precedence.
    %%rriigghhtt operator

        Declares an operator right-associative. Operators must be declared in
        increasing order of precedence.
    %%ssttaarrtt rulename

        Declares the first rule the parser should start parsing. Normally,
        this is the first rule in the rules section, but this declaration
        explicitly labels a different rule.
    %%ttookkeenn name ...

        Defines a symbolic token, a terminal symbol (one that the parser will
        not attempt to reduce). They are represented internally by integer
        values; you can assign a value directly to a token with the %%ttookkeenn
        directive, but this is not recommended. Other tokens are individual
        characters in single quotes or are defined by %%lleefftt, %%rriigghhtt, and
        %%nnoonnaassssoocc.
    %%ttyyppee type name,name,...

        Declares a non-terminal token as a particular type. The type must
        already have been defined by a %%uunniioonn.

    %%uunniioonn

        Identify all possible C types a symbol value can have; this union is
        declared as type YYSTYPE in the generated source file. The format is:
        %union {
             ...field declarations
        }

    The rules section is the heart of the grammar. Each rule starts with a
    non-terminal symbol and a colon, followed by a list of symbols, literal
    tokens, and actions. The list can be empty. For example, this rule states
    that a time is an hour, a minute, and a second value, joined by colons:

    time: hour ':' minute ':' second ;

    (This assumes we've already defined hour, minute, and second.) The
    semicolon at the end is traditional, but optional. If consecutive rules
    have the same left-hand side, rules after the first can start with a
    vertical bar, rather than the name and a colon. This is somewhat easier to
    read but the semicolon must be omitted before the vertical bar.

    An action in a rule is a C compound statement to be executed whenever the
    parser reaches that point in the grammar. In the action, the name $$$$
    stands for the symbol on the left-hand side, and a dollar sign followed by
    a digit n stands for the n symbol on the right-hand side. In the example
    above:

    time: hour ':' minute ':' second
         {printf("time is %d:%d:%d\n",$1, $3, $5); }
         ;

    If no action is defined, the action is:

    { $$ = $1; }

    The user subroutines section contains routines called from the actions. It
    is copied directly into the C file.

  EENNVVIIRROONNMMEENNTT VVAARRIIAABBLLEESS

    The yyaacccc(1) command makes use of the following environment variables, if set:

    TMPDIR
        If set, the contents of this variable will be used as the name of the
        directory where the temporary files are created.

  FFIILLEESS

    The yyaacccc(1) utility makes use of the following files:

    yy..ccooddee..cc
        Code file created by yyaacccc(1) when the --rr option is given.

    yy..ttaabb..cc
        Table file created by yyaacccc(1).

    yy..ttaabb..hh
        Table header file created by yyaacccc(1).

    yy..oouuttppuutt
        A human-readable version of the output, created with the --vv option.
    //ttmmpp//yyaacccc..aaXXXXXX
    //ttmmpp//yyaacccc..ttXXXXXX
    //ttmmpp//yyaacccc..uuXXXXXX
        Temporary files.

  DDIIAAGGNNOOSSTTIICCSS

    If there are rules that are never reduced, the number of such rules is
    reported on standard error. If there are any LALR(1) conflicts, the number
    of conflicts is reported on standard error.

