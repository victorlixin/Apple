c++filt(1)                                                   c++filt(1)

  cc++++ffiilltt

  NNAAMMEE

    c++filt - Demangle C ++ and Java symbols.

  SSYYNNOOPPSSIISS

    c++filt [[ -_ || --strip-underscores ]]
            [[ -j || --java ]]
            [[ -n || --no-strip-underscores ]]
            [[ -s  format|| --format= format]]
            [[ --help ]]  [[ --version ]]  [[symbol...]]

  DDEESSCCRRIIPPTTIIOONN

    The C ++ and Java languages provides function overloading, which means
    that you can write many functions with the same name (providing each takes
    parameters of different types). All C ++ and Java function names are
    encoded into a low-level assembly label (this process is known as
    mangling). The cc++++ffiilltt(1) program does the inverse mapping: it decodes
    (demangles) low-level names into user-level names so that the linker can
    keep these overloaded functions from clashing.

    Every alphanumeric word (consisting of letters, digits, underscores,
    dollars, or periods) seen in the input is a potential label. If the label
    decodes into a C ++ name, the C ++ name replaces the low-level name in the
    output.

    You can use cc++++ffiilltt to decipher individual symbols:

    cc++++ffiillttsymbol

    If no symbol arguments are given, cc++++ffiilltt reads symbol names from the
    standard input and writes the demangled names to the standard output. All
    results are printed on the standard output.

  OOPPTTIIOONNSS

    --__
    ----ssttrriipp--uunnddeerrssccoorreess
        On some systems, both the C and C ++ compilers put an underscore in
        front of every name. For example, the C name "foo" gets the low-level
        name "_foo". This option removes the initial underscore. Whether
        cc++++ffiilltt removes the underscore by default is target dependent.
    --jj
    ----jjaavvaa
        Prints demangled names using Java syntax. The default is to use C ++
        syntax.
    --nn
    ----nnoo--ssttrriipp--uunnddeerrssccoorreess
        Do not remove the initial underscore.
    --ss format
    ----ffoorrmmaatt==format
        GNU nnmm can decode three different methods of mangling, used by
        different C ++ compilers. The argument to this option selects which
        method it uses:

        ggnnuu
            The one used by the GNU compiler (the default method)

        lluucciidd
            The one used by the Lucid compiler

        aarrmm
            The one specified by the C ++ Annotated Reference Manual

        hhpp
            The one used by the HP compiler

        eeddgg
            The one used by the EDG compiler

        ggnnuu--vv33
            The one used by the GNU C++ compiler (g++) with the V3 ABI

        jjaavvaa
            The one used by the GNU Java compiler (gcj)

        ggnnaatt
            The one used by the GNU Ada compiler (GNAT)

    ----hheellpp
        Print a summary of the options to cc++++ffiilltt and exit.

    ----vveerrssiioonn
        Print the version number of cc++++ffiilltt and exit.

  CCOOPPYYRRIIGGHHTT

    Copyright (c) 1991, 92, 93, 94, 95, 96, 97, 98, 99, 2000, 2001, 2002 Free
    Software Foundation, Inc.

    Permission is granted to copy, distribute and/or modify this document
    under the terms of the GNU Free Documentation License, Version 1.1 or any
    later version published by the Free Software Foundation; with no Invariant
    Sections, with no Front-Cover Texts, and with no Back-Cover Texts. A copy
    of the license is included in the section entitled "GNU Free Documentation
    License".

