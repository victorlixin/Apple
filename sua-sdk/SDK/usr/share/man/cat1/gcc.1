gcc(1)                                                           gcc(1)

  ggcccc

  NNAAMMEE

    gcc - GNU project C and C++compiler

  SSYYNNOOPPSSIISS

    gcc [[-c||-S||-E]] [[-std=standard]] [[-g]]
        [[-pg]] [[-Olevel]] [[-Wwarn......]] [[-pedantic]]
        [[-Idir......]] [[-Ldir......]] [[-Dmacro[[=defn]]......]]
        [[-Umacro]] [[-foption......]] [[-mmachine-option......]]
        [[-o outfile]] infile......

    Only the most useful options are listed here; see below for the remainder.
    gg++++ accepts mostly the same options as ggcccc.

  DDEESSCCRRIIPPTTIIOONN

    When you invoke GCC, it normally does preprocessing, compilation, assembly
    and linking. The "overall options" allow you to stop this process at an
    intermediate stage. For example, the --cc option says not to run the linker.
    Then the output consists of object files output by the assembler.

    Other options are passed on to one stage of processing. Some options
    control the preprocessor and others the compiler itself. Yet other options
    control the assembler and linker; most of these are not documented here,
    since you rarely need to use any of them.

    Most of the command line options that you can use with GCC are useful for
    C programs; when an option is only useful with another language (usually
    C++), the explanation says so explicitly. If the description for a
    particular option does not mention a source language, you can use that
    option with all supported languages.

    The ggcccc program accepts options and file names as operands. Many options
    have multi-letter names; therefore multiple single-letter options may not
    be grouped: --ddrr is very different from --dd --rr.

    You can mix options and other arguments. For the most part, the order you
    use doesn&rsquo;t matter. Order does matter when you use several options
    of the same kind; for example, if you specify --LL more than once, the
    directories are searched in the order specified.

    Many options have long names starting with --ff or with --WW---for example, --
    ffffoorrccee--mmeemm, --ffssttrreennggtthh--rreedduuccee, --WWffoorrmmaatt and so on. Most of these have both
    positive and negative forms; the negative form of --ffffoooo would be --ffnnoo--ffoooo.
    This manual documents only one of these two forms, whichever one is not
    the default.

  OOPPTTIIOONNSS

    OOppttiioonn SSuummmmaarryy

    Here is a summary of all the options, grouped by type. Explanations are in
    the following sections.

    Overall Options

    --cc --SS --EE --oo file --ppiippee --ppaassss--eexxiitt--ccooddeess --xx language --vv --###### ----hheellpp ----
    ttaarrggeett--hheellpp ----vveerrssiioonn

    C Language Options

    --aannssii --ssttdd==standard --aauuxx--iinnffoo filename --ffnnoo--aassmm --ffnnoo--bbuuiillttiinn --ffnnoo--bbuuiillttiinn--
    function --ffhhoosstteedd --ffffrreeeessttaannddiinngg --ffmmss--eexxtteennssiioonnss --ttrriiggrraapphhss --nnoo--
    iinntteeggrraatteedd--ccpppp --ttrraaddiittiioonnaall --ttrraaddiittiioonnaall--ccpppp --ffaallllooww--ssiinnggllee--pprreecciissiioonn --
    ffccoonndd--mmiissmmaattcchh --ffssiiggnneedd--bbiittffiieellddss --ffssiiggnneedd--cchhaarr --ffuunnssiiggnneedd--bbiittffiieellddss --
    ffuunnssiiggnneedd--cchhaarr --ffwwrriittaabbllee--ssttrriinnggss

    C ++ Language Options

    --ffaabbii--vveerrssiioonn==n --ffnnoo--aacccceessss--ccoonnttrrooll --ffcchheecckk--nneeww --ffccoonnsseerrvvee--ssppaaccee --ffnnoo--
    ccoonnsstt--ssttrriinnggss --ffddoollllaarrss--iinn--iiddeennttiiffiieerrss --ffnnoo--eelliiddee--ccoonnssttrruuccttoorrss --ffnnoo--
    eennffoorrccee--eehh--ssppeeccss --ffeexxtteerrnnaall--tteemmppllaatteess --ffaalltt--eexxtteerrnnaall--tteemmppllaatteess --ffffoorr--ssccooppee
    --ffnnoo--ffoorr--ssccooppee --ffnnoo--ggnnuu--kkeeyywwoorrddss --ffnnoo--iimmpplliicciitt--tteemmppllaatteess --ffnnoo--iimmpplliicciitt--
    iinnlliinnee--tteemmppllaatteess --ffnnoo--iimmpplleemmeenntt--iinnlliinneess --ffmmss--eexxtteennssiioonnss --ffnnoo--nnoonnaannssii--
    bbuuiillttiinnss --ffnnoo--ooppeerraattoorr--nnaammeess --ffnnoo--ooppttiioonnaall--ddiiaaggss --ffppeerrmmiissssiivvee --ffrreeppoo --ffnnoo--
    rrttttii --ffssttaattss --fftteemmppllaattee--ddeepptthh--n --ffuussee--ccxxaa--aatteexxiitt --ffvvttaabbllee--ggcc --ffnnoo--wweeaakk --
    nnoossttddiinnCC++++ --ffnnoo--ddeeffaauulltt--iinnlliinnee --WWaabbii --WWccttoorr--ddttoorr--pprriivvaaccyy --WWnnoonn--vviirrttuuaall--
    ddttoorr --WWrreeoorrddeerr --WWeeffffCC++++ --WWnnoo--ddeepprreeccaatteedd --WWnnoo--nnoonn--tteemmppllaattee--ffrriieenndd --WWoolldd--
    ssttyyllee--ccaasstt --WWoovveerrllooaaddeedd--vviirrttuuaall --WWnnoo--ppmmff--ccoonnvveerrssiioonnss --WWssiiggnn--pprroommoo --WWssyynntthh

    Objective-C Language Options

    --ffccoonnssttaanntt--ssttrriinngg--ccllaassss==class-name --ffggnnuu--rruunnttiimmee --ffnneexxtt--rruunnttiimmee --ggeenn--ddeeccllss
    --WWnnoo--pprroottooccooll --WWsseelleeccttoorr --WWuunnddeeccllaarreedd--sseelleeccttoorr

    Language Independent Options

    --ffmmeessssaaggee--lleennggtthh==n --ffddiiaaggnnoossttiiccss--sshhooww--llooccaattiioonn==[oonnccee|eevveerryy--lliinnee]

    Warning Options

    --ffssyynnttaaxx--oonnllyy --ppeeddaannttiicc --ppeeddaannttiicc--eerrrroorrss --ww --WW --WWaallll --WWaaggggrreeggaattee--rreettuurrnn --
    WWccaasstt--aalliiggnn --WWccaasstt--qquuaall --WWcchhaarr--ssuubbssccrriippttss --WWccoommmmeenntt --WWccoonnvveerrssiioonn --WWnnoo--
    ddeepprreeccaatteedd--ddeeccllaarraattiioonnss --WWddiissaabblleedd--ooppttiimmiizzaattiioonn --WWnnoo--ddiivv--bbyy--zzeerroo --WWeerrrroorr --
    WWffllooaatt--eeqquuaall --WWffoorrmmaatt --WWffoorrmmaatt==22 --WWffoorrmmaatt--nnoonnlliitteerraall --WWffoorrmmaatt--sseeccuurriittyy --
    WWiimmpplliicciitt --WWiimmpplliicciitt--iinntt --WWiimmpplliicciitt--ffuunnccttiioonn--ddeeccllaarraattiioonn --WWeerrrroorr--iimmpplliicciitt--
    ffuunnccttiioonn--ddeeccllaarraattiioonn --WWiimmppoorrtt --WWiinnlliinnee --WWnnoo--eennddiiff--llaabbeellss --WWllaarrggeerr--tthhaann--len
    --WWlloonngg--lloonngg --WWmmaaiinn --WWmmiissssiinngg--bbrraacceess --WWmmiissssiinngg--ffoorrmmaatt--aattttrriibbuuttee --WWmmiissssiinngg--
    nnoorreettuurrnn --WWnnoo--mmuullttiicchhaarr --WWnnoo--ffoorrmmaatt--eexxttrraa--aarrggss --WWnnoo--ffoorrmmaatt--yy22kk --WWnnoo--iimmppoorrtt
    --WWnnoonnnnuullll --WWppaacckkeedd --WWppaaddddeedd --WWppaarreenntthheesseess --WWppooiinntteerr--aarriitthh --WWrreedduunnddaanntt--
    ddeeccllss --WWrreettuurrnn--ttyyppee --WWsseeqquueennccee--ppooiinntt --WWsshhaaddooww --WWssiiggnn--ccoommppaarree --WWssttrriicctt--
    aalliiaassiinngg --WWsswwiittcchh --WWsswwiittcchh--ddeeffaauulltt --WWsswwiittcchh--eennuumm --WWssyysstteemm--hheeaaddeerrss --
    WWttrriiggrraapphhss --WWuunnddeeff --WWuunniinniittiiaalliizzeedd --WWuunnkknnoowwnn--pprraaggmmaass --WWuunnrreeaacchhaabbllee--ccooddee --
    WWuunnuusseedd --WWuunnuusseedd--ffuunnccttiioonn --WWuunnuusseedd--llaabbeell --WWuunnuusseedd--ppaarraammeetteerr --WWuunnuusseedd--vvaalluuee
    --WWuunnuusseedd--vvaarriiaabbllee --WWwwrriittee--ssttrriinnggss

    C-only Warning Options

    --WWbbaadd--ffuunnccttiioonn--ccaasstt --WWmmiissssiinngg--ddeeccllaarraattiioonnss --WWmmiissssiinngg--pprroottoottyyppeess --WWnneesstteedd--
    eexxtteerrnnss --WWssttrriicctt--pprroottoottyyppeess --WWttrraaddiittiioonnaall

    Debugging Options

    --ddletters --dduummppssppeeccss --dduummppmmaacchhiinnee --dduummppvveerrssiioonn --ffdduummpp--uunnnnuummbbeerreedd --ffdduummpp--
    ttrraannssllaattiioonn--uunniitt[--n] --ffdduummpp--ccllaassss--hhiieerraarrcchhyy[--n] --ffdduummpp--ttrreeee--oorriiggiinnaall[--n] --
    ffdduummpp--ttrreeee--ooppttiimmiizzeedd[--n] --ffdduummpp--ttrreeee--iinnlliinneedd[--n] --ffeelliimmiinnaattee--ddwwaarrff22--dduuppss --
    ffmmeemm--rreeppoorrtt --ffpprrooffiillee--aarrccss --ffsscchheedd--vveerrbboossee==n --fftteesstt--ccoovveerraaggee --ffttiimmee--rreeppoorrtt
    --gg --gglevel --ggccooffff --ggddwwaarrff --ggddwwaarrff--11 --ggddwwaarrff--11++ --ggddwwaarrff--22 --ggggddbb --ggssttaabbss --
    ggssttaabbss++ --ggvvmmss --ggxxccooffff --ggxxccooffff++ --pp --ppgg --pprriinntt--ffiillee--nnaammee==library --pprriinntt--
    lliibbggcccc--ffiillee--nnaammee --pprriinntt--mmuullttii--ddiirreeccttoorryy --pprriinntt--mmuullttii--lliibb --pprriinntt--pprroogg--
    nnaammee==program --pprriinntt--sseeaarrcchh--ddiirrss --QQ --ssaavvee--tteemmppss --ttiimmee

    Optimization Options

    --ffaalliiggnn--ffuunnccttiioonnss==n --ffaalliiggnn--jjuummppss==n --ffaalliiggnn--llaabbeellss==n --ffaalliiggnn--llooooppss==n --
    ffbbrraanncchh--pprroobbaabbiilliittiieess --ffccaalllleerr--ssaavveess --ffccpprroopp--rreeggiisstteerrss --ffccssee--ffoollllooww--jjuummppss
    --ffccssee--sskkiipp--bblloocckkss --ffddaattaa--sseeccttiioonnss --ffddeellaayyeedd--bbrraanncchh --ffddeelleettee--nnuullll--ppooiinntteerr--
    cchheecckkss --ffeexxppeennssiivvee--ooppttiimmiizzaattiioonnss --ffffaasstt--mmaatthh --ffffllooaatt--ssttoorree --ffffoorrccee--aaddddrr --
    ffffoorrccee--mmeemm --ffffuunnccttiioonn--sseeccttiioonnss --ffggccssee --ffggccssee--llmm --ffggccssee--ssmm --fflloooopp--ooppttiimmiizzee
    --ffccrroossssjjuummppiinngg --ffiiff--ccoonnvveerrssiioonn --ffiiff--ccoonnvveerrssiioonn22 --ffiinnlliinnee--ffuunnccttiioonnss --
    ffiinnlliinnee--lliimmiitt==n --ffkkeeeepp--iinnlliinnee--ffuunnccttiioonnss --ffkkeeeepp--ssttaattiicc--ccoonnssttss --ffmmeerrggee--
    ccoonnssttaannttss --ffmmeerrggee--aallll--ccoonnssttaannttss --ffmmoovvee--aallll--mmoovvaabblleess --ffnneeww--rraa --ffnnoo--bbrraanncchh--
    ccoouunntt--rreegg --ffnnoo--ddeeffaauulltt--iinnlliinnee --ffnnoo--ddeeffeerr--ppoopp --ffnnoo--ffuunnccttiioonn--ccssee --ffnnoo--gguueessss--
    bbrraanncchh--pprroobbaabbiilliittyy --ffnnoo--iinnlliinnee --ffnnoo--mmaatthh--eerrrrnnoo --ffnnoo--ppeeeepphhoollee --ffnnoo--
    ppeeeepphhoollee22 --ffuunnssaaffee--mmaatthh--ooppttiimmiizzaattiioonnss --ffffiinniittee--mmaatthh--oonnllyy --ffnnoo--ttrraappppiinngg--
    mmaatthh --ffnnoo--zzeerroo--iinniittiiaalliizzeedd--iinn--bbssss --ffoommiitt--ffrraammee--ppooiinntteerr --ffooppttiimmiizzee--
    rreeggiisstteerr--mmoovvee --ffooppttiimmiizzee--ssiibblliinngg--ccaallllss --ffpprreeffeettcchh--lloooopp--aarrrraayyss --ffrreedduuccee--
    aallll--ggiivvss --ffrreeggmmoovvee --ffrreennaammee--rreeggiisstteerrss --ffrreeoorrddeerr--bblloocckkss --ffrreeoorrddeerr--ffuunnccttiioonnss
    --ffrreerruunn--ccssee--aafftteerr--lloooopp --ffrreerruunn--lloooopp--oopptt --ffsscchheedduullee--iinnssnnss --ffsscchheedduullee--iinnssnnss22
    --ffnnoo--sscchheedd--iinntteerrbblloocckk --ffnnoo--sscchheedd--ssppeecc --ffsscchheedd--ssppeecc--llooaadd --ffsscchheedd--ssppeecc--llooaadd--
    ddaannggeerroouuss --ffssiiggnnaalliinngg--nnaannss --ffssiinnggllee--pprreecciissiioonn--ccoonnssttaanntt --ffssssaa --ffssssaa--ccccpp --
    ffssssaa--ddccee --ffssttrreennggtthh--rreedduuccee --ffssttrriicctt--aalliiaassiinngg --ffttrraacceerr --fftthhrreeaadd--jjuummppss --
    ffuunnrroollll--aallll--llooooppss --ffuunnrroollll--llooooppss ----ppaarraamm name==value --OO --OO00 --OO11 --OO22 --OO33 --OOss

    Preprocessor Options

    --$$ --AAquestion==answer --AA--question[==answer] --CC --ddDD --ddII --ddMM --ddNN --
    DDmacro[==defn] --EE --HH --iiddiirraafftteerr dir --iinncclluuddee file --iimmaaccrrooss file --iipprreeffiixx
    file --iiwwiitthhpprreeffiixx dir --iiwwiitthhpprreeffiixxbbeeffoorree dir --iissyysstteemm dir --MM --MMMM --MMFF --MMGG --
    MMPP --MMQQ --MMTT --nnoossttddiinncc --PP --rreemmaapp --ttrriiggrraapphhss --uunnddeeff --UUmacro --WWpp,,option

    Assembler Option

    --WWaa,,option

    Linker Options

    object-file-name --lllibrary --nnoossttaarrttffiilleess --nnooddeeffaauullttlliibbss --nnoossttddlliibb --ss --
    ssttaattiicc --ssttaattiicc--lliibbggcccc --sshhaarreedd --sshhaarreedd--lliibbggcccc --ssyymmbboolliicc --WWll,,option --XXlliinnkkeerr
    option --uu symbol

    Directory Options

    --BBprefix --IIdir --II-- --LLdir --ssppeeccss==file

    Target Options

    --VV version --bb machine

    Machine Dependent Options

    i386 and x86-64 Options --mmccppuu==cpu-type --mmaarrcchh==cpu-type --mmffppmmaatthh==unit --
    mmaassmm==dialect --mmnnoo--ffaannccyy--mmaatthh--338877 --mmnnoo--ffpp--rreett--iinn--338877 --mmssoofftt--ffllooaatt --mmssvvrr33--
    sshhlliibb --mmnnoo--wwiiddee--mmuullttiippllyy --mmrrttdd --mmaalliiggnn--ddoouubbllee --mmpprreeffeerrrreedd--ssttaacckk--
    bboouunnddaarryy==num --mmmmmmxx --mmssssee --mmssssee22 --mm33ddnnooww --mmtthhrreeaaddss --mmnnoo--aalliiggnn--ssttrriinnggooppss --
    mmiinnlliinnee--aallll--ssttrriinnggooppss --mmppuusshh--aarrggss --mmaaccccuummuullaattee--oouuttggooiinngg--aarrggss --mm112288bbiitt--
    lloonngg--ddoouubbllee --mm9966bbiitt--lloonngg--ddoouubbllee --mmrreeggppaarrmm==num --mmoommiitt--lleeaaff--ffrraammee--ppooiinntteerr --
    mmnnoo--rreedd--zzoonnee --mmccmmooddeell==code-model --mm3322 --mm6644

    Code Generation Options

    --ffccaallll--ssaavveedd--reg --ffccaallll--uusseedd--reg --ffffiixxeedd--reg --ffeexxcceeppttiioonnss --ffnnoonn--ccaallll--
    eexxcceeppttiioonnss --ffuunnwwiinndd--ttaabblleess --ffaassyynncchhrroonnoouuss--uunnwwiinndd--ttaabblleess --ffiinnhhiibbiitt--ssiizzee--
    ddiirreeccttiivvee --ffiinnssttrruummeenntt--ffuunnccttiioonnss --ffnnoo--ccoommmmoonn --ffnnoo--iiddeenntt --ffnnoo--ggnnuu--lliinnkkeerr --
    ffppcccc--ssttrruucctt--rreettuurrnn --ffppiicc --ffPPIICC --ffrreegg--ssttrruucctt--rreettuurrnn --ffsshhaarreedd--ddaattaa --ffsshhoorrtt--
    eennuummss --ffsshhoorrtt--ddoouubbllee --ffsshhoorrtt--wwcchhaarr --ffvvoollaattiillee --ffvvoollaattiillee--gglloobbaall --
    ffvvoollaattiillee--ssttaattiicc --ffvveerrbboossee--aassmm --ffppaacckk--ssttrruucctt --ffssttaacckk--cchheecckk --ffssttaacckk--lliimmiitt--
    rreeggiisstteerr==reg --ffssttaacckk--lliimmiitt--ssyymmbbooll==sym --ffaarrgguummeenntt--aalliiaass --ffaarrgguummeenntt--nnooaalliiaass
    --ffaarrgguummeenntt--nnooaalliiaass--gglloobbaall --fflleeaaddiinngg--uunnddeerrssccoorree --ffttllss--mmooddeell==model --ffttrraappvv --
    ffbboouunnddss--cchheecckk

    OOppttiioonnss CCoonnttrroolllliinngg tthhee KKiinndd ooff OOuuttppuutt

    Compilation can involve up to four stages: preprocessing, compilation
    proper, assembly and linking, always in that order. The first three stages
    apply to an individual source file, and end by producing an object file;
    linking combines all the object files (those newly compiled, and those
    specified as input) into an executable file.

    For any given input file, the file name suffix determines what kind of
    compilation is done:
    file..cc
        C source code which must be preprocessed.
    file..ii
        C source code which should not be preprocessed.
    file..iiii
        C ++ source code which should not be preprocessed.
    file..mm
        Objective-C source code. Note that you must link with the library
        libobjc.a to make an Objective-C program work.
    file..mmii
        Objective-C source code which should not be preprocessed.
    file..hh
        C header file (not to be compiled or linked).
    file..cccc
    file..ccpp
    file..ccxxxx
    file..ccpppp
    file..CC++++
    file..CC
        C ++ source code which must be preprocessed. Note that in ..ccxxxx, the
        last two letters must both be literally xx. Likewise, ..CC refers to a
        literal capital C.
    file..ff
    file..ffoorr
    file..FFOORR
        Fortran source code which should not be preprocessed.
    file..FF
    file..ffpppp
    file..FFPPPP
        Fortran source code which must be preprocessed (with the traditional
        preprocessor).
    file..rr
        Fortran source code which must be preprocessed with a RATFOR
        preprocessor (not included with GCC ).
    file..aaddss
        Ada source code file which contains a library unit declaration (a
        declaration of a package, subprogram, or generic, or a generic
        instantiation), or a library unit renaming declaration (a package,
        generic, or subprogram renaming declaration). Such files are also
        called specs.
    file..aaddbb
        Ada source code file containing a library unit body (a subprogram or
        package body). Such files are also called bodies.
    file..ss
        Assembler code.
    file..SS
        Assembler code which must be preprocessed.

    other
        An object file to be fed straight into linking. Any file name with no
        recognized suffix is treated this way.

    You can specify the input language explicitly with the --xx option:

    --xx nnoonnee
        Turn off any specification of a language, so that subsequent files are
        handled according to their file name suffixes (as they are if --xx has
        not been used at all).

    --ppaassss--eexxiitt--ccooddeess
        Normally the ggcccc program will exit with the code of 1 if any phase of
        the compiler returns a non-success return code. If you specify --ppaassss--
        eexxiitt--ccooddeess, the ggcccc program will instead return with numerically
        highest error produced by any phase that returned an error indication.

    If you only want some of the stages of compilation, you can use --xx (or
    filename suffixes) to tell ggcccc where to start, and one of the options --cc,
    --SS, or --EE to say where ggcccc is to stop. Note that some combinations (for
    example, --xx ccpppp--oouuttppuutt --EE) instruct ggcccc to do nothing at all.

    --cc
        Compile or assemble the source files, but do not link. The linking
        stage simply is not done. The ultimate output is in the form of an
        object file for each source file.

    By default, the object file name for a source file is made by replacing
    the suffix ..cc, ..ii, ..ss, etc., with ..oo.

    Unrecognized input files, not requiring compilation or assembly, are
    ignored.

    --SS
        Stop after the stage of compilation proper; do not assemble. The
        output is in the form of an assembler code file for each non-assembler
        input file specified.

    By default, the assembler file name for a source file is made by replacing
    the suffix ..cc, ..ii, etc., with ..ss.

    Input files that don't require compilation are ignored.

    --EE
        Stop after the preprocessing stage; do not run the compiler proper.
        The output is in the form of preprocessed source code, which is sent
        to the standard output.

    Input files which don't require preprocessing are ignored.
    --oo file
        Place output in file file. This applies regardless to whatever sort of
        output is being produced, whether it be an executable file, an object
        file, an assembler file or preprocessed C code.
        Since only one output file can be specified, it does not make sense to
        use --oo when compiling more than one input file, unless you are
        producing an executable file as output.
        If --oo is not specified, the default is to put an executable file in
        a.out, the object file for source.suffix in source.o, its assembler
        file in source.s, and all preprocessed C source on standard output.

    --vv
        Print (on standard error output) the commands executed to run the
        stages of compilation. Also print the version number of the compiler
        driver program and of the preprocessor and the compiler proper.

    --######
        Like --vv except the commands are not executed and all command arguments
        are quoted. This is useful for shell scripts to capture the driver-
        generated command lines.

    --ppiippee
        Use pipes rather than temporary files for communication between the
        various stages of compilation. This fails to work on some systems
        where the assembler is unable to read from a pipe; but the GNU
        assembler has no trouble.

    ----hheellpp
        Print (on the standard output) a description of the command line
        options understood by ggcccc. If the --vv option is also specified then ----
        hheellpp will also be passed on to the various processes invoked by ggcccc,
        so that they can display the command line options they accept. If the
        --WW option is also specified then command line options which have no
        documentation associated with them will also be displayed.

    ----ttaarrggeett--hheellpp
        Print (on the standard output) a description of target specific
        command line options for each tool.

    ----vveerrssiioonn
        Display the version number and copyrights of the invoked GCC.

    CCoommppiilliinngg CC ++++ PPrrooggrraammss

    C ++ source files conventionally use one of the suffixes ..CC, ..cccc, ..ccpppp,
    ..CC++++, ..ccpp, or ..ccxxxx; preprocessed C++files use the suffix ..iiii. GCC
    recognizes files with these names and compiles them as C ++ programs even
    if you call the compiler the same way as for compiling C programs (usually
    with the name ggcccc).

    However, C ++ programs often require class libraries as well as a compiler
    that understands the C++language---and under some circumstances, you might
    want to compile programs from standard input, or otherwise without a
    suffix that flags them as C ++ programs. gg++++ is a program that calls GCC
    with the default language set to C ++, and automatically specifies linking
    against the C ++ library. On many systems, gg++++ is also installed with the
    name CC++++.

    When you compile C ++ programs, you may specify many of the same command-
    line options that you use for compiling programs in any language; or
    command-line options meaningful for C and related languages; or options
    that are meaningful only for C ++ programs.

    OOppttiioonnss CCoonnttrroolllliinngg CC DDiiaalleecctt

    The following options control the dialect of C (or languages derived from
    C, such as C ++ and Objective-C) that the compiler accepts:

    --aannssii
        In C mode, support all ISO C90 programs. In C ++ mode, remove GNU
        extensions that conflict with ISO C ++.

    This turns off certain features of GCC that are incompatible with ISO C90
    (when compiling C code), or of standard C ++ (when compiling C ++ code),
    such as the aassmm and ttyyppeeooff keywords, and predefined macros such as uunniixx
    and vvaaxx that identify the type of system you are using. It also enables
    the undesirable and rarely used ISO trigraph feature. For the C compiler,
    it disables recognition of C++style //// comments as well as the iinnlliinnee
    keyword.

    The alternate keywords ____aassmm____, ____eexxtteennssiioonn____, ____iinnlliinnee____ and ____ttyyppeeooff____
    continue to work despite --aannssii. You would not want to use them in an ISO C
    program, of course, but it is useful to put them in header files that
    might be included in compilations done with --aannssii. Alternate predefined
    macros such as ____uunniixx____ and ____vvaaxx____ are also available, with or without --
    aannssii.

    The --aannssii option does not cause non-ISO programs to be rejected
    gratuitously. For that, --ppeeddaannttiicc is required in addition to --aannssii.

    The macro ____SSTTRRIICCTT__AANNSSII____ is predefined when the --aannssii option is used.
    Some header files may notice this macro and refrain from declaring certain
    functions or defining certain macros that the ISO standard doesn't call
    for; this is to avoid interfering with any programs that might use these
    names for other things.

    Functions which would normally be built in but do not have semantics
    defined by ISO C (such as aallllooccaa and ffffss) are not built-in functions with
    --aannssii is used.

    --ssttdd==

    Determine the language standard. This option is currently only supported
    when compiling C or C ++. A value for this option must be provided;
    possible values are:
    cc8899
    iissoo99889999::11999900
        ISO C90 (same as --aannssii).

    iissoo99889999::119999440099
        ISO C90 as modified in amendment 1.
    cc9999
    cc99xx
    iissoo99889999::11999999
    iissoo99889999::119999xx
        ISO C99. Note that this standard is not yet fully supported; see
        <hhttttpp::////ggcccc..ggnnuu..oorrgg//ggcccc--33..33//cc9999ssttaattuuss..hhttmmll> for more information. The
        names cc99xx and iissoo99889999::119999xx are deprecated.

    ggnnuu8899
        Default, ISO C90 plus GNU extensions (including some C99 features).
    ggnnuu9999
    ggnnuu99xx
        ISO C99 plus GNU extensions. When ISO C99 is fully implemented in GCC,
        this will become the default. The name ggnnuu99xx is deprecated.

    CC++++9988
        The 1998 ISO C ++ standard plus amendments.

    ggnnuu++++9988
        The same as --ssttdd==CC++++9988 plus GNU extensions. This is the default for
        C++code.

    Even when this option is not specified, you can still use some of the
    features of newer standards in so far as they do not conflict with
    previous C standards. For example, you may use ____rreessttrriicctt____ even when --
    ssttdd==cc9999 is not specified.

    The --ssttdd options specifying some version of ISO C have the same effects as
    --aannssii, except that features that were not in ISO C90 but are in the
    specified version (for example, //// comments and the iinnlliinnee keyword in ISO
    C99) are not disabled.

    --aauuxx--iinnffoo filename

    Output to the given filename prototyped declarations for all functions
    declared and/or defined in a translation unit, including those in header
    files. This option is silently ignored in any language other than C.

    Besides declarations, the file indicates, in comments, the origin of each
    declaration (source file and line), whether the declaration was implicit,
    prototyped or unprototyped (II, NN for new or OO for old, respectively, in
    the first character after the line number and the colon), and whether it
    came from a declaration or a definition (CC or FF, respectively, in the
    following character). In the case of function definitions, a K&R-style
    list of arguments followed by their declarations is also provided, inside
    comments, after the declaration.

    --ffnnoo--aassmm

    Do not recognize aassmm, iinnlliinnee or ttyyppeeooff as a keyword, so that code can use
    these words as identifiers. You can use the keywords ____aassmm____, ____iinnlliinnee____
    and ____ttyyppeeooff____ instead. --aannssii implies --ffnnoo--aassmm.

    In C ++, this switch only affects the ttyyppeeooff keyword, since aassmm and iinnlliinnee
    are standard keywords. You may want to use the --ffnnoo--ggnnuu--kkeeyywwoorrddss flag
    instead, which has the same effect. In C99 mode (--ssttdd==cc9999 or --ssttdd==ggnnuu9999),
    this switch only affects the aassmm and ttyyppeeooff keywords, since iinnlliinnee is a
    standard keyword in ISO C99.

    --ffnnoo--bbuuiillttiinn
    --ffnnoo--bbuuiillttiinn--function

    Don't recognize built-in functions that do not begin with ____bbuuiillttiinn__ as
    prefix.

    GCC normally generates special code to handle certain built-in functions
    more efficiently; for instance, calls to aallllooccaa may become single
    instructions that adjust the stack directly, and calls to mmeemmccppyy may
    become inline copy loops. The resulting code is often both smaller and
    faster, but since the function calls no longer appear as such, you cannot
    set a breakpoint on those calls, nor can you change the behavior of the
    functions by linking with a different library.

    With the --ffnnoo--bbuuiillttiinn--function option only the built-in function function
    is disabled. function must not begin with ____bbuuiillttiinn__ If a function is
    named this is not built-in in this version of GCC, this option is ignored.
    There is no corresponding --ffbbuuiillttiinn--function option; if you wish to enable
    built-in functions selectively when using --ffnnoo--bbuuiillttiinn or --ffffrreeeessttaannddiinngg,
    you may define macros such as:

    #define abs(n)          __builtin_abs ((n))
    #define strcpy(d, s)    __builtin_strcpy ((d), (s))

    --ffhhoosstteedd

    Assert that compilation takes place in a hosted environment. This implies
    --ffbbuuiillttiinn. A hosted environment is one in which the entire standard
    library is available, and in which mmaaiinn has a return type of iinntt. Examples
    are nearly everything except a kernel. This is equivalent to --ffnnoo--
    ffrreeeessttaannddiinngg.

    --ffffrreeeessttaannddiinngg

    Assert that compilation takes place in a freestanding environment. This
    implies --ffnnoo--bbuuiillttiinn. A freestanding environment is one in which the
    standard library may not exist, and program startup may not necessarily be
    at mmaaiinn. The most obvious example is an OS kernel. This is equivalent to --
    ffnnoo--hhoosstteedd.

    --ffmmss--eexxtteennssiioonnss

    Accept some non-standard constructs used in Microsoft header files.

    --ttrriiggrraapphhss

    Support ISO C trigraphs. The --aannssii option (and --ssttdd options for strict ISO
    C conformance) implies --ttrriiggrraapphhss.

    --nnoo--iinntteeggrraatteedd--ccpppp

    Performs a compilation in two passes: preprocessing and compiling. This
    option allows a user supplied "cc1", "cc1plus", or "cc1obj" via the --
    BB option. The user supplied compilation step can then add in an additional
    preprocessing step after normal preprocessing but before compiling. The
    default is to use the integrated cpp (internal cpp).

    The semantics of this option will change if "cc1", "cc1plus", and "cc1obj"
    are merged.

    --ttrraaddiittiioonnaall

    --ttrraaddiittiioonnaall--ccpppp

    Formerly, these options caused GCC to attempt to emulate a pre-standard C
    compiler. They are now only supported with the --EE switch. The preprocessor
    continues to support a pre-standard mode. See the GNU CPP manual for
    details.

    --ffccoonndd--mmiissmmaattcchh

    Allow conditional expressions with mismatched types in the second and
    third arguments. The value of such an expression is void. This option is
    not supported for C++.

    --ffuunnssiiggnneedd--cchhaarr

    Let the type cchhaarr be unsigned, like uunnssiiggnneedd cchhaarr.

    Each kind of machine has a default for what cchhaarr should be. It is either
    like uunnssiiggnneedd cchhaarr by default or like ssiiggnneedd cchhaarr by default.

    Ideally, a portable program should always use ssiiggnneedd cchhaarr or uunnssiiggnneedd cchhaarr
    when it depends on the signedness of an object. But many programs have
    been written to use plain cchhaarr and expect it to be signed, or expect it to
    be unsigned, depending on the machines they were written for. This option,
    and its inverse, let you make such a program work with the opposite
    default.

    The type cchhaarr is always a distinct type from each of ssiiggnneedd cchhaarr or
    uunnssiiggnneedd cchhaarr, even though its behavior is always just like one of those
    two.

    --ffssiiggnneedd--cchhaarr

    Let the type cchhaarr be signed, like ssiiggnneedd cchhaarr.

    Note that this is equivalent to --ffnnoo--uunnssiiggnneedd--cchhaarr, which is the negative
    form of --ffuunnssiiggnneedd--cchhaarr. Likewise, the option --ffnnoo--ssiiggnneedd--cchhaarr is
    equivalent to --ffuunnssiiggnneedd--cchhaarr.

    --ffssiiggnneedd--bbiittffiieellddss
    --ffuunnssiiggnneedd--bbiittffiieellddss
    --ffnnoo--ssiiggnneedd--bbiittffiieellddss
    --ffnnoo--uunnssiiggnneedd--bbiittffiieellddss

    These options control whether a bit-field is signed or unsigned, when the
    declaration does not use either ssiiggnneedd or uunnssiiggnneedd. By default, such a
    bit-field is signed, because this is consistent: the basic integer types
    such as iinntt are signed types.

    --ffwwrriittaabbllee--ssttrriinnggss

    Store string constants in the writable data segment and don't uniquize
    them. This is for compatibility with old programs which assume they can
    write into string constants.

    Writing into string constants is a very bad idea; "constants" should be
    constant.

    OOppttiioonnss CCoonnttrroolllliinngg CC++++ DDiiaalleecctt

    This section describes the command-line options that are only meaningful
    for C++ programs; but you can also use most of the GNU compiler options
    regardless of what language your program is in. For example, you might
    compile a file ffiirrssttCCllaassss..CC like this:
    g++ -g -frepo -O -c firstClass.C

    In this example, only --ffrreeppoo is an option meant only for C++ programs; you
    can use the other options with any language supported by GCC.

    Here is a list of options that are only for compiling C++ programs:
    --ffaabbii--vveerrssiioonn==n
        Use version n of the C++ ABI. Version 1 is the version of the C++ ABI
        that first appeared in G++ 3.2. Version 0 will always be the version
        that conforms most closely to the C++ ABI specification. Therefore,
        the ABI obtained using version 0 will change as ABI bugs are fixed.
        The default is version 1.

    --ffnnoo--aacccceessss--ccoonnttrrooll
        Turn off all access checking. This switch is mainly useful for working
        around bugs in the access control code.

    --ffcchheecckk--nneeww
        Check that the pointer returned by ooppeerraattoorr nneeww is non-null before
        attempting to modify the storage allocated. This check is normally
        unnecessary because the C++ standard specifies that ooppeerraattoorr nneeww will
        only return 00 if it is declared throw(), in which case the compiler
        will always check the return value even without this option. In all
        other cases, when ooppeerraattoorr nneeww has a non-empty exception
        specification, memory exhaustion is signalled by throwing ssttdd::::
        bbaadd__aalllloocc. See also nneeww ((nnootthhrrooww)).

    --ffccoonnsseerrvvee--ssppaaccee
        Put uninitialized or runtime-initialized global variables into the
        common segment, as C does. This saves space in the executable at the
        cost of not diagnosing duplicate definitions. If you compile with this
        flag and your program mysteriously crashes after mmaaiinn(()) has completed,
        you may have an object that is being destroyed twice because two
        definitions were merged.
        This option is no longer useful on most targets, now that support has
        been added for putting variables into BSS without making them common.

    --ffnnoo--ccoonnsstt--ssttrriinnggss
        Give string constants type cchhaarr ** instead of type ccoonnsstt cchhaarr **. By
        default, G++ uses type ccoonnsstt cchhaarr ** as required by the standard. Even
        if you use --ffnnoo--ccoonnsstt--ssttrriinnggss, you cannot actually modify the value of
        a string constant, unless you also use --ffwwrriittaabbllee--ssttrriinnggss.
        This option might be removed in a future release of G++. For maximum
        portability, you should structure your code so that it works with
        string constants that have type ccoonnsstt cchhaarr **.

    --ffddoollllaarrss--iinn--iiddeennttiiffiieerrss
        Accept $$ in identifiers. You can also explicitly prohibit use of $$
        with the option --ffnnoo--ddoollllaarrss--iinn--iiddeennttiiffiieerrss. (GNU C allows $$ by
        default on most target systems, but there are a few exceptions.)
        Traditional C allowed the character $$ to form part of identifiers.
        However, ISO C and C++forbid $$ in identifiers.

    --ffnnoo--eelliiddee--ccoonnssttrruuccttoorrss
        The C++ standard allows an implementation to omit creating a temporary
        which is only used to initialize another object of the same type.
        Specifying this option disables that optimization, and forces G++ to
        call the copy constructor in all cases.

    --ffnnoo--eennffoorrccee--eehh--ssppeeccss
        Don't check for violation of exception specifications at runtime. This
        option violates the C++standard, but may be useful for reducing code
        size in production builds, much like defining NNDDEEBBUUGG. The compiler
        will still optimize based on the exception specifications.

    --ffeexxtteerrnnaall--tteemmppllaatteess
        Cause ##pprraaggmmaa iinntteerrffaaccee and iimmpplleemmeennttaattiioonn to apply to template
        instantiation; template instances are emitted or not according to the
        location of the template definition.
        This option is deprecated.

    --ffaalltt--eexxtteerrnnaall--tteemmppllaatteess
        Similar to --ffeexxtteerrnnaall--tteemmppllaatteess, but template instances are emitted or
        not according to the place where they are first instantiated.
        This option is deprecated.
    --ffffoorr--ssccooppee
    --ffnnoo--ffoorr--ssccooppee
        If --ffffoorr--ssccooppee is specified, the scope of variables declared in a for-
        init-statement is limited to the ffoorr loop itself, as specified by the
        C++standard. If --ffnnoo--ffoorr--ssccooppee is specified, the scope of variables
        declared in a for-init-statement extends to the end of the enclosing
        scope, as was the case in old versions of G++, and other (traditional)
        implementations of C++.
        The default if neither flag is given to follow the standard, but to
        allow and give a warning for old-style code that would otherwise be
        invalid, or have different behavior.

    --ffnnoo--ggnnuu--kkeeyywwoorrddss
        Do not recognize ttyyppeeooff as a keyword, so that code can use this word
        as an identifier. You can use the keyword ____ttyyppeeooff____ instead. --aannssii
        implies --ffnnoo--ggnnuu--kkeeyywwoorrddss.

    --ffnnoo--iimmpplliicciitt--tteemmppllaatteess
        Never emit code for non-inline templates which are instantiated
        implicitly (i.e. by use); only emit code for explicit instantiations.

    --ffnnoo--iimmpplliicciitt--iinnlliinnee--tteemmppllaatteess
        Don't emit code for implicit instantiations of inline templates,
        either. The default is to handle inlines differently so that compiles
        with and without optimization will need the same set of explicit
        instantiations.

    --ffnnoo--iimmpplleemmeenntt--iinnlliinneess
        To save space, do not emit out-of-line copies of inline functions
        controlled by ##pprraaggmmaa iimmpplleemmeennttaattiioonn. This will cause linker errors if
        these functions are not inlined everywhere they are called.

    --ffmmss--eexxtteennssiioonnss
        Disable pedantic warnings about constructs used in MFC, such as
        implicit int and getting a pointer to member function via non-standard
        syntax.

    --ffnnoo--nnoonnaannssii--bbuuiillttiinnss
        Disable built-in declarations of functions that are not mandated by
        ANSI/ISO C. These include ffffss, aallllooccaa, __eexxiitt, iinnddeexx, bbzzeerroo, ccoonnjjff, and
        other related functions.

    --ffnnoo--ooppeerraattoorr--nnaammeess
        Do not treat the operator name keywords aanndd, bbiittaanndd, bbiittoorr, ccoommppll,
        nnoott, oorr and xxoorr as synonyms as keywords.

    --ffnnoo--ooppttiioonnaall--ddiiaaggss
        Disable diagnostics that the standard says a compiler does not need to
        issue. Currently, the only such diagnostic issued by G++ is the one
        for a name having multiple meanings within a class.

    --ffppeerrmmiissssiivvee
        Downgrade messages about nonconformant code from errors to warnings.
        By default, G++ effectively sets --ppeeddaannttiicc--eerrrroorrss without --ppeeddaannttiicc;
        this option reverses that. This behavior and this option are
        superseded by --ppeeddaannttiicc, which works as it does for GNU C.

    --ffrreeppoo
        Enable automatic template instantiation at link time. This option also
        implies --ffnnoo--iimmpplliicciitt--tteemmppllaatteess.

    --ffnnoo--rrttttii
        Disable generation of information about every class with virtual
        functions for use by the C++ runtime type identification features
        (ddyynnaammiicc__ccaasstt and ttyyppeeiidd). If you don't use those parts of the
        language, you can save some space by using this flag. Note that
        exception handling uses the same information, but it will generate it
        as needed.

    --ffssttaattss
        Emit statistics about front-end processing at the end of the
        compilation. This information is generally only useful to the G++
        development team.
    --fftteemmppllaattee--ddeepptthh--n
        Set the maximum instantiation depth for template classes to n. A limit
        on the template instantiation depth is needed to detect endless
        recursions during template class instantiation. ANSI/ISO C++
        conforming programs must not rely on a maximum depth greater than 17.

    --ffuussee--ccxxaa--aatteexxiitt
        Register destructors for objects with static storage duration with the
        ____ccxxaa__aatteexxiitt function rather than the aatteexxiitt function. This option is
        required for fully standards-compliant handling of static destructors,
        but will only work if your C library supports ____ccxxaa__aatteexxiitt.

    --ffvvttaabbllee--ggcc
        Emit special relocations for vtables and virtual function references
        so that the linker can identify unused virtual functions and zero out
        vtable slots that refer to them. This is most useful with --ffffuunnccttiioonn--
        sseeccttiioonnss and --WWll,,----ggcc--sseeccttiioonnss, in order to also discard the functions
        themselves.
        This optimization requires GNU as and GNU ld. Not all systems support
        this option. --WWll,,----ggcc--sseeccttiioonnss is ignored without --ssttaattiicc.

    --ffnnoo--wweeaakk
        Do not use weak symbol support, even if it is provided by the linker.
        By default, G++ will use weak symbols if they are available. This
        option exists only for testing, and should not be used by end-users;
        it will result in inferior code and has no benefits. This option may
        be removed in a future release of G++.

    --nnoossttddiinnCC++++
        Do not search for header files in the standard directories specific to
        C++, but do still search the other standard directories. (This option
        is used when building the C++ library.)

    In addition, these optimization, warning, and code generation options have
    meanings only for C++programs:
    --WWccttoorr--ddttoorr--pprriivvaaccyy (C++ only)
        Warn when a class seems unusable, because all the constructors or
        destructors in a class are private and the class has no friends or
        public static member functions. This warning is enabled by default.
    --WWnnoonn--vviirrttuuaall--ddttoorr (C++ only)
        Warn when a class declares a non-virtual destructor that should
        probably be virtual, because it looks like the class will be used
        polymorphically. This warning is enabled by --WWaallll.
    --WWrreeoorrddeerr (C++ only)
        Warn when the order of member initializers given in the code does not
        match the order in which they must be executed. For instance:
                struct A {
                  int i;
                  int j;
                  A(): j (0), i (1) { }
                };
        Here the compiler will warn that the member initializers for ii and jj
        will be rearranged to match the declaration order of the members. This
        warning is enabled by --WWaallll.

    The following --WW...... options are not affected by --WWaallll.
    --WWeeffffCC++++ (C++ only)

    Warn about violations of the following style guidelines from Scott Meyers'
    Effective C ++ book:

    *     Item 11: Define a copy constructor and an assignment operator for
          classes with dynamically allocated memory.
    *     Item 12: Prefer initialization to assignment in constructors.
    *     Item 14: Make destructors virtual in base classes.
    *     Item 15: Have ooppeerraattoorr== return a reference to **tthhiiss.
    *     Item 23: Don't try to return a reference when you must return an
          object.

    and about violations of the following style guidelines from Scott Meyers'
    More Effective C ++ book:

    *     Item 6: Distinguish between prefix and postfix forms of increment
          and decrement operators.
    *     Item 7: Never overload &&&&, ||||, or ,,.

    If you use this option, you should be aware that the standard library
    headers do not obey all of these guidelines; you can use ggrreepp --vv to filter
    out those warnings.

    --WWnnoo--ddeepprreeccaatteedd (C++ only)

    Do not warn about usage of deprecated features.

    --WWnnoo--nnoonn--tteemmppllaattee--ffrriieenndd (C++only)

    Disable warnings when non-templatized friend functions are declared within
    a template. With the advent of explicit template specification support in
    G++, if the name of the friend is an unqualified-id (i.e., ffrriieenndd
    ffoooo((iinntt))), the C++ language specification demands that the friend declare
    or define an ordinary, nontemplate function. (Section 14.5.3). Before G++
    implemented explicit specification, unqualified-ids could be interpreted
    as a particular specialization of a templatized function. Because this
    non-conforming behavior is no longer the default behavior for G++, --WWnnoonn--
    tteemmppllaattee--ffrriieenndd allows the compiler to check existing code for potential
    trouble spots, and is on by default. This new compiler behavior can be
    turned off with --WWnnoo--nnoonn--tteemmppllaattee--ffrriieenndd which keeps the conformant
    compiler code but disables the helpful warning.

    --WWoolldd--ssttyyllee--ccaasstt (C++ only)

    Warn if an old-style (C-style) cast to a non-void type is used within a
    C++ program. The new-style casts (ssttaattiicc__ccaasstt, rreeiinntteerrpprreett__ccaasstt, and
    ccoonnsstt__ccaasstt) are less vulnerable to unintended effects, and much easier to
    grep for.

    --WWoovveerrllooaaddeedd--vviirrttuuaall (C++ only)

    Warn when a function declaration hides virtual functions from a base
    class. For example, in:

            struct A {
              virtual void f();
            };
            struct B: public A {
              void f(int);
            };

    the AA class version of ff is hidden in BB, and code like this:
            B* b;
            b->f();

    will fail to compile.

    --WWnnoo--ppmmff--ccoonnvveerrssiioonnss (C++ only)

    Disable the diagnostic for converting a bound pointer to member function
    to a plain pointer.

    --WWssiiggnn--pprroommoo (C++ only)

    Warn when overload resolution chooses a promotion from unsigned or
    enumeral type to a signed type over a conversion to an unsigned type of
    the same size. Previous versions of G++ would try to preserve
    unsignedness, but the standard mandates the current behavior.

    --WWssyynntthh (C++ only)

    Warn when G++'s synthesis behavior does not match that of cfront. For
    instance:
            struct A {
              operator int ();
              A& operator = (int);
            };

            main ()
            {
              A a,b;
              a = b;
            }

    In this example, G++ will synthesize a default AA&& ooppeerraattoorr == ((ccoonnsstt AA&&));;,
    while cfront will use the user-defined ooppeerraattoorr ==.

    OOppttiioonnss CCoonnttrroolllliinngg OObbjjeeccttiivvee--CC DDiiaalleecctt

    This section describes the command-line options that are only meaningful
    for Objective-C programs; but you can also use most of the GNU compiler
    options regardless of what language your program is in. For example, you
    might compile a file ssoommee__ccllaassss..mm like this:
            gcc -g -fgnu-runtime -O -c some_class.m

    In this example, only --ffggnnuu--rruunnttiimmee is an option meant only for Objective-
    C programs; you can use the other options with any language supported by
    GCC.

    Here is a list of options that are only for compiling Objective-
    C programs:
    --ffccoonnssttaanntt--ssttrriinngg--ccllaassss==class-name
        Use class-name as the name of the class to instantiate for each
        literal string specified with the syntax @@""......"". The default class
        name is NNXXCCoonnssttaannttSSttrriinngg.

    --ffggnnuu--rruunnttiimmee
        Generate object code compatible with the standard GNU Objective-
        C runtime. This is the default for most types of systems.

    --ffnneexxtt--rruunnttiimmee
        Generate output compatible with the NeXT runtime. This is the default
        for NeXT-based systems, including Darwin and Mac OS X. The macro
        ____NNEEXXTT__RRUUNNTTIIMMEE____ is predefined if (and only if) this option is used.

    --ggeenn--ddeeccllss
        Dump interface declarations for all classes seen in the source file to
        a file named sourcename.decl.

    --WWnnoo--pprroottooccooll
        If a class is declared to implement a protocol, a warning is issued
        for every method in the protocol that is not implemented by the class.
        The default behavior is to issue a warning for every method not
        explicitly implemented in the class, even if a method implementation
        is inherited from the superclass. If you use the --WWnnoo--pprroottooccooll option,
        then methods inherited from the superclass are considered to be
        implemented, and no warning is issued for them.

    --WWsseelleeccttoorr
        Warn if multiple methods of different types for the same selector are
        found during compilation. The check is performed on the list of
        methods in the final stage of compilation. Additionally, a check is
        performed that for each selector appearing in a @@sseelleeccttoorr((......))
        expression, a corresponding method with that selector has been found
        during compilation. Because these checks scan the method table only at
        the end of compilation, these warnings are not produced if the final
        stage of compilation is not reached, for example because an error is
        found during compilation, or because the --ffssyynnttaaxx--oonnllyy option is being
        used.

    --WWuunnddeeccllaarreedd--sseelleeccttoorr
        Warn if a @@sseelleeccttoorr((......)) expression referring to an undeclared
        selector is found. A selector is considered undeclared if no method
        with that name has been declared (explicitly, in an @@iinntteerrffaaccee or
        @@pprroottooccooll declaration, or implicitly, in an @@iimmpplleemmeennttaattiioonn section)
        before the @@sseelleeccttoorr((......)) expression. This option always performs its
        checks as soon as a @@sseelleeccttoorr((......)) expression is found (while --
        WWsseelleeccttoorr only performs its checks in the final stage of compilation),
        and so additionally enforces the coding style convention that methods
        and selectors must be declared before being used.

    OOppttiioonnss ttoo CCoonnttrrooll DDiiaaggnnoossttiicc MMeessssaaggeess FFoorrmmaattttiinngg

    Traditionally, diagnostic messages have been formatted irrespective of the
    output device's aspect (e.g. its width,...). The options described below
    can be used to control the diagnostic messages formatting algorithm, e.g.
    how many characters per line, how often source location information should
    be reported. Right now, only the C++ front end can honor these options.
    However it is expected, in the near future, that the remaining front ends
    would be able to digest them correctly.
    --ffmmeessssaaggee--lleennggtthh==n
        Try to format error messages so that they fit on lines of about n
        characters. The default is 72 characters for gg++++ and 0 for the rest of
        the front ends supported by GCC. If n is zero, then no line-wrapping
        will be done; each error message will appear on a single line.

    --ffddiiaaggnnoossttiiccss--sshhooww--llooccaattiioonn==oonnccee
        Only meaningful in line-wrapping mode. Instructs the diagnostic
        messages reporter to emit once source location information; that is,
        in case the message is too long to fit on a single physical line and
        has to be wrapped, the source location won't be emitted (as prefix)
        again, over and over, in subsequent continuation lines. This is the
        default behavior.

    --ffddiiaaggnnoossttiiccss--sshhooww--llooccaattiioonn==eevveerryy--lliinnee
        Only meaningful in line-wrapping mode. Instructs the diagnostic
        messages reporter to emit the same source location information (as
        prefix) for physical lines that result from the process of breaking a
        message which is too long to fit on a single line.

    OOppttiioonnss ttoo RReeqquueesstt oorr SSuupppprreessss WWaarrnniinnggss

    Warnings are diagnostic messages that report constructions which are not
    inherently erroneous but which are risky or suggest there may have been an
    error.

    You can request many specific warnings with options beginning --WW, for
    example --WWiimmpplliicciitt to request warnings on implicit declarations. Each of
    these specific warning options also has a negative form beginning --WWnnoo-- to
    turn off warnings; for example, --WWnnoo--iimmpplliicciitt. This manual lists only one
    of the two forms, whichever is not the default.

    The following options control the amount and kinds of warnings produced by
    GCC ; for further, language-specific options also refer to C++ Dialect
    Options and Objective-C Dialect Options.

    --ffssyynnttaaxx--oonnllyy
        Check the code for syntax errors, but don't do anything beyond that.

    --ppeeddaannttiicc
        Issue all the warnings demanded by strict ISO C and ISO C++ ; reject
        all programs that use forbidden extensions, and some other programs
        that do not follow ISO C and ISO C++. For ISO C, follows the version
        of the ISO C standard specified by any --ssttdd option used.

    Valid ISO C and ISO C++ programs should compile properly with or without
    this option (though a rare few will require --aannssii or a --ssttdd option
    specifying the required version of ISO C). However, without this option,
    certain GNU extensions and traditional C and C++ features are supported as
    well. With this option, they are rejected.

    --ppeeddaannttiicc does not cause warning messages for use of the alternate
    keywords whose names begin and end with ____. Pedantic warnings are also
    disabled in the expression that follows ____eexxtteennssiioonn____. However, only
    system header files should use these escape routes; application programs
    should avoid them.

    Some users try to use --ppeeddaannttiicc to check programs for strict ISO C
    conformance. They soon find that it does not do quite what they want: it
    finds some non-ISO practices, but not all---only those for which ISO C
    requires a diagnostic, and some others for which diagnostics have been
    added.

    A feature to report any failure to conform to ISO C might be useful in
    some instances, but would require considerable additional work and would
    be quite different from --ppeeddaannttiicc. We don't have plans to support such a
    feature in the near future.

    Where the standard specified with --ssttdd represents a GNU extended dialect
    of C, such as ggnnuu8899 or ggnnuu9999, there is a corresponding base standard, the
    version of ISO C on which the GNU extended dialect is based. Warnings from
    --ppeeddaannttiicc are given where they are required by the base standard. (It
    would not make sense for such warnings to be given only for features not
    in the specified GNU C dialect, since by definition the GNU dialects of C
    include all features the compiler supports with the given option, and
    there would be nothing to warn about.)

    --ppeeddaannttiicc--eerrrroorrss

    Like --ppeeddaannttiicc, except that errors are produced rather than warnings.

    --ww

    Inhibit all warning messages.

    --WWnnoo--iimmppoorrtt

    Inhibit warning messages about the use of ##iimmppoorrtt.

    --WWcchhaarr--ssuubbssccrriippttss

    Warn if an array subscript has type cchhaarr. This is a common cause of error,
    as programmers often forget that this type is signed on some machines.

    --WWccoommmmeenntt

    Warn whenever a comment-start sequence //** appears in a //** comment, or
    whenever a Backslash-Newline appears in a //// comment.

    --WWffoorrmmaatt

    Check calls to pprriinnttff and ssccaannff, etc., to make sure that the arguments
    supplied have types appropriate to the format string specified, and that
    the conversions specified in the format string make sense. This includes
    standard functions, and others specified by format attributes, in the
    pprriinnttff, ssccaannff, ssttrrffttiimmee and ssttrrffmmoonn (an X/Open extension, not in the C
    standard) families.

    The formats are checked against the format features supported by GNU libc
    version 2.2. These include all ISO C90 and C99 features, as well as
    features from the Single Unix Specification and some BSD and GNU
    extensions. Other library implementations may not support all these
    features; GCC does not support warning about features that go beyond a
    particular library's limitations. However, if --ppeeddaannttiicc is used with --
    WWffoorrmmaatt, warnings will be given about format features not in the selected
    standard version (but not for ssttrrffmmoonn formats, since those are not in any
    version of the C standard).

    Since --WWffoorrmmaatt also checks for null format arguments for several
    functions, --WWffoorrmmaatt also implies --WWnnoonnnnuullll.

    --WWffoorrmmaatt is included in --WWaallll. For more control over some aspects of
    format checking, the options --WWnnoo--ffoorrmmaatt--yy22kk, --WWnnoo--ffoorrmmaatt--eexxttrraa--aarrggss, --
    WWnnoo--ffoorrmmaatt--zzeerroo--lleennggtthh, --WWffoorrmmaatt--nnoonnlliitteerraall, --WWffoorrmmaatt--sseeccuurriittyy, and --
    WWffoorrmmaatt==22 are available, but are not included in --WWaallll.

    --WWnnoo--ffoorrmmaatt--yy22kk

    If --WWffoorrmmaatt is specified, do not warn about ssttrrffttiimmee formats which may
    yield only a two-digit year.

    --WWnnoo--ffoorrmmaatt--eexxttrraa--aarrggss

    If --WWffoorrmmaatt is specified, do not warn about excess arguments to a pprriinnttff
    or ssccaannff format function. The C standard specifies that such arguments are
    ignored.

    Where the unused arguments lie between used arguments that are specified
    with $$ operand number specifications, normally warnings are still given,
    since the implementation could not know what type to pass to vvaa__aarrgg to
    skip the unused arguments. However, in the case of ssccaannff formats, this
    option will suppress the warning if the unused arguments are all pointers,
    since the Single Unix Specification says that such unused arguments are
    allowed.

    --WWnnoo--ffoorrmmaatt--zzeerroo--lleennggtthh

    If --WWffoorrmmaatt is specified, do not warn about zero-length formats. The C
    standard specifies that zero-length formats are allowed.

    --WWffoorrmmaatt--nnoonnlliitteerraall

    If --WWffoorrmmaatt is specified, also warn if the format string is not a string
    literal and so cannot be checked, unless the format function takes its
    format arguments as a vvaa__lliisstt.

    --WWffoorrmmaatt--sseeccuurriittyy

    If --WWffoorrmmaatt is specified, also warn about uses of format functions that
    represent possible security problems. At present, this warns about calls
    to pprriinnttff and ssccaannff functions where the format string is not a string
    literal and there are no format arguments, as in pprriinnttff ((ffoooo));;. This may
    be a security hole if the format string came from untrusted input and
    contains %%nn. (This is currently a subset of what --WWffoorrmmaatt--nnoonnlliitteerraall warns
    about, but in future warnings may be added to --WWffoorrmmaatt--sseeccuurriittyy that are
    not included in --WWffoorrmmaatt--nnoonnlliitteerraall.)

    --WWffoorrmmaatt==22

    Enable --WWffoorrmmaatt plus format checks not included in --WWffoorrmmaatt. Currently
    equivalent to --WWffoorrmmaatt --WWffoorrmmaatt--nnoonnlliitteerraall --WWffoorrmmaatt--sseeccuurriittyy.

    --WWnnoonnnnuullll

    Enable warning about passing a null pointer for arguments marked as
    requiring a non-null value by the nnoonnnnuullll function attribute.

    --WWnnoonnnnuullll is included in --WWaallll and --WWffoorrmmaatt. It can be disabled with the --
    WWnnoo--nnoonnnnuullll option.

    --WWiimmpplliicciitt--iinntt

    Warn when a declaration does not specify a type.

    --WWiimmpplliicciitt--ffuunnccttiioonn--ddeeccllaarraattiioonn

    --WWeerrrroorr--iimmpplliicciitt--ffuunnccttiioonn--ddeeccllaarraattiioonn

    Give a warning (or error) whenever a function is used before being
    declared.

    --WWiimmpplliicciitt

    Same as --WWiimmpplliicciitt--iinntt and --WWiimmpplliicciitt--ffuunnccttiioonn--ddeeccllaarraattiioonn.

    --WWmmaaiinn

    Warn if the type of mmaaiinn is suspicious. mmaaiinn should be a function with
    external linkage, returning int, taking either zero arguments, two, or
    three arguments of appropriate types.

    --WWmmiissssiinngg--bbrraacceess

    Warn if an aggregate or union initializer is not fully bracketed. In the
    following example, the initializer for aa is not fully bracketed, but that
    for bb is fully bracketed.

            int a[2][2] = { 0, 1, 2, 3 };
            int b[2][2] = { { 0, 1 }, { 2, 3 } };

    --WWppaarreenntthheesseess

    Warn if parentheses are omitted in certain contexts, such as when there is
    an assignment in a context where a truth value is expected, or when
    operators are nested whose precedence people often get confused about.

    Also warn about constructions where there may be confusion to which iiff
    statement an eellssee branch belongs. Here is an example of such a case:

            {
              if (a)
                if (b)
                  foo ();
              else
                bar ();
            }

    In C, every eellssee branch belongs to the innermost possible iiff statement,
    which in this example is iiff ((bb)). This is often not what the programmer
    expected, as illustrated in the above example by indentation the
    programmer chose. When there is the potential for this confusion, GCC will
    issue a warning when this flag is specified. To eliminate the warning, add
    explicit braces around the innermost iiff statement so there is no way the
    eellssee could belong to the enclosing iiff. The resulting code would look like
    this:

            {
              if (a)
                {
                  if (b)
                    foo ();
                  else
                    bar ();
                }
            }

    --WWsseeqquueennccee--ppooiinntt

    Warn about code that may have undefined semantics because of violations of
    sequence point rules in the C standard.

    The C standard defines the order in which expressions in a C program are
    evaluated in terms of sequence points, which represent a partial ordering
    between the execution of parts of the program: those executed before the
    sequence point, and those executed after it. These occur after the
    evaluation of a full expression (one which is not part of a larger
    expression), after the evaluation of the first operand of a &&&&, ||||, ?? :: or
    ,, (comma) operator, before a function is called (but after the evaluation
    of its arguments and the expression denoting the called function), and in
    certain other places. Other than as expressed by the sequence point rules,
    the order of evaluation of subexpressions of an expression is not
    specified. All these rules describe only a partial order rather than a
    total order, since, for example, if two functions are called within one
    expression with no sequence point between them, the order in which the
    functions are called is not specified. However, the standards committee
    have ruled that function calls do not overlap.

    It is not specified when between sequence points modifications to the
    values of objects take effect. Programs whose behavior depends on this
    have undefined behavior; the C standard specifies that "Between the
    previous and next sequence point an object shall have its stored value
    modified at most once by the evaluation of an expression. Furthermore, the
    prior value shall be read only to determine the value to be stored." If a
    program breaks these rules, the results on any particular implementation
    are entirely unpredictable.

    Examples of code with undefined behavior are aa == aa++++;;, aa[[nn]] == bb[[nn++++]] and
    aa[[ii++++]] == ii;;. Some more complicated cases are not diagnosed by this option,
    and it may give an occasional false positive result, but in general it has
    been found fairly effective at detecting this sort of problem in programs.

    The present implementation of this option only works for C programs. A
    future implementation may also work for C++ programs.

    The C standard is worded confusingly, therefore there is some debate over
    the precise meaning of the sequence point rules in subtle cases. Links to
    discussions of the problem, including proposed formal definitions, may be
    found on our readings page, at http://gcc.gnu.org/readings.html.

    --WWrreettuurrnn--ttyyppee

    Warn whenever a function is defined with a return-type that defaults to
    iinntt. Also warn about any rreettuurrnn statement with no return-value in a
    function whose return-type is not vvooiidd.

    For C++, a function without return type always produces a diagnostic
    message, even when --WWnnoo--rreettuurrnn--ttyyppee is specified. The only exceptions are
    mmaaiinn and functions defined in system headers.

    --WWsswwiittcchh

    Warn whenever a sswwiittcchh statement has an index of enumeral type and lacks a
    ccaassee for one or more of the named codes of that enumeration. (The presence
    of a ddeeffaauulltt label prevents this warning.) ccaassee labels outside the
    enumeration range also provoke warnings when this option is used.

    --WWsswwiittcchh--ddeeffaauulltt

    Warn whenever a sswwiittcchh statement does not have a ddeeffaauulltt case.

    --WWsswwiittcchh--eennuumm

    Warn whenever a sswwiittcchh statement has an index of enumeral type and lacks a
    ccaassee for one or more of the named codes of that enumeration. ccaassee labels
    outside the enumeration range also provoke warnings when this option is
    used.

    --WWttrriiggrraapphhss

    Warn if any trigraphs are encountered that might change the meaning of the
    program (trigraphs within comments are not warned about).

    --WWuunnuusseedd--ffuunnccttiioonn

    Warn whenever a static function is declared but not defined or a non\-
    inline static function is unused.

    --WWuunnuusseedd--llaabbeell

    Warn whenever a label is declared but not used.

    To suppress this warning use the uunnuusseedd attribute.

    --WWuunnuusseedd--ppaarraammeetteerr

    Warn whenever a function parameter is unused aside from its declaration.

    To suppress this warning use the uunnuusseedd attribute.

    --WWuunnuusseedd--vvaarriiaabbllee

    Warn whenever a local variable or non-constant static variable is unused
    aside from its declaration.

    To suppress this warning use the uunnuusseedd attribute.

    --WWuunnuusseedd--vvaalluuee

    Warn whenever a statement computes a result that is explicitly not used.

    To suppress this warning cast the expression to vvooiidd.

    --WWuunnuusseedd

    All the above --WWuunnuusseedd options combined.

    In order to get a warning about an unused function parameter, you must
    either specify --WW --WWuunnuusseedd or separately specify --WWuunnuusseedd--ppaarraammeetteerr.

    --WWuunniinniittiiaalliizzeedd

    Warn if an automatic variable is used without first being initialized or
    if a variable may be clobbered by a sseettjjmmpp call.

    These warnings are possible only in optimizing compilation, because they
    require data flow information that is computed only when optimizing. If
    you don't specify --OO, you simply won't get these warnings.

    These warnings occur only for variables that are candidates for register
    allocation. Therefore, they do not occur for a variable that is declared
    vvoollaattiillee, or whose address is taken, or whose size is other than 1, 2, 4
    or 8 bytes. Also, they do not occur for structures, unions or arrays, even
    when they are in registers.

    Note that there may be no warning about a variable that is used only to
    compute a value that itself is never used, because such computations may
    be deleted by data flow analysis before the warnings are printed.

    These warnings are made optional because GCC is not smart enough to see
    all the reasons why the code might be correct despite appearing to have an
    error. Here is one example of how this can happen:

            {
              int x;
              switch (y)
                {
                case 1: x = 1;
                  break;
                case 2: x = 4;
                  break;
                case 3: x = 5;
                }
              foo (x);
            }

    If the value of yy is always 1, 2 or 3, then xx is always initialized, but
    GCC doesn't know this. Here is another common case:

            {
              int save_y;
              if (change_y) save_y = y, y = new_y;
             ...
              if (change_y) y = save_y;
            }

    This has no bug because ssaavvee__yy is used only if it is set.

    This option also warns when a non-volatile automatic variable might be
    changed by a call to lloonnggjjmmpp. These warnings as well are possible only in
    optimizing compilation.

    The compiler sees only the calls to sseettjjmmpp. It cannot know where lloonnggjjmmpp
    will be called; in fact, a signal handler could call it at any point in
    the code. As a result, you may get a warning even when there is in fact no
    problem because lloonnggjjmmpp cannot in fact be called at the place which would
    cause a problem.

    Some spurious warnings can be avoided if you declare all the functions you
    use that never return as nnoorreettuurrnn.

    --WWuunnkknnoowwnn--pprraaggmmaass

    Warn when a #pragma directive is encountered which is not understood by
    GCC. If this command line option is used, warnings will even be issued for
    unknown pragmas in system header files. This is not the case if the
    warnings were only enabled by the --WWaallll command line option.

    --WWssttrriicctt--aalliiaassiinngg

    This option is only active when --ffssttrriicctt--aalliiaassiinngg is active. It warns
    about code which might break the strict aliasing rules that the compiler
    is using for optimization. The warning does not catch all cases, but does
    attempt to catch the more common pitfalls. It is included in --WWaallll.

    --WWaallll

    All of the above --WW options combined. This enables all the warnings about
    constructions that some users consider questionable, and that are easy to
    avoid (or modify to prevent the warning), even in conjunction with macros.
    This also enables some language-specific warnings described in C++ Dialect
    Options and Objective-C Dialect Options.

    The following --WW...... options are not implied by --WWaallll. Some of them warn
    about constructions that users generally do not consider questionable, but
    which occasionally you might wish to check for; others warn about
    constructions that are necessary or hard to avoid in some cases, and there
    is no simple way to modify the code to suppress the warning.

    OOppttiioonnss ffoorr DDeebbuuggggiinngg YYoouurr PPrrooggrraamm oorr GGCCCC

    GCC has various special options that are used for debugging either your
    program or GCC:

    --gg
        Produce debugging information in the operating system's native format
        (stabs, COFF, XCOFF, or DWARF ). GDB can work with this debugging
        information.

    On most systems that use stabs format, --gg enables use of extra debugging
    information that only GDB can use; this extra information makes debugging
    work better in GDB but will probably make other debuggers crash or refuse
    to read the program. If you want to control for certain whether to
    generate the extra information, use --ggssttaabbss++, --ggssttaabbss, --ggxxccooffff++, --ggxxccooffff,
    --ggddwwaarrff--11++, --ggddwwaarrff--11, or --ggvvmmss (see below).

    Unlike most other C compilers, GCC allows you to use --gg with --OO. The
    shortcuts taken by optimized code may occasionally produce surprising
    results: some variables you declared may not exist at all; flow of control
    may briefly move where you did not expect it; some statements may not be
    executed because they compute constant results or their values were
    already at hand; some statements may execute in different places because
    they were moved out of loops.

    Nevertheless it proves possible to debug optimized output. This makes it
    reasonable to use the optimizer for programs that might have bugs.

    The following options are useful when GCC is generated with the capability
    for more than one debugging format.

    aaddddrreessss
        Print the address of each node. Usually this is not meaningful as it
        changes according to the environment and source file. Its primary use
        is for tying up a dump file with a debug environment.

    sslliimm
        Inhibit dumping of members of a scope or body of a function merely
        because that scope has been reached. Only dump such items when they
        are directly reachable by some other path.

    aallll
        Turn on all options.

    The following tree dumps are possible:

    oorriiggiinnaall
        Dump before any tree based optimization, to file.original.

    ooppttiimmiizzeedd
        Dump after all tree based optimization, to file.optimized.

    iinnlliinneedd
        Dump after function inlining, to file.inlined.

    --ffsscchheedd--vveerrbboossee==n

    On targets that use instruction scheduling, this option controls the
    amount of debugging output the scheduler prints. This information is
    written to standard error, unless --ddSS or --ddRR is specified, in which case
    it is output to the usual dump listing file, .sched or .sched2
    respectively. However for n greater than nine, the output is always
    printed to standard error.

    For n greater than zero, --ffsscchheedd--vveerrbboossee outputs the same information as --
    ddRRSS. For n greater than one, it also output basic block probabilities,
    detailed ready list information and unit/insn info. For n greater than
    two, it includes RTL at abort point, control-flow and regions info. And
    for n over four, --ffsscchheedd--vveerrbboossee also includes dependence info.

    --ssaavvee--tteemmppss

    Store the usual "temporary" intermediate files permanently; place them in
    the current directory and name them based on the source file. Thus,
    compiling foo.c with --cc --ssaavvee--tteemmppss would produce files foo.i and foo.s,
    as well as foo.o. This creates a preprocessed foo.i output file even
    though the compiler now normally uses an integrated preprocessor.

    --ttiimmee

    Report the CPU time taken by each subprocess in the compilation sequence.
    For C source files, this is the compiler proper and assembler (plus the
    linker if linking is done). The output looks like this:

            # cc1 0.12 0.01
            # as 0.00 0.01

    The first number on each line is the "user time," that is time spent
    executing the program itself. The second number is "system time," time
    spent executing operating system routines on behalf of the program. Both
    numbers are in seconds.

    --pprriinntt--ffiillee--nnaammee==library

    Print the full absolute name of the library file library that would be
    used when linking---and don't do anything else. With this option, GCC does
    not compile or link anything; it just prints the file name.

    --pprriinntt--mmuullttii--ddiirreeccttoorryy

    Print the directory name corresponding to the multilib selected by any
    other switches present in the command line. This directory is supposed to
    exist in GGCCCC__EEXXEECC__PPRREEFFIIXX.

    --pprriinntt--mmuullttii--lliibb

    Print the mapping from multilib directory names to compiler switches that
    enable them. The directory name is separated from the switches by ;;, and
    each switch starts with an @@}} iinnsstteeaadd ooff tthhee @@ssaammpp{{--, without spaces
    between multiple switches. This is supposed to ease shell-processing.

    --pprriinntt--pprroogg--nnaammee==program

    Like --pprriinntt--ffiillee--nnaammee, but searches for a program such as ccpppp.

    --pprriinntt--lliibbggcccc--ffiillee--nnaammee

    Same as --pprriinntt--ffiillee--nnaammee==lliibbggcccc..aa.

    This is useful when you use --nnoossttddlliibb or --nnooddeeffaauullttlliibbss but you do want to
    link with libgcc.a. You can do

            gcc -nostdlib <files>... &lsquo;gcc -print-libgcc-file-name&lsquo;

    --pprriinntt--sseeaarrcchh--ddiirrss

    Print the name of the configured installation directory and a list of
    program and library directories gcc will search---and don't do anything
    else.

    This is useful when gcc prints the error message iinnssttaallllaattiioonn pprroobblleemm,,
    ccaannnnoott eexxeecc ccpppp00:: NNoo ssuucchh ffiillee oorr ddiirreeccttoorryy. To resolve this you either
    need to put cpp0 and the other compiler components where gcc expects to
    find them, or you can set the environment variable GGCCCC__EEXXEECC__PPRREEFFIIXX to the
    directory where you installed them. Don't forget the trailing '/'.

    --dduummppmmaacchhiinnee

    Print the compiler's target machine (for example, ii668866--ppcc--lliinnuuxx--ggnnuu)---and
    don't do anything else.

    --dduummppvveerrssiioonn

    Print the compiler version (for example, 33..00)---and don't do anything
    else.

    --dduummppssppeeccss

    Print the compiler's built-in specs---and don't do anything else. (This is
    used when GCC itself is being built.)

    OOppttiioonnss TThhaatt CCoonnttrrooll OOppttiimmiizzaattiioonn

    These options control various sorts of optimizations.

    Without any optimization option, the compiler's goal is to reduce the cost
    of compilation and to make debugging produce the expected results.
    Statements are independent: if you stop the program with a breakpoint
    between statements, you can then assign a new value to any variable or
    change the program counter to any other statement in the function and get
    exactly the results you would expect from the source code.

    Turning on optimization flags makes the compiler attempt to improve the
    performance and/or code size at the expense of compilation time and
    possibly the ability to debug the program.

    Not all optimizations are controlled directly by a flag. Only
    optimizations that have a flag are listed.
    --OO
    --OO11
        Optimize. Optimizing compilation takes somewhat more time, and a lot
        more memory for a large function.

    With --OO, the compiler tries to reduce code size and execution time,
    without performing any optimizations that take a great deal of compilation
    time.

    --OO turns on the following optimization flags: --ffddeeffeerr--ppoopp --ffmmeerrggee--
    ccoonnssttaannttss --fftthhrreeaadd--jjuummppss --fflloooopp--ooppttiimmiizzee --ffccrroossssjjuummppiinngg --ffiiff--ccoonnvveerrssiioonn --
    ffiiff--ccoonnvveerrssiioonn22 --ffddeellaayyeedd--bbrraanncchh --ffgguueessss--bbrraanncchh--pprroobbaabbiilliittyy --ffccpprroopp--
    rreeggiisstteerrss

    --OO also turns on --ffoommiitt--ffrraammee--ppooiinntteerr on machines where doing so does not
    interfere with debugging.

    --OO22
        Optimize even more. GCC performs nearly all supported optimizations
        that do not involve a space-speed tradeoff. The compiler does not
        perform loop unrolling or function inlining when you specify --OO22. As
        compared to --OO, this option increases both compilation time and the
        performance of the generated code.

    --OO22 turns on all optimization flags specified by --OO. It also turns on the
    following optimization flags: --ffffoorrccee--mmeemm --ffooppttiimmiizzee--ssiibblliinngg--ccaallllss --
    ffssttrreennggtthh--rreedduuccee --ffccssee--ffoollllooww--jjuummppss --ffccssee--sskkiipp--bblloocckkss --ffrreerruunn--ccssee--aafftteerr--
    lloooopp --ffrreerruunn--lloooopp--oopptt --ffggccssee --ffggccssee--llmm --ffggccssee--ssmm --ffddeelleettee--nnuullll--ppooiinntteerr--
    cchheecckkss --ffeexxppeennssiivvee--ooppttiimmiizzaattiioonnss --ffrreeggmmoovvee --ffsscchheedduullee--iinnssnnss --ffsscchheedduullee--
    iinnssnnss22 --ffsscchheedd--iinntteerrbblloocckk --ffsscchheedd--ssppeecc --ffccaalllleerr--ssaavveess --ffppeeeepphhoollee22 --
    ffrreeoorrddeerr--bblloocckkss --ffrreeoorrddeerr--ffuunnccttiioonnss --ffssttrriicctt--aalliiaassiinngg --ffaalliiggnn--ffuunnccttiioonnss --
    ffaalliiggnn--jjuummppss --ffaalliiggnn--llooooppss --ffaalliiggnn--llaabbeellss

    Please note the warning under --ffggccssee about invoking --OO22 on programs that
    use computed gotos.

    --OO33
        Optimize yet more. --OO33 turns on all optimizations specified by --OO22 and
        also turns on the --ffiinnlliinnee--ffuunnccttiioonnss and --ffrreennaammee--rreeggiisstteerrss options.

    --OO00
        Do not optimize. This is the default.

    --OOss
        Optimize for size. --OOss enables all --OO22 optimizations that do not
        typically increase code size. It also performs further optimizations
        designed to reduce code size.

    --OOss disables the following optimization flags: --ffaalliiggnn--ffuunnccttiioonnss --ffaalliiggnn--
    jjuummppss --ffaalliiggnn--llooooppss --ffaalliiggnn--llaabbeellss --ffrreeoorrddeerr--bblloocckkss --ffpprreeffeettcchh--lloooopp--aarrrraayyss

    If you use multiple --OO options, with or without level numbers, the last
    such option is the one that is effective.

    Options of the form --ffflag specify machine-independent flags. Most flags
    have both positive and negative forms; the negative form of --ffffoooo would be
    --ffnnoo--ffoooo. In the table below, only one of the forms is listed---the one
    you typically will use. You can figure out the other form by either
    removing nnoo-- or adding it.

    The following options control specific optimizations. They are either
    activated by --OO options or are related to ones that are. You can use the
    following flags in the rare cases when "fine-tuning" of optimizations to
    be performed is desired.

    --ffssiiggnnaalliinngg--nnaannss
        Compile code assuming that IEEE signaling NaNs may generate user-
        visible traps during floating-point operations. Setting this option
        disables optimizations that may change the number of exceptions
        visible with signaling NaNs. This option implies --ffttrraappppiinngg--mmaatthh.
        This option causes the preprocessor macro ____SSUUPPPPOORRTT__SSNNAANN____ to be
        defined.
        The default is --ffnnoo--ssiiggnnaalliinngg--nnaannss.
        This option is experimental and does not currently guarantee to
        disable all GCC optimizations that affect signaling NaN behavior.

    --ffssiinnggllee--pprreecciissiioonn--ccoonnssttaanntt
        Treat floating point constant as single precision constant instead of
        implicitly converting it to double precision constant.

    The following options control optimizations that may improve performance,
    but are not enabled by any --OO options. This section includes experimental
    options that may produce broken code.

    --ffbbrraanncchh--pprroobbaabbiilliittiieess
        After running a program compiled with --ffpprrooffiillee--aarrccss, you can compile
        it a second time using --ffbbrraanncchh--pprroobbaabbiilliittiieess, to improve
        optimizations based on the number of times each branch was taken. When
        the program compiled with --ffpprrooffiillee--aarrccss exits it saves arc execution
        counts to a file called sourcename.da for each source file The
        information in this data file is very dependent on the structure of
        the generated code, so you must use the same source code and the same
        optimization options for both compilations.
        With --ffbbrraanncchh--pprroobbaabbiilliittiieess, GCC puts a RREEGG__BBRR__PPRROOBB note on each
        JJUUMMPP__IINNSSNN and CCAALLLL__IINNSSNN. These can be used to improve optimization.
        Currently, they are only used in one place: in reorg.c, instead of
        guessing which path a branch is mostly to take, the RREEGG__BBRR__PPRROOBB values
        are used to exactly determine which path is taken more often.

    --ffnneeww--rraa
        Use a graph coloring register allocator. Currently this option is
        meant for testing, so we are interested to hear about miscompilations
        with --ffnneeww--rraa.

    --ffttrraacceerr
        Perform tail duplication to enlarge superblock size. This
        transformation simplifies the control flow of the function allowing
        other optimizations to do better job.

    --ffuunnrroollll--llooooppss
        Unroll loops whose number of iterations can be determined at compile
        time or upon entry to the loop. --ffuunnrroollll--llooooppss implies both --
        ffssttrreennggtthh--rreedduuccee and --ffrreerruunn--ccssee--aafftteerr--lloooopp. This option makes code
        larger, and may or may not make it run faster.

    --ffuunnrroollll--aallll--llooooppss
        Unroll all loops, even if their number of iterations is uncertain when
        the loop is entered. This usually makes programs run more slowly. --
        ffuunnrroollll--aallll--llooooppss implies the same options as --ffuunnrroollll--llooooppss,

    --ffpprreeffeettcchh--lloooopp--aarrrraayyss
        If supported by the target machine, generate instructions to prefetch
        memory to improve the performance of loops that access large arrays.
        Disabled at level --OOss.
    --ffffuunnccttiioonn--sseeccttiioonnss
    --ffddaattaa--sseeccttiioonnss
        Place each function or data item into its own section in the output
        file if the target supports arbitrary sections. The name of the
        function or the name of the data item determines the section's name in
        the output file.
        Use these options on systems where the linker can perform
        optimizations to improve locality of reference in the instruction
        space. Most systems using the ELF object format and SPARC processors
        running Solaris 2 have linkers with such optimizations. AIX may have
        these optimizations in the future.
        Only use these options when there are significant benefits from doing
        so. When you specify these options, the assembler and linker will
        create larger object and executable files and will also be slower. You
        will not be able to use ggpprrooff on all systems if you specify this
        option and you may have problems with debugging if you specify both
        this option and --gg.

    --ffssssaa
        Perform optimizations in static single assignment form. Each
        function's flow graph is translated into SSA form, optimizations are
        performed, and the flow graph is translated back from SSA form. Users
        should not specify this option, since it is not yet ready for
        production use.

    --ffssssaa--ccccpp
        Perform Sparse Conditional Constant Propagation in SSA form. Requires
        --ffssssaa. Like --ffssssaa, this is an experimental feature.

    --ffssssaa--ddccee
        Perform aggressive dead-code elimination in SSA form. Requires --ffssssaa.
        Like --ffssssaa, this is an experimental feature.
    ----ppaarraamm name==value
        In some places, GCC uses various constants to control the amount of
        optimization that is done. For example, GCC will not inline functions
        that contain more that a certain number of instructions. You can
        control some of these constants on the command-line using the ----ppaarraamm
        option.
        In each case, the value is an integer. The allowable choices for name
        are given in the following list:

        mmaaxx--ccrroossssjjuummpp--eeddggeess
            The maximum number of incoming edges to consider for crossjumping.
            The algorithm used by --ffccrroossssjjuummppiinngg is O(N^2) in the number of
            edges incoming to each block. Increasing values mean more
            aggressive optimization, making the compile time increase with
            probably small improvement in executable size.

        mmaaxx--ddeellaayy--sslloott--iinnssnn--sseeaarrcchh
            The maximum number of instructions to consider when looking for an
            instruction to fill a delay slot. If more than this arbitrary
            number of instructions is searched, the time savings from filling
            the delay slot will be minimal so stop searching. Increasing
            values mean more aggressive optimization, making the compile time
            increase with probably small improvement in executable run time.

        mmaaxx--ddeellaayy--sslloott--lliivvee--sseeaarrcchh
            When trying to fill delay slots, the maximum number of
            instructions to consider when searching for a block with valid
            live register information. Increasing this arbitrarily chosen
            value means more aggressive optimization, increasing the compile
            time. This parameter should be removed when the delay slot code is
            rewritten to maintain the control-flow graph.

        mmaaxx--ggccssee--mmeemmoorryy
            The approximate maximum amount of memory that will be allocated in
            order to perform the global common subexpression elimination
            optimization. If more memory than specified is required, the
            optimization will not be done.

        mmaaxx--ggccssee--ppaasssseess
            The maximum number of passes of GCSE to run.

        mmaaxx--ppeennddiinngg--lliisstt--lleennggtthh
            The maximum number of pending dependencies scheduling will allow
            before flushing the current state and starting over. Large
            functions with few branches or calls can create excessively large
            lists which needlessly consume memory and resources.

        mmaaxx--iinnlliinnee--iinnssnnss--ssiinnggllee
            Several parameters control the tree inliner used in gcc. This
            number sets the maximum number of instructions (counted in gcc's
            internal representation) in a single function that the tree
            inliner will consider for inlining. This only affects functions
            declared inline and methods implemented in a class declaration
            (C++ ). The default value is 300.

        mmaaxx--iinnlliinnee--iinnssnnss--aauuttoo
            When you use --ffiinnlliinnee--ffuunnccttiioonnss (included in --OO33), a lot of
            functions that would otherwise not be considered for inlining by
            the compiler will be investigated. To those functions, a different
            (more restrictive) limit compared to functions declared inline can
            be applied. The default value is 300.

        mmaaxx--iinnlliinnee--iinnssnnss
            The tree inliner does decrease the allowable size for single
            functions to be inlined after we already inlined the number of
            instructions given here by repeated inlining. This number should
            be a factor of two or more larger than the single function limit.
            Higher numbers result in better runtime performance, but incur
            higher compile-time resource (CPU time, memory) requirements and
            result in larger binaries. Very high values are not advisable, as
            too large binaries may adversely affect runtime performance. The
            default value is 600.

        mmaaxx--iinnlliinnee--ssllooppee
            After exceeding the maximum number of inlined instructions by
            repeated inlining, a linear function is used to decrease the
            allowable size for single functions. The slope of that function is
            the negative reciprocal of the number specified here. The default
            value is 32.

        mmiinn--iinnlliinnee--iinnssnnss
            The repeated inlining is throttled more and more by the linear
            function after exceeding the limit. To avoid too much throttling,
            a minimum for this function is specified here to allow repeated
            inlining for very small functions even when a lot of repeated
            inlining already has been done. The default value is 130.

        mmaaxx--iinnlliinnee--iinnssnnss--rrttll
            For languages that use the RTL inliner (this happens at a later
            stage than tree inlining), you can set the maximum allowable size
            (counted in RTL instructions) for the RTL inliner with this
            parameter. The default value is 600.

        mmaaxx--uunnrroolllleedd--iinnssnnss
            The maximum number of instructions that a loop should have if that
            loop is unrolled, and if the loop is unrolled, it determines how
            many times the loop code is unrolled.

        hhoott--bbbb--ccoouunntt--ffrraaccttiioonn
            Select fraction of the maximal count of repetitions of basic block
            in program given basic block needs to have to be considered hot.

        hhoott--bbbb--ffrreeqquueennccyy--ffrraaccttiioonn
            Select fraction of the maximal frequency of executions of basic
            block in function given basic block needs to have to be considered
            hot
        ttrraacceerr--ddyynnaammiicc--ccoovveerraaggee
        ttrraacceerr--ddyynnaammiicc--ccoovveerraaggee--ffeeeeddbbaacckk
            This value is used to limit superblock formation once the given
            percentage of executed instructions is covered. This limits
            unnecessary code size expansion.
            The ttrraacceerr--ddyynnaammiicc--ccoovveerraaggee--ffeeeeddbbaacckk is used only when profile
            feedback is available. The real profiles (as opposed to statically
            estimated ones) are much less balanced allowing the threshold to
            be larger value.

        ttrraacceerr--mmaaxx--ccooddee--ggrroowwtthh
            Stop tail duplication once code growth has reached given
            percentage. This is rather hokey argument, as most of the
            duplicates will be eliminated later in cross jumping, so it may be
            set to much higher values than is the desired code growth.

        ttrraacceerr--mmiinn--bbrraanncchh--rraattiioo
            Stop reverse growth when the reverse probability of best edge is
            less than this threshold (in percent).
        ttrraacceerr--mmiinn--bbrraanncchh--rraattiioo
        ttrraacceerr--mmiinn--bbrraanncchh--rraattiioo--ffeeeeddbbaacckk
            Stop forward growth if the best edge do have probability lower
            than this threshold.
            Similarly to ttrraacceerr--ddyynnaammiicc--ccoovveerraaggee two values are present, one
            for compilation for profile feedback and one for compilation
            without. The value for compilation with profile feedback needs to
            be more conservative (higher) in order to make tracer effective.

        ggggcc--mmiinn--eexxppaanndd
            GCC uses a garbage collector to manage its own memory allocation.
            This parameter specifies the minimum percentage by which the
            garbage collector's heap should be allowed to expand between
            collections. Tuning this may improve compilation speed; it has no
            effect on code generation.
            The default is 30% + 70% * ( RAM/1GB ) with an upper bound of 100%
            when RAM >= 1GB. If ggeettrrlliimmiitt is available, the notion of " RAM "
            is the smallest of actual RAM, RLIMIT_RSS, RLIMIT_DATA and
            RLIMIT_AS. If GCC is not able to calculate RAM on a particular
            platform, the lower bound of 30% is used. Setting this parameter
            and ggggcc--mmiinn--hheeaappssiizzee to zero causes a full collection to occur at
            every opportunity. This is extremely slow, but can be useful for
            debugging.

        ggggcc--mmiinn--hheeaappssiizzee
            Minimum size of the garbage collector's heap before it begins
            bothering to collect garbage. The first collection occurs after
            the heap expands by ggggcc--mmiinn--eexxppaanndd% beyond ggggcc--mmiinn--hheeaappssiizzee.
            Again, tuning this may improve compilation speed, and has no
            effect on code generation.
            The default is RAM/8, with a lower bound of 4096 (four megabytes)
            and an upper bound of 131072 (128 megabytes). If ggeettrrlliimmiitt is
            available, the notion of " RAM " is the smallest of actual RAM,
            RLIMIT_RSS, RLIMIT_DATA and RLIMIT_AS. If GCC is not able to
            calculate RAM on a particular platform, the lower bound is used.
            Setting this parameter very large effectively disables garbage
            collection. Setting this parameter and ggggcc--mmiinn--eexxppaanndd to zero
            causes a full collection to occur at every opportunity.

    OOppttiioonnss CCoonnttrroolllliinngg tthhee PPrreepprroocceessssoorr

    These options control the C preprocessor, which is run on each C source
    file before actual compilation.

    If you use the --EE option, nothing is done except preprocessing. Some of
    these options make sense only together with --EE because they cause the
    preprocessor output to be unsuitable for actual compilation.

    You can use --WWpp,,option to bypass the compiler driver and pass option
    directly through to the preprocessor. If option contains commas, it is
    split into multiple options at the commas. However, many options are
    modified, translated or interpreted by the compiler driver before being
    passed to the preprocessor, and --WWpp forcibly bypasses this phase. The
    preprocessor's direct interface is undocumented and subject to change, so
    whenever possible you should avoid using --WWpp and let the driver handle the
    options instead.
    --DD name
        Predefine name as a macro, with definition 11.
    --DD name==definition
        Predefine name as a macro, with definition definition. There are no
        restrictions on the contents of definition, but if you are invoking
        the preprocessor from a shell or shell-like program you may need to
        use the shell's quoting syntax to protect characters such as spaces
        that have a meaning in the shell syntax.

    If you wish to define a function-like macro on the command line, write its
    argument list with surrounding parentheses before the equals sign (if
    any). Parentheses are meaningful to most shells, so you will need to quote
    the option. With sshh and ccsshh, --DD''name((args...))==definition'' works.

    --DD and --UU options are processed in the order they are given on the command
    line. All --iimmaaccrrooss file and --iinncclluuddee file options are processed after all
    --DD and --UU options.

    --UU name

    Cancel any previous definition of name, either built in or provided with a
    --DD option.

    --uunnddeeff

    Do not predefine any system-specific macros. The common predefined macros
    remain defined.

    --II dir

    Add the directory dir to the list of directories to be searched for header
    files. Directories named by --II are searched before the standard system
    include directories. If the directory dir is a standard system include
    directory, the option is ignored to ensure that the default search order
    for system directories and the special treatment of system headers are not
    defeated.

    --oo file

    Write output to file. This is the same as specifying file as the second
    non-option argument to ccpppp. ggcccc has a different interpretation of a second
    non-option argument, so you must use --oo to specify the output file.

    --WWaallll

    Turns on all optional warnings which are desirable for normal code. At
    present this is --WWccoommmmeenntt and --WWttrriiggrraapphhss. Note that many of the
    preprocessor's warnings are on by default and have no options to control
    them.

    --WWccoommmmeenntt
    --WWccoommmmeennttss

    Warn whenever a comment-start sequence //** appears in a //** comment, or
    whenever a backslash-newline appears in a //// comment. (Both forms have the
    same effect.)

    --WWttrriiggrraapphhss

    Warn if any trigraphs are encountered. This option used to take effect
    only if --ttrriiggrraapphhss was also specified, but now works independently.
    Warnings are not given for trigraphs within comments, as they do not
    affect the meaning of the program.

    --WWttrraaddiittiioonnaall

    Warn about certain constructs that behave differently in traditional and
    ISO C. Also warn about ISO C constructs that have no traditional C
    equivalent, and problematic constructs which should be avoided.

    --WWiimmppoorrtt

    Warn the first time ##iimmppoorrtt is used.

    --WWuunnddeeff

    Warn whenever an identifier which is not a macro is encountered in an ##iiff
    directive, outside of ddeeffiinneedd. Such identifiers are replaced with zero.

    --WWuunnuusseedd--mmaaccrrooss

    Warn about macros defined in the main file that are unused. A macro is
    used if it is expanded or tested for existence at least once. The
    preprocessor will also warn if the macro has not been used at the time it
    is redefined or undefined.

    Built-in macros, macros defined on the command line, and macros defined in
    include files are not warned about.

    NNoottee:: If a macro is actually used, but only used in skipped conditional
    blocks, then CPP will report it as unused. To avoid the warning in such a
    case, you might improve the scope of the macro's definition by, for
    example, moving it into the first skipped block. Alternatively, you could
    provide a dummy use with something like:

            #if defined the_macro_causing_the_warning
            #endif

    --WWeennddiiff--llaabbeellss

    Warn whenever an ##eellssee or an ##eennddiiff are followed by text. This usually
    happens in code of the form

            #if FOO
           ...
            #else FOO
           ...
            #endif FOO

    The second and third FFOOOO should be in comments, but often are not in older
    programs. This warning is on by default.

    --WWeerrrroorr

    Make all warnings into hard errors. Source code which triggers warnings
    will be rejected.

    --WWssyysstteemm--hheeaaddeerrss

    Issue warnings for code in system headers. These are normally unhelpful in
    finding bugs in your own code, therefore suppressed. If you are
    responsible for the system library, you may want to see them.

    --ww

    Suppress all warnings, including those which GNU CPP issues by default.

    --ppeeddaannttiicc

    Issue all the mandatory diagnostics listed in the C standard. Some of them
    are left out by default, since they trigger frequently on harmless code.

    --ppeeddaannttiicc--eerrrroorrss

    Issue all the mandatory diagnostics, and make all mandatory diagnostics
    into errors. This includes mandatory diagnostics that GCC issues without --
    ppeeddaannttiicc but treats as warnings.

    --MM

    Instead of outputting the result of preprocessing, output a rule suitable
    for mmaakkee describing the dependencies of the main source file. The
    preprocessor outputs one mmaakkee rule containing the object file name for
    that source file, a colon, and the names of all the included files,
    including those coming from --iinncclluuddee or --iimmaaccrrooss command line options.

    Unless specified explicitly (with --MMTT or --MMQQ), the object file name
    consists of the basename of the source file with any suffix replaced with
    object file suffix. If there are many included files then the rule is
    split into several lines using \\-newline. The rule has no commands.

    This option does not suppress the preprocessor's debug output, such as --
    ddMM. To avoid mixing such debug output with the dependency rules you should
    explicitly specify the dependency output file with --MMFF, or use an
    environment variable like DDEEPPEENNDDEENNCCIIEESS__OOUUTTPPUUTT. Debug output will still be
    sent to the regular output stream as normal.

    Passing --MM to the driver implies --EE, and suppresses warnings with an
    implicit --ww.

    --MMMM

    Like --MM but do not mention header files that are found in system header
    directories, nor header files that are included, directly or indirectly,
    from such a header.

    This implies that the choice of angle brackets or double quotes in an
    ##iinncclluuddee directive does not in itself determine whether that header will
    appear in --MMMM dependency output. This is a slight change in semantics from
    GCC versions 3.0 and earlier.

    --MMFF file

    When used with --MM or --MMMM, specifies a file to write the dependencies to.
    If no --MMFF switch is given the preprocessor sends the rules to the same
    place it would have sent preprocessed output.

    When used with the driver options --MMDD or --MMMMDD, --MMFF overrides the default
    dependency output file.

    --MMGG

    In conjunction with an option such as --MM requesting dependency generation,
    --MMGG assumes missing header files are generated files and adds them to the
    dependency list without raising an error. The dependency filename is taken
    directly from the ##iinncclluuddee directive without prepending any path. --MMGG also
    suppresses preprocessed output, as a missing header file renders this
    useless.

    This feature is used in automatic updating of makefiles.

    --MMPP

    This option instructs CPP to add a phony target for each dependency other
    than the main file, causing each to depend on nothing. These dummy rules
    work around errors mmaakkee gives if you remove header files without updating
    the Makefile to match.

    This is typical output:

            test.o: test.c test.h
            test.h:

    --MMTT target

    Change the target of the rule emitted by dependency generation. By default
    CPP takes the name of the main input file, including any path, deletes any
    file suffix such as ..cc, and appends the platform's usual object suffix.
    The result is the target.

    An --MMTT option will set the target to be exactly the string you specify. If
    you want multiple targets, you can specify them as a single argument to --
    MMTT, or use multiple --MMTT options.

    For example, --MMTT ''$$((oobbjjppffxx))ffoooo..oo'' might give

            $(objpfx)foo.o: foo.c

    --MMQQ target

    Same as --MMTT, but it quotes any characters which are special to Make. --MMQQ
    ''$$((oobbjjppffxx))ffoooo..oo'' gives

            $$(objpfx)foo.o: foo.c

    The default target is automatically quoted, as if it were given with --MMQQ.

    --MMDD

    --MMDD is equivalent to --MM --MMFF file, except that --EE is not implied. The
    driver determines file based on whether an --oo option is given. If it is,
    the driver uses its argument but with a suffix of .d, otherwise it take
    the basename of the input file and applies a .d suffix.

    If --MMDD is used in conjunction with --EE, any --oo switch is understood to
    specify the dependency output file (but @pxref{-MF}), but if used without
    --EE, each --oo is understood to specify a target object file.

    Since --EE is not implied, --MMDD can be used to generate a dependency output
    file as a side-effect of the compilation process.

    --MMMMDD

    Like --MMDD except mention only user header files, not system -header files.

    --xx cc
    --xx CC++++
    --xx oobbjjeeccttiivvee--cc
    --xx aasssseemmbblleerr--wwiitthh--ccpppp

    Specify the source language: C, C++, Objective-C, or assembly. This has
    nothing to do with standards conformance or extensions; it merely selects
    which base syntax to expect. If you give none of these options, cpp will
    deduce the language from the extension of the source file: ..cc, ..cccc, ..mm, or
    ..SS. Some other common extensions for C++ and assembly are also recognized.
    If cpp does not recognize the extension, it will treat the file as C; this
    is the most generic mode.

    NNoottee:: Previous versions of cpp accepted a --llaanngg option which selected both
    the language and the standards conformance level. This option has been
    removed, because it conflicts with the --ll option.

    --ssttdd==standard
    --aannssii

    Specify the standard to which the code should conform. Currently CPP knows
    about C and C++ standards; others may be added in the future.

    standard may be one of:
    iissoo99889999::11999900
    cc8899
        The ISO C standard from 1990. cc8899 is the customary shorthand for this
        version of the standard.
        The --aannssii option is equivalent to --ssttdd==cc8899.

    iissoo99889999::119999440099
        The 1990 C standard, as amended in 1994.
    iissoo99889999::11999999
    cc9999
    iissoo99889999::119999xx
    cc99xx
        The revised ISO C standard, published in December 1999. Before
        publication, this was known as C9X.

    ggnnuu8899
        The 1990 C standard plus GNU extensions. This is the default.
    ggnnuu9999
    ggnnuu99xx
        The 1999 C standard plus GNU extensions.

    CC++++ 9988
        The 1998 ISO C++ standard plus amendments.

    ggnnuu++++9988
        The same as --ssttdd==CC++++ 9988 plus GNU extensions. This is the default for
        C++ code.

    --II--

    Split the include path. Any directories specified with --II options before --
    II-- are searched only for headers requested with ##iinncclluuddee ""ffiillee""; they are
    not searched for ##iinncclluuddee <<ffiillee>>. If additional directories are specified
    with --II options after the --II--, those directories are searched for all
    ##iinncclluuddee directives.

    In addition, --II-- inhibits the use of the directory of the current file
    directory as the first search directory for ##iinncclluuddee ""ffiillee"".

    --nnoossttddiinncc

    Do not search the standard system directories for header files. Only the
    directories you have specified with --II options (and the directory of the
    current file, if appropriate) are searched.

    --nnoossttddiinnCC++++

    Do not search for header files in the C++ -specific standard directories,
    but do still search the other standard directories. (This option is used
    when building the C++ library.)

    --iinncclluuddee file

    Process file as if ##iinncclluuddee ""ffiillee"" appeared as the first line of the
    primary source file. However, the first directory searched for file is the
    preprocessor's working directory instead of the directory containing the
    main source file. If not found there, it is searched for in the remainder
    of the ##iinncclluuddee ""......"" search chain as normal.

    If multiple --iinncclluuddee options are given, the files are included in the
    order they appear on the command line.

    --iimmaaccrrooss file

    Exactly like --iinncclluuddee, except that any output produced by scanning file is
    thrown away. Macros it defines remain defined. This allows you to acquire
    all the macros from a header without also processing its declarations.

    All files specified by --iimmaaccrrooss are processed before all files specified
    by --iinncclluuddee.

    --iiddiirraafftteerr dir

    Search dir for header files, but do it after all directories specified
    with --II and the standard system directories have been exhausted. dir is
    treated as a system include directory.

    --iipprreeffiixx prefix

    Specify prefix as the prefix for subsequent --iiwwiitthhpprreeffiixx options. If the
    prefix represents a directory, you should include the final //.

    --iiwwiitthhpprreeffiixx dir
    --iiwwiitthhpprreeffiixxbbeeffoorree dir

    Append dir to the prefix specified previously with --iipprreeffiixx, and add the
    resulting directory to the include search path. --iiwwiitthhpprreeffiixxbbeeffoorree puts it
    in the same place --II would; --iiwwiitthhpprreeffiixx puts it where --iiddiirraafftteerr would.

    Use of these options is discouraged.

    --iissyysstteemm dir

    Search dir for header files, after all directories specified by --II but
    before the standard system directories. Mark it as a system directory, so
    that it gets the same special treatment as is applied to the standard
    system directories.

    --ffpprreepprroocceesssseedd

    Indicate to the preprocessor that the input file has already been
    preprocessed. This suppresses things like macro expansion, trigraph
    conversion, escaped newline splicing, and processing of most directives.
    The preprocessor still recognizes and removes comments, so that you can
    pass a file preprocessed with --CC to the compiler without problems. In this
    mode the integrated preprocessor is little more than a tokenizer for the
    front ends.

    --ffpprreepprroocceesssseedd is implicit if the input file has one of the extensions ..ii,
    ..iiii or ..mmii. These are the extensions that GCC uses for preprocessed files
    created by --ssaavvee--tteemmppss.

    --ffttaabbssttoopp==width

    Set the distance between tab stops. This helps the preprocessor report
    correct column numbers in warnings or errors, even if tabs appear on the
    line. If the value is less than 1 or greater than 100, the option is
    ignored. The default is 8.

    --ffnnoo--sshhooww--ccoolluummnn

    Do not print column numbers in diagnostics. This may be necessary if
    diagnostics are being scanned by a program that does not understand the
    column numbers, such as ddeejjaaggnnuu.

    --AA predicate==answer

    Make an assertion with the predicate predicate and answer answer. This
    form is preferred to the older form --AA predicate((answer)), which is still
    supported, because it does not use shell special characters.

    --AA --predicate==answer

    Cancel an assertion with the predicate predicate and answer answer.

    --ddCCHHAARRSS

    CHARS is a sequence of one or more of the following characters, and must
    not be preceded by a space. Other characters are interpreted by the
    compiler proper, or reserved for future versions of GCC, and so are
    silently ignored. If you specify characters whose behavior conflicts, the
    result is undefined.

    MM
        Instead of the normal output, generate a list of ##ddeeffiinnee directives
        for all the macros defined during the execution of the preprocessor,
        including predefined macros. This gives you a way of finding out what
        is predefined in your version of the preprocessor. Assuming you have
        no file foo.h, the command
                touch foo.h; cpp -dM foo.h
        will show all the predefined macros.

    DD
        Like MM except in two respects: it does not include the predefined
        macros, and it outputs both the ##ddeeffiinnee directives and the result of
        preprocessing. Both kinds of output go to the standard output file.

    NN
        Like DD, but emit only the macro names, not their expansions.

    II
        Output ##iinncclluuddee directives in addition to the result of preprocessing.

    --PP

    Inhibit generation of linemarkers in the output from the preprocessor.
    This might be useful when running the preprocessor on something that is
    not C code, and will be sent to a program which might be confused by the
    linemarkers.

    --CC

    Do not discard comments. All comments are passed through to the output
    file, except for comments in processed directives, which are deleted along
    with the directive.

    You should be prepared for side effects when using --CC; it causes the
    preprocessor to treat comments as tokens in their own right. For example,
    comments appearing at the start of what would be a directive line have the
    effect of turning that line into an ordinary source line, since the first
    token on the line is no longer a ##.

    --CCCC

    Do not discard comments, including during macro expansion. This is like --
    CC, except that comments contained within macros are also passed through to
    the output file where the macro is expanded.

    In addition to the side-effects of the --CC option, the --CCCC option causes
    all C++ -style comments inside a macro to be converted to C-style
    comments. This is to prevent later use of that macro from inadvertently
    commenting out the remainder of the source line.

    The --CCCC option is generally used to support lint comments.

    --ggcccc

    Define the macros __GNUC__, __GNUC_MINOR__ and __GNUC_PATCHLEVEL__. These
    are defined automatically when you use ggcccc --EE; you can turn them off in
    that case with --nnoo--ggcccc.

    --ttrraaddiittiioonnaall--ccpppp

    Try to imitate the behavior of old-fashioned C preprocessors, as opposed
    to ISO C preprocessors.

    --ttrriiggrraapphhss

    Process trigraph sequences. These are three-character sequences, all
    starting with ????, that are defined by ISO C to stand for single
    characters. For example, ????// stands for \\, so ''????//nn'' is a character
    constant for a newline. By default, GCC ignores trigraphs, but in
    standard-conforming modes it converts them. See the --ssttdd and --aannssii
    options.

    The nine trigraphs and their replacements are

            Trigraph:       ??(  ??)  ??<  ??>  ??=  ??/  ??'  ??!  ??-
            Replacement:      [    ]    {    }    #    \    ^    |    ~

    --rreemmaapp

    Enable special code to work around file systems that only permit very
    short file names, such as MS-DOS.

    ----hheellpp
    ----ttaarrggeett--hheellpp

    Print text describing all the command line options instead of
    preprocessing anything.

    --vv

    Verbose mode. Print out GNU CPP's version number at the beginning of
    execution, and report the final form of the include path.

    --HH

    Print the name of each header file used, in addition to other normal
    activities. Each name is indented to show how deep in the ##iinncclluuddee stack
    it is.

    --vveerrssiioonn
    ----vveerrssiioonn

    Print out GNU CPP's version number. With one dash, proceed to preprocess
    as normal. With two dashes, exit immediately.

    PPaassssiinngg OOppttiioonnss ttoo tthhee AAsssseemmbblleerr

    You can pass options to the assembler.
    --WWaa,,option
        Pass option as an option to the assembler. If option contains commas,
        it is split into multiple options at the commas.

    OOppttiioonnss ffoorr LLiinnkkiinngg

    These options come into play when the compiler links object files into an
    executable output file. They are meaningless if the compiler is not doing
    a link step.

    object-file-name
        A file name that does not end in a special recognized suffix is
        considered to name an object file or library. (Object files are
        distinguished from libraries by the linker according to the file
        contents.) If linking is done, these object files are used as input to
        the linker.
    --cc
    --SS
    --EE
        If any of these options is used, then the linker is not run, and
        object file names should not be used as arguments.
    --lllibrary
    --ll library
        Search the library named library when linking. (The second alternative
        with the library as a separate argument is only for POSIX compliance
        and is not recommended.)
        It makes a difference where in the command you write this option; the
        linker searches and processes libraries and object files in the order
        they are specified. Thus, ffoooo..oo --llzz bbaarr..oo searches library zz after
        file foo.o but before bar.o. If bar.o refers to functions in zz, those
        functions may not be loaded. Note that this means if you are
        creating a mixed-mode binary you will have to provide
        kernel32.lib and user32.lib as the last in the list of
        libraries to link to.
        The linker searches a standard list of directories for the library,
        which is actually a file named liblibrary.a. The linker then uses this
        file as if it had been specified precisely by name.
        The directories searched include several standard system directories
        plus any that you specify with --LL.
        Normally the files found this way are library files---archive files
        whose members are object files. The linker handles an archive file by
        scanning through it for members which define symbols that have so far
        been referenced but not defined. But if the file that is found is an
        ordinary object file, it is linked in the usual fashion. The only
        difference between using an --ll option and specifying a file name is
        that --ll surrounds library with lliibb and ..aa and searches several
        directories.

    --lloobbjjcc
        You need this special case of the --ll option in order to link an
        Objective-C program.

    --nnoossttaarrttffiilleess
        Do not use the standard system startup files when linking. The
        standard system libraries are used normally, unless --nnoossttddlliibb or --
        nnooddeeffaauullttlliibbss is used.

    --nnooddeeffaauullttlliibbss
        Do not use the standard system libraries when linking. Only the
        libraries you specify will be passed to the linker. The standard
        startup files are used normally, unless --nnoossttaarrttffiilleess is used. The
        compiler may generate calls to memcmp, memset, and memcpy for System V
        (and ISO C) environments or to bcopy and bzero for BSD environments.
        These entries are usually resolved by entries in libc. These entry
        points should be supplied through some other mechanism when this
        option is specified.

    --nnoossttddlliibb
        Do not use the standard system startup files or libraries when
        linking. No startup files and only the libraries you specify will be
        passed to the linker. The compiler may generate calls to memcmp,
        memset, and memcpy for System V (and ISO C) environments or to bcopy
        and bzero for BSD environments. These entries are usually resolved by
        entries in libc. These entry points should be supplied through some
        other mechanism when this option is specified.
        One of the standard libraries bypassed by --nnoossttddlliibb and --nnooddeeffaauullttlliibbss
        is libgcc.a, a library of internal subroutines that GCC uses to
        overcome shortcomings of particular machines, or special needs for
        some languages.
        In most cases, you need libgcc.a even when you want to avoid other
        standard libraries. In other words, when you specify --nnoossttddlliibb or --
        nnooddeeffaauullttlliibbss you should usually specify --llggcccc as well. This ensures
        that you have no unresolved references to internal GCC library
        subroutines. (For example, ____mmaaiinn, used to ensure C++ constructors
        will be called.)

    --ss
        Remove all symbol table and relocation information from the
        executable.

    --ssttaattiicc
        On systems that support dynamic linking, this prevents linking with
        the shared libraries. On other systems, this option has no effect.

    --sshhaarreedd
        Produce a shared object which can then be linked with other objects to
        form an executable. Not all systems support this option. For
        predictable results, you must also specify the same set of options
        that were used to generate code (--ffppiicc, --ffPPIICC, or model suboptions)
        when you specify this option.[1]
    --sshhaarreedd--lliibbggcccc
    --ssttaattiicc--lliibbggcccc
        On systems that provide libgcc as a shared library, these options
        force the use of either the shared or static version respectively. If
        no shared version of libgcc was built when the compiler was
        configured, these options have no effect.
        There are several situations in which an application should use the
        shared libgcc instead of the static version. The most common of these
        is when the application wishes to throw and catch exceptions across
        different shared libraries. In that case, each of the libraries as
        well as the application itself should use the shared libgcc.
        Therefore, the G++ and GCJ drivers automatically add --sshhaarreedd--lliibbggcccc
        whenever you build a shared library or a main executable, because C++
        and Java programs typically use exceptions, so this is the right thing
        to do.
        If, instead, you use the GCC driver to create shared libraries, you
        may find that they will not always be linked with the shared libgcc.
        If GCC finds, at its configuration time, that you have a GNU linker
        that does not support option ----eehh--ffrraammee--hhddrr, it will link the shared
        version of libgcc into shared libraries by default. Otherwise, it will
        take advantage of the linker and optimize away the linking with the
        shared version of libgcc, linking with the static version of libgcc by
        default. This allows exceptions to propagate through such shared
        libraries, without incurring relocation costs at library load time.
        However, if a library or main executable is supposed to throw or catch
        exceptions, you must link it using the G++ or GCJ driver, as
        appropriate for the languages used in the program, or using the option
        --sshhaarreedd--lliibbggcccc, such that it is linked with the shared libgcc.

    --ssyymmbboolliicc
        Bind references to global symbols when building a shared object. Warn
        about any unresolved references (unless overridden by the link editor
        option --XXlliinnkkeerr --zz --XXlliinnkkeerr ddeeffss). Only a few systems support this
        option.
    --XXlliinnkkeerr option
        Pass option as an option to the linker. You can use this to supply
        system-specific linker options which GCC does not know how to
        recognize.
        If you want to pass an option that takes an argument, you must use --
        XXlliinnkkeerr twice, once for the option and once for the argument. For
        example, to pass --aasssseerrtt ddeeffiinniittiioonnss, you must write --XXlliinnkkeerr --aasssseerrtt
        --XXlliinnkkeerr ddeeffiinniittiioonnss. It does not work to write --XXlliinnkkeerr ""--aasssseerrtt
        ddeeffiinniittiioonnss"", because this passes the entire string as a single
        argument, which is not what the linker expects.
    --WWll,,option
        Pass option as an option to the linker. If option contains commas, it
        is split into multiple options at the commas.
    --uu symbol
        Pretend the symbol symbol is undefined, to force linking of library
        modules to define it. You can use --uu multiple times with different
        symbols to force loading of additional library modules.

    OOppttiioonnss ffoorr DDiirreeccttoorryy SSeeaarrcchh

    These options specify directories to search for header files, for
    libraries and for parts of the compiler:
    --IIdir
        Add the directory dir to the head of the list of directories to be
        searched for header files. This can be used to override a system
        header file, substituting your own version, since these directories
        are searched before the system header file directories. However, you
        should not use this option to add directories that contain vendor-
        supplied system header files (use --iissyysstteemm for that). If you use more
        than one --II option, the directories are scanned in left-to-right
        order; the standard system directories come after.
        If a standard system include directory, or a directory specified with
        --iissyysstteemm, is also specified with --II, the --II option will be ignored.
        The directory will still be searched but as a system directory at its
        normal position in the system include chain. This is to ensure that
        GCC's procedure to fix buggy system headers and the ordering for the
        include_next directive are not inadvertently changed. If you really
        need to change the search order for system directories, use the --
        nnoossttddiinncc and/or --iissyysstteemm options.

    --II--
        Any directories you specify with --II options before the --II-- option are
        searched only for the case of ##iinncclluuddee ""file""; they are not searched
        for ##iinncclluuddee <<file>>.
        If additional directories are specified with --II options after the --II--
        , these directories are searched for all ##iinncclluuddee directives.
        (Ordinarily all --II directories are used this way.)
        In addition, the --II-- option inhibits the use of the current directory
        (where the current input file came from) as the first search directory
        for ##iinncclluuddee ""file"". There is no way to override this effect of --II--
        . With --II.. you can specify searching the directory which was current
        when the compiler was invoked. That is not exactly the same as what
        the preprocessor does by default, but it is often satisfactory.
        --II-- does not inhibit the use of the standard system directories for
        header files. Thus, --II-- and --nnoossttddiinncc are independent.
    --LLdir
        Add directory dir to the list of directories to be searched for --ll.
    --BBprefix
        This option specifies where to find the executables, libraries,
        include files, and data files of the compiler itself.
        The compiler driver program runs one or more of the subprograms cpp,
        cc1, as and ld. It tries prefix as a prefix for each program it tries
        to run, both with and without machine//version//.
        For each subprogram to be run, the compiler driver first tries the --
        BB prefix, if any. If that name is not found, or if --BB was not
        specified, the driver tries two standard prefixes, which are /usr/lib/
        gcc/ and /usr/local/lib/gcc-lib/. If neither of those results in a
        file name that is found, the unmodified program name is searched for
        using the directories specified in your PPAATTHH environment variable.
        The compiler will check to see if the path provided by the --BB refers
        to a directory, and if necessary it will add a directory separator
        character at the end of the path.
        --BB prefixes that effectively specify directory names also apply to
        libraries in the linker, because the compiler translates these options
        into --LL options for the linker. They also apply to includes files in
        the preprocessor, because the compiler translates these options into --
        iissyysstteemm options for the preprocessor. In this case, the compiler
        appends iinncclluuddee to the prefix.
        The run-time support file libgcc.a can also be searched for using the
        --BB prefix, if needed. If it is not found there, the two standard
        prefixes above are tried, and that is all. The file is left out of the
        link if it is not found by those means.
        Another way to specify a prefix much like the --BB prefix is to use the
        environment variable GGCCCC__EEXXEECC__PPRREEFFIIXX.
        As a special kludge, if the path provided by --BB is [dir/]stageN/
        , where N is a number in the range 0 to 9, then it will be replaced by
        [dir/]include. This is to help with boot-strapping the compiler.
    --ssppeeccss==file
        Process file after the compiler reads in the standard specs file, in
        order to override the defaults that the gcc driver program uses when
        determining what switches to pass to cc1, cc1plus, as, ld, etc. More
        than one --ssppeeccss==file can be specified on the command line, and they
        are processed in order, from left to right.

    SSppeecciiffyyiinngg TTaarrggeett MMaacchhiinnee aanndd CCoommppiilleerr VVeerrssiioonn

    The usual way to run GCC is to run the executable called gcc, or
    <machine>-gcc when cross-compiling, or <machine>-gcc-<version> to run a
    version other than the one that was installed last. Sometimes this is
    inconvenient, so GCC provides options that will switch to another cross-
    compiler or version.
    --bb machine
        The argument machine specifies the target machine for compilation.
        The value to use for machine is the same as was specified as the
        machine type when configuring GCC as a cross-compiler. For example, if
        a cross-compiler was configured with ccoonnffiigguurree ii338866vv, meaning to
        compile for an 80386 running System V, then you would specify --bb ii338866vv
        to run that cross compiler.
    --VV version
        The argument version specifies which version of GCC to run. This is
        useful when multiple versions are installed. For example, version
        might be 22..00, meaning to run GCC version 2.0.

    The --VV and --bb options work by running the <machine>-gcc-<version>
    executable, so there's no real reason to use them if you can just run that
    directly.

    HHaarrddwwaarree MMooddeellss aanndd CCoonnffiigguurraattiioonnss

    Earlier we discussed the standard option --bb which chooses among different
    installed compilers for completely different target machines, such as VAX
    vs. 68000 vs. 80386.

    In addition, each of these target machine types can have its own special
    options, starting with --mm, to choose among various hardware models or
    configurations---for example, 68010 vs 68020, floating coprocessor or
    none. A single installed version of the compiler can compile for any model
    or configuration, according to the options specified.

    Some configurations of the compiler also support additional special
    options, usually for compatibility with other compilers on the same
    platform.

    These options are defined by the macro TTAARRGGEETT__SSWWIITTCCHHEESS in the machine
    description. The default for the options is also defined by that macro,
    which enables you to change the defaults.

    Intel 386 and AMD x86-64 Options

    These --mm options are defined for the i386 and x86-64 family of computers:

    ssssee
        Use scalar floating point instructions present in the SSE instruction
        set. This instruction set is supported by Pentium3 and newer chips, in
        the AMD line by Athlon-4, Athlon-xp and Athlon-mp chips. The earlier
        version of SSE instruction set supports only single precision
        arithmetics, thus the double and extended precision arithmetics is
        still done using 387. Later version, present only in Pentium4 and the
        future AMD x86-64 chips supports double precision arithmetics too.
        For i387 you need to use --mmaarrcchh==cpu-type, --mmssssee or --mmssssee22 switches to
        enable SSE extensions and make this option effective. For x86-64
        compiler, these extensions are enabled by default.
        The resulting code should be considerably faster in majority of cases
        and avoid the numerical instability problems of 387 code, but may
        break some existing code that expects temporaries to be 80bit.
        This is the default choice for x86-64 compiler.

    ssssee,,338877
        Attempt to utilize both instruction sets at once. This effectively
        double the amount of available registers and on chips with separate
        execution units for 387 and SSE the execution resources too. Use this
        option with care, as it is still experimental, because gcc register
        allocator does not model separate functional units well resulting in
        instable performance.

    --mmaassmm==dialect

    Output asm instructions using selected dialect. Supported choices are
    iinntteell or aatttt (the default one).

    --mmiieeeeee--ffpp
    --mmnnoo--iieeeeee--ffpp

    Control whether or not the compiler uses IEEE floating point comparisons.
    These handle correctly the case where the result of a comparison is
    unordered.

    --mmssoofftt--ffllooaatt

    Generate output containing library calls for floating point. WWaarrnniinngg:: the
    requisite libraries are not part of GCC. Normally the facilities of the
    machine's usual C compiler are used, but this can't be done directly in
    cross-compilation. You must make your own arrangements to provide suitable
    library functions for cross-compilation.

    On machines where a function returns floating point results in the 80387
    register stack, some floating point opcodes may be emitted even if --mmssoofftt--
    ffllooaatt is used.

    --mmnnoo--ffpp--rreett--iinn--338877

    Do not use the FPU registers for return values of functions.

    The usual calling convention has functions return values of types ffllooaatt
    and ddoouubbllee in an FPU register, even if there is no FPU. The idea is that
    the operating system should emulate an FPU.

    The option --mmnnoo--ffpp--rreett--iinn--338877 causes such values to be returned in
    ordinary CPU registers instead.

    --mmnnoo--ffaannccyy--mmaatthh--338877

    Some 387 emulators do not support the ssiinn, ccooss and ssqqrrtt instructions for
    the 387. Specify this option to avoid generating those instructions. This
    option is the default on FreeBSD, OpenBSD and NetBSD. This option is
    overridden when --mmaarrcchh indicates that the target cpu will always have an
    FPU and so the instruction will not need emulation. As of revision 2.6.1,
    these instructions are not generated unless you also use the --ffuunnssaaffee--
    mmaatthh--ooppttiimmiizzaattiioonnss switch.

    --mmaalliiggnn--ddoouubbllee
    --mmnnoo--aalliiggnn--ddoouubbllee

    Control whether GCC aligns ddoouubbllee, lloonngg ddoouubbllee, and lloonngg lloonngg variables on
    a two word boundary or a one word boundary. Aligning ddoouubbllee variables on a
    two word boundary will produce code that runs somewhat faster on a PPeennttiiuumm
    at the expense of more memory.

    WWaarrnniinngg:: if you use the --mmaalliiggnn--ddoouubbllee switch, structures containing the
    above types will be aligned differently than the published application
    binary interface specifications for the 386 and will not be binary
    compatible with structures in code compiled without that switch.

    --mm112288bbiitt--lloonngg--ddoouubbllee

    Control the size of lloonngg ddoouubbllee type. i386 application binary interface
    specify the size to be 12 bytes, while modern architectures (Pentium and
    newer) prefer lloonngg ddoouubbllee aligned to 8 or 16 byte boundary. This is
    impossible to reach with 12 byte long doubles in the array accesses.

    WWaarrnniinngg:: if you use the --mm112288bbiitt--lloonngg--ddoouubbllee switch, the structures and
    arrays containing lloonngg ddoouubbllee will change their size as well as function
    calling convention for function taking lloonngg ddoouubbllee will be modified.

    --mm9966bbiitt--lloonngg--ddoouubbllee

    Set the size of lloonngg ddoouubbllee to 96 bits as required by the i386 application
    binary interface. This is the default.

    --mmssvvrr33--sshhlliibb
    --mmnnoo--ssvvrr33--sshhlliibb

    Control whether GCC places uninitialized local variables into the bbssss or
    ddaattaa segments. --mmssvvrr33--sshhlliibb places them into bbssss. These options are
    meaningful only on System V Release 3.

    --mmrrttdd

    Use a different function-calling convention, in which functions that take
    a fixed number of arguments return with the rreett num instruction, which
    pops their arguments while returning. This saves one instruction in the
    caller since there is no need to pop the arguments there.

    You can specify that an individual function is called with this calling
    sequence with the function attribute ssttddccaallll. You can also override the --
    mmrrttdd option by using the function attribute ccddeeccll.

    WWaarrnniinngg:: this calling convention is incompatible with the one normally
    used on Unix, so you cannot use it if you need to call libraries compiled
    with the Unix compiler.

    Also, you must provide function prototypes for all functions that take
    variable numbers of arguments (including pprriinnttff); otherwise incorrect code
    will be generated for calls to those functions.

    In addition, seriously incorrect code will result if you call a function
    with too many arguments. (Normally, extra arguments are harmlessly
    ignored.)

    --mmrreeggppaarrmm==num

    Control how many registers are used to pass integer arguments. By default,
    no registers are used to pass arguments, and at most 3 registers can be
    used. You can control this behavior for a specific function by using the
    function attribute rreeggppaarrmm.

    WWaarrnniinngg:: if you use this switch, and num is nonzero, then you must build
    all modules with the same value, including any libraries. This includes
    the system libraries and startup modules.

    --mmpprreeffeerrrreedd--ssttaacckk--bboouunnddaarryy==num

    Attempt to keep the stack boundary aligned to a 2 raised to num byte
    boundary. If --mmpprreeffeerrrreedd--ssttaacckk--bboouunnddaarryy is not specified, the default is 4
    (16 bytes or 128 bits), except when optimizing for code size (--OOss), in
    which case the default is the minimum correct alignment (4 bytes for x86,
    and 8 bytes for x86-64).

    On Pentium and PentiumPro, ddoouubbllee and lloonngg ddoouubbllee values should be aligned
    to an 8 byte boundary (see --mmaalliiggnn--ddoouubbllee) or suffer significant run time
    performance penalties. On Pentium III, the Streaming SIMD Extension ( SSE
    ) data type ____mm112288 suffers similar penalties if it is not 16 byte aligned.

    To ensure proper alignment of this values on the stack, the stack boundary
    must be as aligned as that required by any value stored on the stack.
    Further, every function must be generated such that it keeps the stack
    aligned. Thus calling a function compiled with a higher preferred stack
    boundary from a function compiled with a lower preferred stack boundary
    will most likely misalign the stack. It is recommended that libraries that
    use callbacks always use the default setting.

    This extra alignment does consume extra stack space, and generally
    increases code size. Code that is sensitive to stack space usage, such as
    embedded systems and operating system kernels, may want to reduce the
    preferred alignment to --mmpprreeffeerrrreedd--ssttaacckk--bboouunnddaarryy==22.

    --mmmmmmxx
    --mmnnoo--mmmmxx
    --mmssssee
    --mmnnoo--ssssee
    --mmssssee22
    --mmnnoo--ssssee22
    --mm33ddnnooww
    --mmnnoo--33ddnnooww

    These switches enable or disable the use of built-in functions that allow
    direct access to the MMX, SSE and 3Dnow extensions of the instruction set.

    To have SSE/SSE2 instructions generated automatically from floating-point
    code, see --mmffppmmaatthh==ssssee.

    --mmppuusshh--aarrggss
    --mmnnoo--ppuusshh--aarrggss

    Use PUSH operations to store outgoing parameters. This method is shorter
    and usually equally fast as method using SUB/MOV operations and is enabled
    by default. In some cases disabling it may improve performance because of
    improved scheduling and reduced dependencies.

    --mmaaccccuummuullaattee--oouuttggooiinngg--aarrggss

    If enabled, the maximum amount of space required for outgoing arguments
    will be computed in the function prologue. This is faster on most modern
    CPUs because of reduced dependencies, improved scheduling and reduced
    stack usage when preferred stack boundary is not equal to 2. The drawback
    is a notable increase in code size. This switch implies --mmnnoo--ppuusshh--aarrggss.

    --mmtthhrreeaaddss

    Support thread-safe exception handling on MMiinnggww3322. Code that relies on
    thread-safe exception handling must compile and link all code with the --
    mmtthhrreeaaddss option. When compiling, --mmtthhrreeaaddss defines --DD__MMTT; when linking, it
    links in a special thread helper library --llmmiinnggwwtthhrrdd which cleans up per
    thread exception handling data.

    --mmnnoo--aalliiggnn--ssttrriinnggooppss

    Do not align destination of inlined string operations. This switch reduces
    code size and improves performance in case the destination is already
    aligned, but gcc don't know about it.

    --mmiinnlliinnee--aallll--ssttrriinnggooppss

    By default GCC inlines string operations only when destination is known to
    be aligned at least to 4 byte boundary. This enables more inlining,
    increase code size, but may improve performance of code that depends on
    fast memcpy, strlen and memset for short lengths.

    --mmoommiitt--lleeaaff--ffrraammee--ppooiinntteerr

    Don't keep the frame pointer in a register for leaf functions. This avoids
    the instructions to save, set up and restore frame pointers and makes an
    extra register available in leaf functions. The option --ffoommiitt--ffrraammee--
    ppooiinntteerr removes the frame pointer for all functions which might make
    debugging harder.

    These --mm switches are supported in addition to the above on AMD x86-64
    processors in 64-bit environments.

    --mm3322
    --mm6644

    Generate code for a 32-bit or 64-bit environment. The 32-bit environment
    sets int, long and pointer to 32 bits and generates code that runs on any
    i386 system. The 64-bit environment sets int to 32 bits and long and
    pointer to 64 bits and generates code for AMD's x86-64 architecture.

    --mmnnoo--rreedd--zzoonnee

    Do not use a so called red zone for x86-64 code. The red zone is mandated
    by the x86-64 ABI, it is a 128-byte area beyond the location of the stack
    pointer that will not be modified by signal or interrupt handlers and
    therefore can be used for temporary data without adjusting the stack
    pointer. The flag --mmnnoo--rreedd--zzoonnee disables this red zone.

    --mmccmmooddeell==ssmmaallll

    Generate code for the small code model: the program and its symbols must
    be linked in the lower 2 GB of the address space. Pointers are 64 bits.
    Programs can be statically or dynamically linked. This is the default code
    model.

    --mmccmmooddeell==kkeerrnneell

    Generate code for the kernel code model. The kernel runs in the negative 2
    GB of the address space. This model has to be used for Linux kernel code.

    --mmccmmooddeell==mmeeddiiuumm

    Generate code for the medium model: The program is linked in the lower 2
    GB of the address space but symbols can be located anywhere in the address
    space. Programs can be statically or dynamically linked, but building of
    shared libraries are not supported with the medium model.

    --mmccmmooddeell==llaarrggee

    Generate code for the large model: This model makes no assumptions about
    addresses and sizes of sections. Currently GCC does not implement this
    model.

    OOppttiioonnss ffoorr CCooddee GGeenneerraattiioonn CCoonnvveennttiioonnss

    These machine-independent options control the interface conventions used
    in code generation.

    Most of them have both positive and negative forms; the negative form of --
    ffffoooo would be --ffnnoo--ffoooo. In the table below, only one of the forms is
    listed---the one which is not the default. You can figure out the other
    form by either removing nnoo-- or adding it.

    --ffbboouunnddss--cchheecckk
        For front-ends that support it, generate additional code to check that
        indices used to access arrays are within the declared range. This is
        currently only supported by the Java and Fortran 77 front-ends, where
        this option defaults to true and false respectively.

    --ffttrraappvv
        This option generates traps for signed overflow on addition,
        subtraction, multiplication operations.

    --ffeexxcceeppttiioonnss
        Enable exception handling. Generates extra code needed to propagate
        exceptions. For some targets, this implies GCC will generate frame
        unwind information for all functions, which can produce significant
        data size overhead, although it does not affect execution. If you do
        not specify this option, GCC will enable it by default for languages
        like C++ which normally require exception handling, and disable it for
        languages like C that do not normally require it. However, you may
        need to enable this option when compiling C code that needs to
        interoperate properly with exception handlers written in C++. You may
        also wish to disable this option if you are compiling older C++
        programs that don't use exception handling.

    --ffnnoonn--ccaallll--eexxcceeppttiioonnss
        Generate code that allows trapping instructions to throw exceptions.
        Note that this requires platform-specific runtime support that does
        not exist everywhere. Moreover, it only allows trapping instructions
        to throw exceptions, i.e. memory references or floating point
        instructions. It does not allow exceptions to be thrown from arbitrary
        signal handlers such as SSIIGGAALLRRMM.

    --ffuunnwwiinndd--ttaabblleess
        Similar to --ffeexxcceeppttiioonnss, except that it will just generate any needed
        static data, but will not affect the generated code in any other way.
        You will normally not enable this option; instead, a language
        processor that needs this handling would enable it on your behalf.

    --ffaassyynncchhrroonnoouuss--uunnwwiinndd--ttaabblleess
        Generate unwind table in dwarf2 format, if supported by target
        machine. The table is exact at each instruction boundary, so it can be
        used for stack unwinding from asynchronous events (such as debugger or
        garbage collector).

    --ffppcccc--ssttrruucctt--rreettuurrnn
        Return "short" ssttrruucctt and uunniioonn values in memory like longer ones,
        rather than in registers. This convention is less efficient, but it
        has the advantage of allowing intercallability between GCC-compiled
        files and files compiled with other compilers, particularly the
        Portable C Compiler (pcc).
        The precise convention for returning structures in memory depends on
        the target configuration macros.
        Short structures and unions are those whose size and alignment match
        that of some integer type.
        WWaarrnniinngg:: code compiled with the --ffppcccc--ssttrruucctt--rreettuurrnn switch is not
        binary compatible with code compiled with the --ffrreegg--ssttrruucctt--rreettuurrnn
        switch. Use it to conform to a non-default application binary
        interface.

    --ffrreegg--ssttrruucctt--rreettuurrnn
        Return ssttrruucctt and uunniioonn values in registers when possible. This is
        more efficient for small structures than --ffppcccc--ssttrruucctt--rreettuurrnn.
        If you specify neither --ffppcccc--ssttrruucctt--rreettuurrnn nor --ffrreegg--ssttrruucctt--rreettuurrnn,
        GCC defaults to whichever convention is standard for the target. If
        there is no standard convention, GCC defaults to --ffppcccc--ssttrruucctt--rreettuurrnn,
        except on targets where GCC is the principal compiler. In those cases,
        we can choose the standard, and we chose the more efficient register
        return alternative.
        WWaarrnniinngg:: code compiled with the --ffrreegg--ssttrruucctt--rreettuurrnn switch is not
        binary compatible with code compiled with the --ffppcccc--ssttrruucctt--rreettuurrnn
        switch. Use it to conform to a non-default application binary
        interface.

    --ffsshhoorrtt--eennuummss
        Allocate to an eennuumm type only as many bytes as it needs for the
        declared range of possible values. Specifically, the eennuumm type will be
        equivalent to the smallest integer type which has enough room.
        WWaarrnniinngg:: the --ffsshhoorrtt--eennuummss switch causes GCC to generate code that is
        not binary compatible with code generated without that switch. Use it
        to conform to a non-default application binary interface.

    --ffsshhoorrtt--ddoouubbllee
        Use the same size for ddoouubbllee as for ffllooaatt.
        WWaarrnniinngg:: the --ffsshhoorrtt--ddoouubbllee switch causes GCC to generate code that is
        not binary compatible with code generated without that switch. Use it
        to conform to a non-default application binary interface.

    --ffsshhoorrtt--wwcchhaarr
        Override the underlying type for wwcchhaarr__tt to be sshhoorrtt uunnssiiggnneedd iinntt
        instead of the default for the target. This option is useful for
        building programs to run under WINE.
        WWaarrnniinngg:: the --ffsshhoorrtt--wwcchhaarr switch causes GCC to generate code that is
        not binary compatible with code generated without that switch. Use it
        to conform to a non-default application binary interface.

    --ffsshhaarreedd--ddaattaa
        Requests that the data and non-ccoonnsstt variables of this compilation be
        shared data rather than private data. The distinction makes sense only
        on certain operating systems, where shared data is shared between
        processes running the same program, while private data exists in one
        copy per process.

    --ffnnoo--ccoommmmoonn
        In C, allocate even uninitialized global variables in the data section
        of the object file, rather than generating them as common blocks. This
        has the effect that if the same variable is declared (without eexxtteerrnn)
        in two different compilations, you will get an error when you link
        them. The only reason this might be useful is if you wish to verify
        that the program will work on other systems which always work this
        way.

    --ffnnoo--iiddeenntt
        Ignore the ##iiddeenntt directive.

    --ffnnoo--ggnnuu--lliinnkkeerr
        Do not output global initializations (such as C++ constructors and
        destructors) in the form used by the GNU linker (on systems where the
        GNU linker is the standard method of handling them). Use this option
        when you want to use a non-GNU linker, which also requires using the
        ccoolllleecctt22 program to make sure the system linker includes constructors
        and destructors. (ccoolllleecctt22 is included in the GCC distribution.) For
        systems which must use ccoolllleecctt22, the compiler driver ggcccc is configured
        to do this automatically.

    --ffiinnhhiibbiitt--ssiizzee--ddiirreeccttiivvee
        Don't output a ..ssiizzee assembler directive, or anything else that would
        cause trouble if the function is split in the middle, and the two
        halves are placed at locations far apart in memory. This option is
        used when compiling crtstuff.c; you should not need to use it for
        anything else.

    --ffvveerrbboossee--aassmm
        Put extra commentary information in the generated assembly code to
        make it more readable. This option is generally only of use to those
        who actually need to read the generated assembly code (perhaps while
        debugging the compiler itself).
        --ffnnoo--vveerrbboossee--aassmm, the default, causes the extra information to be
        omitted and is useful when comparing two assembler files.

    --ffvvoollaattiillee
        Consider all memory references through pointers to be volatile.

    --ffvvoollaattiillee--gglloobbaall
        Consider all memory references to extern and global data items to be
        volatile. GCC does not consider static data items to be volatile
        because of this switch.

    --ffvvoollaattiillee--ssttaattiicc
        Consider all memory references to static data to be volatile.

    --ffppiicc
        Generate position-independent code ( PIC ) suitable for use in a
        shared library, if supported for the target machine. Such code
        accesses all constant addresses through a global offset table ( GOT ).
        The dynamic loader resolves the GOT entries when the program starts
        (the dynamic loader is not part of GCC ; it is part of the operating
        system). If the GOT size for the linked executable exceeds a machine-
        specific maximum size, you get an error message from the linker
        indicating that --ffppiicc does not work; in that case, recompile with --
        ffPPIICC instead. (These maximums are 16k on the m88k, 8k on the SPARC,
        and 32k on the m68k and RS/6000. The 386 has no such limit.)
        Position-independent code requires special support, and therefore
        works only on certain machines. For the 386, GCC supports PIC for
        System V but not for the Sun 386i. Code generated for the IBM RS/6000
        is always position-independent.

    --ffPPIICC
        If supported for the target machine, emit position-independent code,
        suitable for dynamic linking and avoiding any limit on the size of the
        global offset table. This option makes a difference on the m68k, m88k,
        and the SPARC.
        Position-independent code requires special support, and therefore
        works only on certain machines.
    --ffffiixxeedd--reg
        Treat the register named reg as a fixed register; generated code
        should never refer to it (except perhaps as a stack pointer, frame
        pointer or in some other fixed role).
        reg must be the name of a register. The register names accepted are
        machine-specific and are defined in the RREEGGIISSTTEERR__NNAAMMEESS macro in the
        machine description macro file.
        This flag does not have a negative form, because it specifies a three-
        way choice.
    --ffccaallll--uusseedd--reg
        Treat the register named reg as an allocable register that is
        clobbered by function calls. It may be allocated for temporaries or
        variables that do not live across a call. Functions compiled this way
        will not save and restore the register reg.
        It is an error to used this flag with the frame pointer or stack
        pointer. Use of this flag for other registers that have fixed
        pervasive roles in the machine's execution model will produce
        disastrous results.
        This flag does not have a negative form, because it specifies a three-
        way choice.
    --ffccaallll--ssaavveedd--reg
        Treat the register named reg as an allocable register saved by
        functions. It may be allocated even for temporaries or variables that
        live across a call. Functions compiled this way will save and restore
        the register reg if they use it.
        It is an error to used this flag with the frame pointer or stack
        pointer. Use of this flag for other registers that have fixed
        pervasive roles in the machine's execution model will produce
        disastrous results.
        A different sort of disaster will result from the use of this flag for
        a register in which function values may be returned.
        This flag does not have a negative form, because it specifies a three-
        way choice.

    --ffppaacckk--ssttrruucctt
        Pack all structure members together without holes.
        WWaarrnniinngg:: the --ffppaacckk--ssttrruucctt switch causes GCC to generate code that is
        not binary compatible with code generated without that switch.
        Additionally, it makes the code suboptimal. Use it to conform to a
        non-default application binary interface.

    --ffiinnssttrruummeenntt--ffuunnccttiioonnss
        Generate instrumentation calls for entry and exit to functions. Just
        after function entry and just before function exit, the following
        profiling functions will be called with the address of the current
        function and its call site. (On some platforms,
        ____bbuuiillttiinn__rreettuurrnn__aaddddrreessss does not work beyond the current function, so
        the call site information may not be available to the profiling
        functions otherwise.)
                void __cyg_profile_func_enter (void *this_fn,
                                               void *call_site);
                void __cyg_profile_func_exit  (void *this_fn,
                                               void *call_site);
        The first argument is the address of the start of the current
        function, which may be looked up exactly in the symbol table.
        This instrumentation is also done for functions expanded inline in
        other functions. The profiling calls will indicate where,
        conceptually, the inline function is entered and exited. This means
        that addressable versions of such functions must be available. If all
        your uses of a function are expanded inline, this may mean an
        additional expansion of code size. If you use eexxtteerrnn iinnlliinnee in your C
        code, an addressable version of such functions must be provided. (This
        is normally the case anyways, but if you get lucky and the optimizer
        always expands the functions inline, you might have gotten away
        without providing static copies.)
        A function may be given the attribute nnoo__iinnssttrruummeenntt__ffuunnccttiioonn, in which
        case this instrumentation will not be done. This can be used, for
        example, for the profiling functions listed above, high-priority
        interrupt routines, and any functions from which the profiling
        functions cannot safely be called (perhaps signal handlers, if the
        profiling routines generate output or allocate memory).

    --ffssttaacckk--cchheecckk
        Generate code to verify that you do not go beyond the boundary of the
        stack. You should specify this flag if you are running in an
        environment with multiple threads, but only rarely need to specify it
        in a single-threaded environment since stack overflow is automatically
        detected on nearly all systems if there is only one stack.
        Note that this switch does not actually cause checking to be done; the
        operating system must do that. The switch causes generation of code to
        ensure that the operating system sees the stack being extended.
    --ffssttaacckk--lliimmiitt--rreeggiisstteerr==reg
    --ffssttaacckk--lliimmiitt--ssyymmbbooll==sym
    --ffnnoo--ssttaacckk--lliimmiitt
        Generate code to ensure that the stack does not grow beyond a certain
        value, either the value of a register or the address of a symbol. If
        the stack would grow beyond the value, a signal is raised. For most
        targets, the signal is raised before the stack overruns the boundary,
        so it is possible to catch the signal without taking special
        precautions.
        For instance, if the stack starts at absolute address 00xx8800000000000000 and
        grows downwards, you can use the flags --ffssttaacckk--lliimmiitt--
        ssyymmbbooll==____ssttaacckk__lliimmiitt and --WWll,,----ddeeffssyymm,,____ssttaacckk__lliimmiitt==00xx77ffffee00000000 to
        enforce a stack limit of 128KB. Note that this may only work with the
        GNU linker.
    --ffaarrgguummeenntt--aalliiaass
    --ffaarrgguummeenntt--nnooaalliiaass
    --ffaarrgguummeenntt--nnooaalliiaass--gglloobbaall
        Specify the possible relationships among parameters and between
        parameters and global data.
        --ffaarrgguummeenntt--aalliiaass specifies that arguments (parameters) may alias each
        other and may alias global storage.--ffaarrgguummeenntt--nnooaalliiaass specifies that
        arguments do not alias each other, but may alias global storage.--
        ffaarrgguummeenntt--nnooaalliiaass--gglloobbaall specifies that arguments do not alias each
        other and do not alias global storage.
        Each language will automatically use whatever option is required by
        the language standard. You should not need to use these options
        yourself.

    --fflleeaaddiinngg--uunnddeerrssccoorree
        This option and its counterpart, --ffnnoo--lleeaaddiinngg--uunnddeerrssccoorree, forcibly
        change the way C symbols are represented in the object file. One use
        is to help link with legacy assembly code.
        WWaarrnniinngg:: the --fflleeaaddiinngg--uunnddeerrssccoorree switch causes GCC to generate code
        that is not binary compatible with code generated without that switch.
        Use it to conform to a non-default application binary interface. Not
        all targets provide complete support for this switch.
    --ffttllss--mmooddeell==model
        Alter the thread-local storage model to be used. The model argument
        should be one of gglloobbaall--ddyynnaammiicc, llooccaall--ddyynnaammiicc, iinniittiiaall--eexxeecc or llooccaall--
        eexxeecc.
        The default without --ffppiicc is iinniittiiaall--eexxeecc; with --ffppiicc the default is
        gglloobbaall--ddyynnaammiicc.

  EENNVVIIRROONNMMEENNTT

    This section describes several environment variables that affect how GCC
    operates. Some of them work by specifying directories or prefixes to use
    when searching for various kinds of files. Some are used to specify other
    aspects of the compilation environment.

    Note that you can also specify places to search using options such as --BB,
    --II and --LL. These take precedence over places specified using environment
    variables, which in turn take precedence over those specified by the
    configuration of GCC.

    LLAANNGG
    LLCC__CCTTYYPPEE
    LLCC__MMEESSSSAAGGEESS
    LLCC__AALLLL
        These environment variables control the way that GCC uses localization
        information that allow GCC to work with different national
        conventions. GCC inspects the locale categories LLCC__CCTTYYPPEE and
        LLCC__MMEESSSSAAGGEESS if it has been configured to do so. These locale
        categories can be set to any value supported by your installation. A
        typical value is eenn__UUKK for English in the United Kingdom.
        The LLCC__CCTTYYPPEE environment variable specifies character classification.
        GCC uses it to determine the character boundaries in a string; this is
        needed for some multibyte encodings that contain quote and escape
        characters that would otherwise be interpreted as a string end or
        escape.
        The LLCC__MMEESSSSAAGGEESS environment variable specifies the language to use in
        diagnostic messages.
        If the LLCC__AALLLL environment variable is set, it overrides the value of
        LLCC__CCTTYYPPEE and LLCC__MMEESSSSAAGGEESS ; otherwise, LLCC__CCTTYYPPEE and LLCC__MMEESSSSAAGGEESS default
        to the value of the LLAANNGG environment variable. If none of these
        variables are set, GCC defaults to traditional C English behavior.

    TTMMPPDDIIRR
        If TTMMPPDDIIRR is set, it specifies the directory to use for temporary
        files. GCC uses temporary files to hold the output of one stage of
        compilation which is to be used as input to the next stage: for
        example, the output of the preprocessor, which is the input to the
        compiler proper.

    GGCCCC__EEXXEECC__PPRREEFFIIXX
        If GGCCCC__EEXXEECC__PPRREEFFIIXX is set, it specifies a prefix to use in the names
        of the subprograms executed by the compiler. No slash is added when
        this prefix is combined with the name of a subprogram, but you can
        specify a prefix that ends with a slash if you wish.
        If GGCCCC__EEXXEECC__PPRREEFFIIXX is not set, GCC will attempt to figure out an
        appropriate prefix to use based on the pathname it was invoked with.
        If GCC cannot find the subprogram using the specified prefix, it tries
        looking in the usual places for the subprogram.
        The default value of GGCCCC__EEXXEECC__PPRREEFFIIXX is prefix/lib/gcc-lib/ where
        prefix is the value of pprreeffiixx when you ran the configure script.
        Other prefixes specified with --BB take precedence over this prefix.
        This prefix is also used for finding files such as crt0.o that are
        used for linking.
        In addition, the prefix is used in an unusual way in finding the
        directories to search for header files. For each of the standard
        directories whose name normally begins with //uussrr//llooccaall//lliibb//ggcccc--lliibb
        (more precisely, with the value of GGCCCC__IINNCCLLUUDDEE__DDIIRR ), GCC tries
        replacing that beginning with the specified prefix to produce an
        alternate directory name. Thus, with --BBffoooo//, GCC will search foo/bar
        where it would normally search /usr/local/lib/bar. These alternate
        directories are searched first; the standard directories come next.

    CCOOMMPPIILLEERR__PPAATTHH
        The value of CCOOMMPPIILLEERR__PPAATTHH is a colon-separated list of directories,
        much like PPAATTHH. GCC tries the directories thus specified when
        searching for subprograms, if it can't find the subprograms using
        GGCCCC__EEXXEECC__PPRREEFFIIXX.

    LLIIBBRRAARRYY__PPAATTHH
        The value of LLIIBBRRAARRYY__PPAATTHH is a colon-separated list of directories,
        much like PPAATTHH. When configured as a native compiler, GCC tries the
        directories thus specified when searching for special linker files, if
        it can't find them using GGCCCC__EEXXEECC__PPRREEFFIIXX. Linking using GCC also uses
        these directories when searching for ordinary libraries for the --
        ll option (but directories specified with --LL come first).

    LLAANNGG
        This variable is used to pass locale information to the compiler. One
        way in which this information is used is to determine the character
        set to be used when character literals, string literals and comments
        are parsed in C and C++. When the compiler is configured to allow
        multibyte characters, the following values for LLAANNGG are recognized:

        CC--EEUUCCJJPP
            Recognize EUCJP characters.
        If LLAANNGG is not defined, or if it has some other value, then the
        compiler will use mblen and mbtowc as defined by the default locale to
        recognize and translate multibyte characters.
        Some additional environments variables affect the behavior of the
        preprocessor.
    CCPPAATTHH
    CC__IINNCCLLUUDDEE__PPAATTHH
    CCPPLLUUSS__IINNCCLLUUDDEE__PPAATTHH
    OOBBJJCC__IINNCCLLUUDDEE__PPAATTHH
        Each variable's value is a list of directories separated by a special
        character, much like PPAATTHH, in which to look for header files. The
        special character, PPAATTHH__SSEEPPAARRAATTOORR, is target-dependent and determined
        at GCC build time. For Windows-based targets it is a semicolon, and
        for almost all other targets it is a colon.
        CCPPAATTHH specifies a list of directories to be searched as if specified
        with --II, but after any paths given with --II options on the command
        line. This environment variable is used regardless of which language
        is being preprocessed.
        The remaining environment variables apply only when preprocessing the
        particular language indicated. Each specifies a list of directories to
        be searched as if specified with --iissyysstteemm, but after any paths given
        with --iissyysstteemm options on the command line.
        In all these variables, an empty element instructs the compiler to
        search its current working directory. Empty elements can appear at the
        beginning or end of a path. For instance, if the value of CCPPAATTHH is :://
        ssppeecciiaall//iinncclluuddee, that has the same effect as --II.. --II//ssppeecciiaall//iinncclluuddee.

    DDEEPPEENNDDEENNCCIIEESS__OOUUTTPPUUTT
        If this variable is set, its value specifies how to output
        dependencies for Make based on the non-system header files processed
        by the compiler. System header files are ignored in the dependency
        output.
        The value of DDEEPPEENNDDEENNCCIIEESS__OOUUTTPPUUTT can be just a file name, in which
        case the Make rules are written to that file, guessing the target name
        from the source file name. Or the value can have the form file target,
        in which case the rules are written to file file using target as the
        target name.
        In other words, this environment variable is equivalent to combining
        the options --MMMM and --MMFF, with an optional --MMTT switch too.

    SSUUNNPPRROO__DDEEPPEENNDDEENNCCIIEESS
        This variable is the same as DDEEPPEENNDDEENNCCIIEESS__OOUUTTPPUUTT (see above), except
        that system header files are not ignored, so it implies --MM rather than
        --MMMM. However, the dependence on the main input file is omitted.

  BBUUGGSS

    For instructions on reporting bugs, see hhttttpp::////ggcccc..ggnnuu..oorrgg//bbuuggss..hhttmmll;. Use
    of the ggccccbbuugg script to report bugs is recommended.

  FFOOOOTTNNOOTTEESS

    1.

    On some systems, ggcccc --sshhaarreedd needs to build supplementary stub code for
    constructors to work. On multi-libbed systems, ggcccc --sshhaarreedd must select the
    correct support libraries to link against. Failing to supply the correct
    flags may lead to subtle defects. Supplying them in cases where they are
    not necessary is innocuous.

  SSEEEE AALLSSOO

    _c_p_p(1)

    _g_c_o_v(1)

    _g_7_7(1)

    _a_s(1)

    _l_d(1)

    _g_d_b(1)

  AAUUTTHHOORR

    See http://gcc.gnu.org/onlinedocs/gcc/Contributors.html for contributors
    to GCC.

  CCOOPPYYRRIIGGHHTT

    Copyright (c) 1988, 1989, 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999,
    2000, 2001, 2002, 2003 Free Software Foundation, Inc.

    Permission is granted to copy, distribute and/or modify this document
    under the terms of the GNU Free Documentation License, Version 1.2 or any
    later version published by the Free Software Foundation; with the
    Invariant Sections being "GNU General Public License" and "Funding Free
    Software", the Front-Cover texts being (a) (see below), and with the Back-
    Cover Texts being (b) (see below). A copy of the license is included in
    the gfdl(7) man page.

    (a) The FSF's Front-Cover Text is:

         A GNU Manual

    (b) The FSF's Back-Cover Text is:

         You have freedom to copy and modify this GNU Manual, like GNU
         software.  Copies published by the Free Software Foundation raise
         funds for GNU development.

