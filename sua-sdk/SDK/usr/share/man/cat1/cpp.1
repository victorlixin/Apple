cpp(1)                                                           cpp(1)

  ccpppp

  NNAAMMEE

    cccp, cpp - The GNU C-Compatible Compiler Preprocessor

  SSYYNNOOPPSSIISS

    cccp [[-$]] [[-A predicate[[(value)]]]]
         [[-C]] [[-D name[[=definition]]]]
         [[-dD]] [[-dM]] [[-I directory]] [[-H]]
         [[-I-]] [[-imacros file]] [[-include file]]
         [[-idirafter dir]] [[-iprefix prefix]]
         [[-iwithprefix dir]] [[-lang-c]]
         [[-lang-c++]] [[-lang-objc]] [[-lang-objc++]]
         [[-lint]] [[-M [[-MG]]]] [[-MM [[-MG]]]]
         [[-MD file ]] [[-MMD file ]] [[-nostdinc]]
         [[-nostdinc++]] [[-P]] [[-pedantic]] [[-pedantic-errors]]
         [[-traditional]] [[-trigraphs]] [[-U name ]]
         [[-undef]] [[-Wtrigraphs]] [[-Wcomment]] [[-Wall]]
         [[-Wtraditional]] [[infile||-]] [[outfile||--]]

  DDEESSCCRRIIPPTTIIOONN

    The C preprocessor is a macro processor that is used automatically by the
    C compiler to transform your program before actual compilation. It is
    called a macro processor because it allows you to define macros which are
    brief abbreviations for longer constructs.

    The C preprocessor provides four separate facilities that you can use as
    you see fit:

    *     Inclusion of header files. These are files of declarations that can
          be substituted into your program.
    *     Macro expansion. You can define macros which are abbreviations for
          arbitrary fragments of C code, and then the C preprocessor will
          replace the macros with their definitions throughout the program.
    *     Conditional compilation. Using special preprocessing directives, you
          can include or exclude parts of the program according to various
          conditions.
    *     Line control. If you use a program to combine or rearrange source
          files into an intermediate file which is then compiled, you can use
          line control to inform the compiler of where each source line
          originally came from.

    C preprocessors vary in some details. For a full explanation of the GNU C
    preprocessor, see the info(1) file ccpppp..iinnffoo, or the manual The C
    Preprocessor Both of these are built from the same documentation source
    file, ccpppp..tteexxiinnffoo. The GNU C preprocessor provides a superset of the
    features of ANSI Standard C.

    ANSI Standard C requires the rejection of many harmless constructs
    commonly used by today's C programs. Such incompatibility would be
    inconvenient for users, so the GNU C preprocessor is configured to accept
    these constructs by default. Strictly speaking, to get ANSI Standard C,
    you must use the options --ttrriiggrraapphhss, --uunnddeeff and --ppeeddaannttiicc, but in practice
    the consequences of having strict ANSI Standard C make it undesirable to
    do this.

    Most often when you use the C preprocessor you will not have to invoke it
    explicitly: the C compiler will do so automatically. However, the
    preprocessor is sometimes useful individually.

    When you call the preprocessor individually, either name (_c_p_p(1) or
    cccp(1)) will do--they are completely synonymous.

    The C preprocessor expects two file names as arguments, infile and
    outfile. The preprocessor reads infile together with any other files it
    specifies with ##iinncclluuddee. All the output generated by the combined input
    files is written in outfile.

    Either infile or outfile may be --, which as infile means to read from
    standard input and as outfile means to write to standard output. Also, if
    outfile or both file names are omitted, the standard output and standard
    input are used for the omitted file names.

  OOPPTTIIOONNSS

    Here is a table of command options accepted by the C preprocessor. These
    options can also be given when compiling a C program; they are passed
    along automatically to the preprocessor when it is invoked by the
    compiler.
    --PP
        Inhibit generation of ## with line-number information in the output
        from the preprocessor. This might be useful when running the
        preprocessor on something that is not C code and will be sent to a
        program which might be confused by the ##
    --CC
        Do not discard comments: pass them through to the output file.
        Comments appearing in arguments of a macro call will be copied to the
        output before the expansion of the macro call.
    --ttrraaddiittiioonnaall
        Try to imitate the behavior of old-fashioned C, as opposed to ANSI C.
    --ttrriiggrraapphhss
        Process standard ANSI trigraph sequences. These are three-character
        sequences, all starting with ???? that are defined by ANSI C to stand
        for single characters. For example, ????// stands for \\, so ''????//nn'' is a
        character constant for a newline. Strictly speaking, the GNU C
        preprocessor does not support all programs in ANSI Standard C unless --
        ttrriiggrraapphhss is used, but if you ever notice the difference it will be
        with relief. You don't want to know any more about trigraphs.
    --ppeeddaannttiicc
        Issue warnings required by the ANSI C standard in certain cases such
        as when text other than a comment follows ##eellssee or ##eennddiiff.
    --ppeeddaannttiicc--eerrrroorrss
        Like --ppeeddaannttiicc, except that errors are produced rather than warnings.
    --WWttrriiggrraapphhss
        Warn if any trigraphs are encountered (assuming they are enabled).
    --WWccoommmmeenntt,, --WWccoommmmeennttss
        Warn whenever a comment-start sequence //** appears in a comment. (Both
        forms have the same effect).
    --WWaallll
        Requests both --WWttrriiggrraapphhss and --WWccoommmmeenntt (but not ----WWttrraaddiittiioonnaall).
    --WWttrraaddiittiioonnaall
        Warn about certain constructs that behave differently in traditional
        and ANSI C.
    --II directory
        Add the directory directory to the end of the list of directories to
        be searched for header files. This can be used to override a system
        header file, substituting your own version, since these directories
        are searched before the system header file directories. If you use
        more than one --II option, the directories are scanned in left-to-right
        order; the standard system directories come after.
    --II--
        Any directories specified with --II options before the --II-- option are
        searched only for the case of ##iinncclluuddee file they are not searched for
        ##iinncclluuddee <<file>>.
        If additional directories are specified with --II options after the --II--
        , these directories are searched for all ##iinncclluuddee directives.
        In addition, the --II-- option inhibits the use of the current directory
        as the first search directory for ##iinncclluuddee (dqffiillee".. Therefore, the
        current directory is searched only if it is requested explicitly with
        --II.. Specifying both --II-- and --II.. allows you to control precisely which
        directories are searched before the current one and which are searched
        after.
    --nnoossttddiinncc
        Do not search the standard system directories for header files. Only
        the directories you have specified with --II options (and the current
        directory, if appropriate) are searched.
    --nnoossttddiinncc++++
        Do not search for header files in the C++ specific standard
        directories, but do still search the other standard directories. (This
        option is used when building libg++.)
    --DD name
        Predefine name as a macro, with definition 11
    --DD name==definition
        Predefine name as a macro, with definition definition There are no
        restrictions on the contents of definition but if you are invoking the
        preprocessor from a shell or shell-like program you may need to use
        the shell's quoting syntax to protect characters such as spaces that
        have a meaning in the shell syntax. If you use more than one --DD for
        the same name the rightmost definition takes effect.
    --UU name
        Do not predefine name If both --UU and --DD are specified for one name,
        the --UU beats the --DD and the name is not predefined.
    --uunnddeeff
        Do not predefine any nonstandard macros.
    --AA name((value))
        Assert (in the same way as the ##aasssseerrtt directive) the predicate name
        with tokenlist value Remember to escape or quote the parentheses on
        shell command lines.
        You can use --AA-- to disable all predefined assertions; it also
        undefines all predefined macros.
    --ddMM
        Instead of outputting the result of preprocessing, output a list of
        ##ddeeffiinnee directives for all the macros defined during the execution of
        the preprocessor, including predefined macros. This gives you a way of
        finding out what is predefined in your version of the preprocessor;
        assuming you have no file ffoooo..hh the command
        touch foo.h; cpp -dM foo.h
        will show the values of any predefined macros.
    --ddDD
        Like --ddMM except in two respects: it does not include the predefined
        macros, and it outputs both the ##ddeeffiinnee directives and the result of
        preprocessing. Both kinds of output go to the standard output file.
    --MM
    --MM [[--MMGG]]
        Instead of outputting the result of preprocessing, output a rule
        suitable for make(1) describing the dependencies of the main source
        file. The preprocessor outputs one make(1) rule containing the object
        file name for that source file, a colon, and the names of all the
        included files. If there are many included files then the rule is
        split into several lines using \\
        --MMGG says to treat missing header files as generated files and assume
        they live in the same directory as the source file. It must be
        specified in addition to --MM.
        This feature is used in automatic updating of makefiles.
    --MMMM [--MMGG]
        Like --MM but mention only the files included with ##iinncclluuddee  "ffiillee".
        System header files included with ##iinncclluuddee <ffiillee> are omitted.
    --MMDD file
        Like --MM, but the dependency information is written to file This is in
        addition to compiling the file as specified----MMDD does not inhibit
        ordinary compilation the way --MM does.
        When invoking gcc, do not specify the file argument. Gcc will create
        file names made by replacing ..cc with ..dd at the end of the input file
        names.
        In Mach, you can use the utility mmdd to merge multiple files into a
        single dependency file suitable for using with the make(1) command.
    --MMMMDD file
        Like --MMDD except mention only user header files, not system header
        files.
    --HH
        Print the name of each header file used, in addition to other normal
        activities.
    --iimmaaccrrooss file
        Process file as input, discarding the resulting output, before
        processing the regular input file. Because the output generated from
        file is discarded, the only effect of --iimmaaccrrooss file is to make the
        macros defined in file available for use in the main input. The
        preprocessor evaluates any --DD and --UU options on the command line
        before processing --iimmaaccrrooss file
    --iinncclluuddee file
        Process file as input, and include all the resulting output, before
        processing the regular input file.
    --iiddiirraafftteerr dir
        Add the directory dir to the second include path. The directories on
        the second include path are searched when a header file is not found
        in any of the directories in the main include path (the one that --
        II adds to).
    --iipprreeffiixx prefix
        Specify prefix as the prefix for subsequent --iiwwiitthhpprreeffiixx options.
    --iiwwiitthhpprreeffiixx dir
        Add a directory to the second include path. The directory's name is
        made by concatenating prefix and dir where prefix was specified
        previously with --iipprreeffiixx.
    --llaanngg--cc,, --llaanngg--cc++++,, --llaanngg--oobbjjcc,, --llaanngg--oobbjjcc++++
        Specify the source language. --llaanngg--cc++++ makes the preprocessor handle
        C++ comment syntax, and includes extra default include directories for
        C++, and --llaanngg--oobbjjcc enables the Objective C ##iimmppoorrtt directive. --llaanngg--
        cc explicitly turns off both of these extensions, and --llaanngg--oobbjjcc++++
        enables both.
        These options are generated by the compiler driver gcc(1), but not
        passed from the gcc(1) command line.
    --lliinntt
        Look for commands to the program checker lint(1) embedded in comments,
        and emit them preceded by ##pprraaggmmaa lliinntt For example, the comment //
        ** NNOOTTRREEAACCHHEEDD **// becomes ##pprraaggmmaa lliinntt NNOOTTRREEAACCHHEEDD
        This option is available only when you call cpp(1) directly; gcc(1)
        will not pass it from its command line.
    --$$
        Forbid the use of $$ in identifiers. This was formerly required for
        strict conformance to the C Standard before the standard was
        corrected.
        This option is available only when you call cpp(1) directly; gcc(1)
        will not pass it from its command line.

  SSEEEE AALLSSOO

    _g_c_c(1)

    CCpppp entry in info(1); The C Preprocessor Richard M. Stallman.

    ggcccc(11); entry in info(1); Using and Porting GNU CC (for version 2.0),
    Richard M. Stallman.

  CCOOPPYYIINNGG

    Copyright (c) 1991, 1992, 1993 Free Software Foundation, Inc.

    Permission is granted to make and distribute verbatim copies of this
    manual provided the copyright notice and this permission notice are
    preserved on all copies.

    Permission is granted to copy and distribute modified versions of this
    manual under the conditions for verbatim copying, provided that the entire
    resulting derived work is distributed under the terms of a permission
    notice identical to this one.

    Permission is granted to copy and distribute translations of this manual
    into another language, under the above conditions for modified versions,
    except that this permission notice may be included in translations
    approved by the Free Software Foundation instead of in the original
    English.

