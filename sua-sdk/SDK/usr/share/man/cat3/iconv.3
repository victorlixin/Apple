iconv(3)                                                       iconv(3)

  iiccoonnvv(())

  NNAAMMEE

    iconv() - codeset conversion function

  SSYYNNOOPPSSIISS

    #include <iconv.h>

    size_t iconv(iconv_t cd, const char **inbuf, size_t *inbytesleft,
        char **outbuf, size_t *outbytesleft);

  DDEESSCCRRIIPPTTIIOONN

    The iiccoonnvv(3) function converts the sequence of characters from one
    codeset, in the array specified by inbuf, into a sequence of corresponding
    characters in another codeset, in the array specified by outbuf. The
    codesets are those specified in the _ii_cc_oo_nn_vv____oo_pp_ee_nn(3) call that returned the
    conversion descriptor, cd. The inbuf argument points to a variable that
    points to the first character in the input buffer and inbytesleft
    indicates the number of bytes to the end of the buffer to be converted.
    The outbuf argument points to a variable that points to the first
    available byte in the output buffer and outbytesleft indicates the number
    of the available bytes to the end of the buffer. For state-dependent
    encodings, the conversion descriptor cd is placed into its initial shift
    state by a call for which inbuf is a null pointer, or for which inbuf
    points to a null pointer. When iiccoonnvv(3) is called in this way, and if
    outbuf is not a null pointer or a pointer to a null pointer, and
    outbytesleft points to a positive value, iiccoonnvv(3) will place, into the
    output buffer, the byte sequence to change the output buffer to its
    initial shift state. If the output buffer is not large enough to hold the
    entire reset sequence, iiccoonnvv(3) will fail and set errno to [E2BIG].
    Subsequent calls with inbuf as other than a null pointer or a pointer to a
    null pointer cause the conversion to take place from the current state of
    the conversion descriptor.

    If a sequence of input bytes does not form a valid character in the
    specified codeset, conversion stops after the previous successfully
    converted character. If the input buffer ends with an incomplete character
    or shift sequence, conversion stops after the previous successfully
    converted bytes. If the output buffer is not large enough to hold the
    entire converted input, conversion stops just prior to the input bytes
    that would cause the output buffer to overflow. The variable pointed to by
    inbuf is updated to point to the byte following the last byte successfully
    used in the conversion. The value pointed to by inbytesleft is decremented
    to reflect the number of bytes still not converted in the input buffer.
    The variable pointed to by outbuf is updated to point to the byte
    following the last byte of converted output data. The value pointed to by
    outbytesleft is decremented to reflect the number of bytes still available
    in the output buffer. For state-dependent encodings, the conversion
    descriptor is updated to reflect the shift state in effect at the end of
    the last successfully converted byte sequence.

    If iiccoonnvv(3) encounters a character in the input buffer that is valid, but
    for which an identical character does not exist in the target codeset,
    iiccoonnvv(3) returns the '_' wide-character code.

    The arguments are:

    cd
        Conversion descriptor returned by a call to _ii_cc_oo_nn_vv____oo_pp_ee_nn(3).

    inbuf
        A pointer to an array of characters to be converted.

    inbytesleft
        A pointer to a value that indicates the number of bytes available in
        the inbuf array.

    outbuf
        A pointer to an array where converted characters are written.

    outbytesleft
        A pointer to a value that indicates the number of bytes available in
        the outbuf array.

  RREETTUURRNN VVAALLUUEESS

    The iiccoonnvv(3) function updates the variables pointed to by the arguments to
    reflect the extent of the conversion and returns the number of non-
    identical conversions performed. If the entire string in the input buffer
    is converted, the value pointed to by inbytesleft will be 0. If the input
    conversion is stopped due to any conditions mentioned above, the value
    pointed to by inbytesleft will be non-zero and errno is set to indicate
    the condition. If an error occurs iiccoonnvv(3) returns (size_t)-1 and sets
    errno to indicate the error.

  EERRRROORRSS

    The iiccoonnvv(3) call will fail if:

    [EILSEQ]
        Input conversion stopped due to an input byte that does not belong to
        the input codeset.

    [E2BIG]
        Input conversion stopped due to lack of space in the output buffer.

    [EINVAL]
        Input conversion stopped due to an incomplete character or shift
        sequence at the end of the input buffer.

    The iiccoonnvv(3) function may fail if:

    [EBADF]
        The cd argument is not a valid open conversion descriptor.

  SSEEEE AALLSSOO

    _i_c_o_n_v___o_p_e_n(3)

    _i_c_o_n_v___c_l_o_s_e(3)

  UUSSAAGGEE NNOOTTEESS

    The iiccoonnvv function is thread safe.

    The iiccoonnvv function is not async-signal safe.

