_control87(3)                                             _control87(3)

  __ccoonnttrrooll8877(())

  NNAAMMEE

    _control87() - get and set floating point control word

  SSYYNNOOPPSSIISS

    #include <float.h>

    unsigned int _control87( unsigned int newcw, unsigned int mask);

  DDEESSCCRRIIPPTTIIOONN

    The __ccoonnttrrooll8877() function updates the control word of the 8087/80287/
    80387/80486. If mask is zero, then the control word is not updated. If
    mask is non-zero, then the control word is updated with bits from newcw
    corresponding to each bit that is on in mask.

  RREETTUURRNN VVAALLUUEESS

    The __ccoonnttrrooll8877() function returns the new control word. The description of
    bits defined for the control word is found in the ffllooaatt..hh header file.

  EEXXAAMMPPLLEE

    #include <stdio.h>
    #include <float.h>

    char *status[2] = { "disabled", "enabled" };

    void main()
      {
        unsigned int fp_cw = 0;
        unsigned int fp_mask = 0;
        unsigned int bits;

        fp_cw = _control87( fp_cw,
                            fp_mask );

        printf( "Interrupt Exception Masks\n" );
        bits = fp_cw & MCW_EM;
        printf( "  Invalid Operation exception %s\n",
                status[ (bits & EM_INVALID) == 0 ] );
        printf( "  Denormalized exception %s\n",
                status[ (bits & EM_DENORMAL) == 0 ] );
        printf( "  Divide-By-Zero exception %s\n",
                status[ (bits & EM_ZERODIVIDE) == 0 ] );
        printf( "  Overflow exception %s\n",
                status[ (bits & EM_OVERFLOW) == 0 ] );
        printf( "  Underflow exception %s\n",
                status[ (bits & EM_UNDERFLOW) == 0 ] );
        printf( "  Precision exception %s\n",
                status[ (bits & EM_PRECISION) == 0 ] );

        printf( "Infinity Control = " );
        bits = fp_cw & MCW_IC;
        if( bits == IC_AFFINE )     printf( "affine\n" );
        if( bits == IC_PROJECTIVE ) printf( "projective\n" );

        printf( "Rounding Control = " );
        bits = fp_cw & MCW_RC;
        if( bits == RC_NEAR )       printf( "near\n" );
        if( bits == RC_DOWN )       printf( "down\n" );
        if( bits == RC_UP )         printf( "up\n" );
        if( bits == RC_CHOP )       printf( "chop\n" );

        printf( "Precision Control = " );
        bits = fp_cw & MCW_PC;
        if( bits == PC_24 )         printf( "24 bits\n" );
        if( bits == PC_53 )         printf( "53 bits\n" );
        if( bits == PC_64 )         printf( "64 bits\n" );
      }

  UUSSAAGGEE NNOOTTEESS

    The __ccoonnttrrooll8877 function is not thread safe.

    The __ccoonnttrrooll8877 function is not async-signal safe.

