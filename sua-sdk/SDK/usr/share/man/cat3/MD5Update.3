MD5Update(3)                                               MD5Update(3)

  MMDD55

  NNAAMMEE

    MD5Init(), MD5Update(), MD5Final(), MD5Transform(), MD5End(), MD5File(),
    MD5Data() - calculate the RSA Data Security, Inc., "MD5" message digest

  SSYYNNOOPPSSIISS

    #include <sys/types.h>
    #include <md5.h>

    void MD5Init (MD5_CTX *context)
    void MD5Update (MD5_CTX *context, const unsigned char *data, unsigned int
    len)
    void MD5Final (unsigned char digest[16], MD5_CTX *context)
    void MD5Transform (u_int32_t state[4], unsigned char block[64])
    char * MD5End (MD5_CTX *context, char *buf)
    char * MD5File (char *filename, char *buf)
    char * MD5Data (unsigned char *data, unsigned int len, char *buf)

  DDEESSCCRRIIPPTTIIOONN

    The MD5 functions calculate a 128-bit cryptographic checksum (digest) for
    any number of input bytes. A cryptographic checksum is a one-way hash-
    function, that is, you cannot find (except by exhaustive search) the input
    corresponding to a particular output. This net result is a "fingerprint"
    of the input-data, which doesn't disclose the actual input.

    MD2 is the slowest, MD4 is the fastest and MD5 is somewhere in the middle.
    MD2 can only be used for Privacy-Enhanced Mail. MD4 has been shown to have
    severe vulnerabilities; it should only be used where necessary for
    backward compatibility. MD5 has not yet (1999-02-11) been broken, but
    recent attacks have cast some doubt on its security properties. The
    attacks on both MD4 and MD5 are both in the nature of finding
    "collisions," that is, multiple inputs which hash to the same value; it is
    still unlikely for an attacker to be able to determine the exact original
    input given a hash value.

    The MMDD55IInniitt, MMDD55UUppddaattee, and MMDD55FFiinnaall functions are the core functions.
    Allocate an MD5_CTX, initialize it with MMDD55IInniitt, run over the data with
    MMDD55UUppddaattee, and finally extract the result using MMDD55FFiinnaall. When a null
    pointer is passed to MMDD55FFiinnaall as first argument only the final padding
    will be applied and the current context can still be used with MMDD55UUppddaattee.

    The MMDD55TTrraannssffoorrmm function is used by MMDD55UUppddaattee to hash 512-bit blocks and
    forms the core of the algorithm. Most programs should use the interface
    provided by MMDD55IInniitt, MMDD55UUppddaattee and MMDD55FFiinnaall instead of calling
    MMDD55TTrraannssffoorrmm directly.

    MMDD55EEnndd is a wrapper for MMDD55FFiinnaall which converts the return value to a 33-
    character (including the terminating '\e0') ASCII string which represents
    the 128 bits in hexadecimal.

    MMDD55FFiillee calculates the digest of a file, and uses MMDD55EEnndd to return the
    result. If the file cannot be opened, a null pointer is returned. MMDD55DDaattaa
    calculates the digest of a chunk of data in memory, and uses MMDD55EEnndd to
    return the result.

    When using MMDD55EEnndd, MMDD55FFiillee, or MMDD55DDaattaa, the buf argument can be a null
    pointer, in which case the returned string is allocated with _mm_aa_ll_ll_oo_cc(3) and
    subsequently must be explicitly deallocated using _ff_rr_ee_ee(3) after use. If
    the buf argument is non-null it must point to at least 33 characters of
    buffer space.

  SSEEEE AALLSSOO

    _R_M_D_1_6_0(3)

    _S_H_A_1(3)

    B. Kaliski, The MD2 Message-Digest Algorithm (RFC 1319)

    R. Rivest, The MD4 Message-Digest Algorithm (RFC 1186)

    R. Rivest, The MD5 Message-Digest Algorithm (RFC 1321)

    RSA Laboratories, Frequently Asked Questions About today's Cryptography
    (<http://www.rsasecurity.com/rsalabs/faq/>)

    H. Dobbertin, "Alf Swindles Ann" CryptoBytes, Number 1(3):5 (1995)

    MJ. B. Robshaw "On Recent Results for MD2, MD4 and MD5" RSA Laboratories
    Bulletin Number 4 (November 12, 1996)

    Hans Dobbertin, Cryptanalysis of MD5 Compress

  AAUUTTHHOORRSS

    The original MD5 routines were developed by RSA Data Security, Inc., and
    published in the above references. This code is derived directly from
    these implementations by Poul-Henning Kamp (phk@login.dkuug.dk).

  BBUUGGSS

    Hans Dobbertin has shown collisions for the full version of MD4 and found
    a collision in the compress function of MD5. The use of SHA or RIPEMD-160
    is recommended instead.

    MD2 has only been licensed for use in Privacy Enhanced Mail. Use MD4 or
    MD5 if that isn't what you're doing.

  UUSSAAGGEE NNOOTTEESS

    None of these functions are thread safe.

    None of these functions are async-signal safe.

