strfmon(3)                                                   strfmon(3)

  ssttrrffmmoonn(())

  NNAAMMEE

    strfmon() - convert monetary value to a string

  SSYYNNOOPPSSIISS

    #include <monetary.h>

    size_t strfmon (char *s, size_t maxsize, const char *format, ...)

  DDEESSCCRRIIPPTTIIOONN

    The _ss_tt_rr_ff_mm_oo_nn(3) function places characters into the array s according to
    the string pointed to by format. No more than maxsize characters are
    placed into the array.

    The format string containts two types of objects: plain characters, which
    are simply copied to the output stream, and conversion specifications,
    each of which results in the retrieval of zero or more arguments that are
    converted and formatted. The results are undefined if there are
    insufficient arguments for the format. If the format is exhausted while
    arguments remain, the excess arguments are ignored.

    A conversion specification consists of the following sequence:

    *     a % character
    *     optional flags
    *     optional field width
    *     optional left precision
    *     optional right precision
    *     a required conversion character that determines the conversion to be
          performed

  FFllaaggss

    One or more of the following optional flags can be specified to control
    the conversion:
    =f
        An = followed by a single character f which is used as the numeric
        fill character. The fill character must be representable in a single
        byte in order to work with precision and width counts. The default
        numeric fill character is the space character. This flag does not
        affect field width filling which always uses the space character. This
        flag is ignored unless a left precision (see below) is specified.

    ^
        Do not format the currency amount with grouping characters. The
        default is to insert the grouping characters if defined for the
        current locale.

    + or (
        Specify the style of representing positive and negative currency
        amounts. Only one of + or ( may be specified. If + is specified, the
        locale's equivalent of + and - are used (for example, in the U.S.A.:
        the empty string if positive and - if negative). If ( is specified,
        negative amounts are enclosed within parentheses. If neither flag is
        specified, the + style is used.

    !
        Suppress the currency symbol from the output conversion.

    -
        Specify the alignment. If this flag is present all fields are left-
        justified (padded to the right) rather than right-justified.

  FFiieelldd WWiiddtthh

    w
        A decimal digit string w specifying a minimum field width in bytes in
        which the result of the conversion is right-justified (or left-
        justified if the flag - is specified). The default is 0.

  LLeefftt PPrreecciissiioonn
    #n
        A # followed by a decimal digit string n specifying a maximum number
        of digits expected to be formatted to the left of the radix character.
        This option can be used to keep the formatted output from multiple
        calls to the strfmon() aligned in the same columns. It can also be
        used to fill unused positions with a special character as in
        $***123.45. This option causes an amount to be formatted as if it has
        the number of digits specified by n. If more than n digit positions
        are required, this conversion specification is ignored. Digit
        positions in excess of those actually required are filled with the
        numeric fill character (see the =f flag above).
        If grouping has not been suppressed with the ^ flag, and it is defined
        for the current locale, grouping separators are inserted before the
        fill characters (if any) are added. Grouping separators are not
        applied to fill characters even if the fill character is a digit.
        To ensure alignment, any characters appearing before or after the
        number in the formatted output such as currency or sign symbols are
        padded as necessary with space characters to make their positive and
        negative formats an equal length.

  RRiigghhtt PPrreecciissiioonn
    .p
        A period followed by a decimal digit string p specifying the number of
        digits after the radix character. If the value of the right precision
        p is 0, no radix character appears. If a right precision is not
        included, a default specified by the current locale is used. The
        amount being formatted is rounded to the specified number of digits
        prior to formatting.

  CCoonnvveerrssiioonn CChhaarraacctteerrss

    The conversion characters and their meanings are:

    i
        The ddoouubbllee argument is formatted according to the locale's
        international currency format (for example, in the U.S.A.: USD
        1,234.56).

    n
        The ddoouubbllee argument is formatted according to the locale's national
        currency format (for example, in the U.S.A.: $1,234.56).

    %
        Convert to a %; no argument is converted. The entire conversion
        specification must be %%.

  LLooccaallee IInnffoorrmmaattiioonn

    The LC_MONETARY category of the program's locale affects the behaviour of
    this function including the monetary radix character (which may be
    different from the numeric radix character affected by the LC_NUMERIC
    category), the grouping separator, the currency symbols and formats. The
    international currency symbol should be conformant with the ISO 4217:1995
    standard.

    If the value of maxsize is greater than {SSIZE_MAX}, the result is
    implementation-dependent.

  RREETTUURRNN VVAALLUUEE

    If the total number of resulting characters including the terminating NULL
    character is not more than maxsize, ssttrrffmmoonn(3) returns the number of bytes
    placed into the character array pointed to by s, not including the
    terminating NULL character. Otherwise, -1 is returned, the contents of the
    character array s are indeterminate, and errno is set to indicate the
    error.

  EERRRROORRSS

    The ssttrrffmmoonn(3) call will fail if:

    [E2BIG]
        Conversion stopped due to lack of space in the buffer..

  SSEEEE AALLSSOO

    _l_o_c_a_l_e_c_o_n_v(3)

  UUSSAAGGEE NNOOTTEESS

    The ssttrrffmmoonn function is thread safe.

    The ssttrrffmmoonn function is not async-signal safe.

