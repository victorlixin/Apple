link_fieldtype(3)                                     link_fieldtype(3)

  ffoorrmm__ffiieellddttyyppee(())

  NNAAMMEE

    new_fieldtype(), free_fieldtype(), set_fieldtype_arg(),
    set_fieldtype_choice() link_fieldtype form_field - define validation-field
    types

  SSYYNNOOPPSSIISS

    #include <form.h>

    FIELDTYPE *new_fieldtype(int (*field_check)(FIELD *, char *),
                             int (*char_check)(int, char *));
    int free_fieldtype(FIELDTYPE *fieldtype);
    in set_fieldtype_arg(FIELDTYPE *fieldtype
                         char *(*mak_arg)(va_list *),
                         char *(*copy_arg)(char *),
                         void (*free_arg)(char *));
    in set_fieldtype_choice(FIELDTYPE *fieldtype
                            int (*next_choice)(FIELD *, char *),
                            int (*prev_choice)(FIELD *, char *));
    FIELDTYPE *link_fieldtype(FIELDYPE *type1, FIELDTYPE *type2);

  DDEESSCCRRIIPPTTIIOONN

    The function _nn_ee_ww____ff_ii_ee_ll_dd_tt_yy_pp_ee(3) creates a new field type usable for data
    validation. You supply it with field_check, a predicate to check the
    validity of an entered data string whenever the user attempt to leave a
    field. The ((FFIIEELLDD **)) argument is passed in so the validation predicate can
    see the field's buffer, sizes and other attributes; the second argument is
    an argument-block structure, about which more below.

    You also supply with char_check, a function to validate input characters
    as they are entered; it will be passed the character to be checked and a
    pointer to an argument-block structure.

    The function _ff_rr_ee_ee____ff_ii_ee_ll_dd_tt_yy_pp_ee(3) frees the space allocated for a given
    validation type.

    The function _ss_ee_tt____ff_ii_ee_ll_dd_tt_yy_pp_ee(3) associates three storage-management
    functions with a field type. The mak_arg function is automatically applied
    to the list of arguments you give _ss_ee_tt____ff_ii_ee_ll_dd____tt_yy_pp_ee(3) when attaching
    validation to a field; its job is to bundle these into an allocated
    argument-block object which can later be passed to validation predicated.
    The other two hook arguments should copy and free argument-block
    structures. They will be used by the forms-driver code.

    The form driver requests REQ_NEXT_CHOICE and REQ_PREV_CHOICE assume that
    the possible values of a field form an ordered set, and provide the forms
    user with a way to move through the set. The _ss_ee_tt____ff_ii_ee_ll_dd_tt_yy_pp_ee____cc_hh_oo_ii_cc_ee(3)
    function allows forms programmers to define successor and predecessor
    functions for the field type. These functions take the field pointer and
    an argument-block structure as arguments.

  RREETTUURRNN VVAALLUUEE

    The character-pointer-valued routines return NULL on error.

    The integer-valued routines return one of the following codes on error:

    E_OK
        The routine succeeded.

    E_SYSTEM_ERROR
        System error occurred (see errno

    E_BAD_ARGUMENT
        Routine detected an incorrect or out-of-range argument.

    E_CONNECTED
        The field is already connected to a form.

  SSEEEE AALLSSOO

    _c_u_r_s_e_s(3)

    _f_o_r_m_s(3)

  NNOOTTEESS

    The header file <<ffoorrmm..hh>> automatically includes the header file
    <<ccuurrsseess..hh>>.

    All of the ((cchhaarr **)) arguments of these functions should actually be ((vvooiidd
    **)). The type has been left uncorrected for strict compatibility with
    System V.

  PPOORRTTAABBIILLIITTYY

    These routines emulate the System V forms library. They were not supported
    on Version 7 or BSD versions.

