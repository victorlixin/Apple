gcvt(3)                                                         gcvt(3)

  eeccvvtt(())

  NNAAMMEE

    ecvt(), fcvt(), gcvt() - convert floating-point number into a string

  SSYYNNOOPPSSIISS

    #include <stdlib.h>

    char *ecvt(double value, int ndigit, int *decpt, int *sign)
    char *fcvt(double value, int ndigit, int *decpt, int *sign)
    char *gcvt(double value, int ndigit, char *buf)

  DDEESSCCRRIIPPTTIIOONN

    These three routines convert floating-point numbers (the argument value)
    into null-terminated strings. In _ee_cc_vv_tt(3) and _gg_cc_vv_tt(3), the ndigits argument
    determines the number of significant digits, though it is limited by the
    precision of a ddoouubbllee; in _ff_cc_vv_tt(3), it determines the number of digits
    after the radix point.

    The _ee_cc_vv_tt(3) function converts the value into a string. Unless value is
    actually zero, the high-order digit is non-zero, and the low-order digit
    is rounded. The radix character is not returned as part of the string, but
    its position is stored in decpt argument, relative to the beginning of the
    string. If the value stored in the decpt argument is negative, the radix
    character is to the left of the returned string. The value stored in sign
    indicates whether the result is negative: if it is non-zero, then the
    result is negative.

    The _ff_cc_vv_tt(3) is nearly identical, but the meaning of ndigits is slightly
    different. Here it specifies the number of digits desired after the radix
    point.

    The _gg_cc_vv_tt(3) function converts value into a particular format, generally
    similar to the one specified by %g in _pp_rr_ii_nn_tt_ff(3). The returned character
    will contain a radix character and will start with a minus sign if the
    value is negative. If possible, _gg_cc_vv_tt(3) will convert the number to the
    appropriate number of significant digits (equivalent to %f), but will use
    scientific notation (equivalent to %e) if necessary.

  RREETTUURRNN VVAALLUUEESS

    The _ee_cc_vv_tt(3) and _ff_cc_vv_tt(3) functions return a pointer to a null-terminated
    string.

    The _gg_cc_vv_tt(3) function returns buf.

  SSEEEE AALLSSOO

    _p_r_i_n_t_f()

    _s_e_t_l_o_c_a_l_e()

  UUSSAAGGEE NNOOTTEESS

    None of these functions are thread safe.

    None of these functions are async-signal safe.

