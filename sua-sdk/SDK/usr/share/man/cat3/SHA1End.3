SHA1End(3)                                                   SHA1End(3)

  SSHHAA11

  NNAAMMEE

    SHA1Init(), SHA1Update(), SHA1Final(), SHA1Transform(), SHA1End(),
    SHA1File(), SHA1Data() - calculate the NIST Secure Hash Algorithm

  SSYYNNOOPPSSIISS

    #include <sys/types.h>
    #include <sha1.h>

    void SHA1Init (SHA1_CTX *context)
    void SHA1Update (SHA1_CTX *context, const u_char *data, u_int len)
    void SHA1Final (u_char digest[20], SHA1_CTX *context)
    void SHA1Transform (u_int32_t state[5], u_char buffer[64])
    char * SHA1End (SHA1_CTX *context, char *buf)
    char * SHA1File (char *filename, char *buf)
    char * SHA1Data (u_char *data, u_int len, char *buf)

  DDEESSCCRRIIPPTTIIOONN

    The SHA1 functions implement the NIST Secure Hash Algorithm (SHA-1), FIPS
    PUB 180-1. SHA-1 is used to generate a condensed representation of a
    message called a message digest. The algorithm takes a message less than
    2^64 bits as input and produces a 160-bit digest suitable for use as a
    digital signature.

    The SHA1 functions are considered to be more secure than the _MM_DD_44(3) and
    _MM_DD_55(3) functions with which they share a similar interface.

    The SSHHAA11IInniitt function initializes a SHA1_CTX context for use with
    SSHHAA11UUppddaattee, and SSHHAA11FFiinnaall. The SSHHAA11UUppddaattee function adds data of length len
    to the SHA1_CTX specified by context. SSHHAA11FFiinnaall is called when all data
    has been added via SSHHAA11UUppddaattee and stores a message digest in the digest
    parameter. When a null pointer is passed to SSHHAA11FFiinnaall as first argument
    only the final padding will be applied and the current context can still
    be used with SSHHAA11UUppddaattee.

    The SSHHAA11TTrraannssffoorrmm function is used by SSHHAA11UUppddaattee to hash 512-bit blocks
    and forms the core of the algorithm. Most programs should use the
    interface provided by SSHHAA11IInniitt, SSHHAA11UUppddaattee and SSHHAA11FFiinnaall instead of
    calling SSHHAA11TTrraannssffoorrmm directly.

    The SSHHAA11EEnndd function is a front end for SSHHAA11FFiinnaall which converts the
    digest into an ASCII representation of the 160 bit digest in hexadecimal.

    The SSHHAA11FFiillee function calculates the digest for a file and returns the
    result via SSHHAA11EEnndd. If SSHHAA11FFiillee is unable to open the file a NULL pointer
    is returned.

    The SSHHAA11DDaattaa function calculates the digest of an arbitrary string and
    returns the result via SSHHAA11EEnndd.

    For each of the SSHHAA11EEnndd, SSHHAA11FFiillee, and SSHHAA11DDaattaa functions the buf
    parameter should either be a string of at least 41 characters in size or a
    NULL pointer. In the latter case, space will be dynamically allocated via
    _mm_aa_ll_ll_oo_cc(3) and should be freed using _ff_rr_ee_ee(3) when it is no longer needed.

  EEXXAAMMPPLLEESS

    The follow code fragment will calculate the digest for the string "abc"
    which is 0xa9993e36476816aba3e25717850c26c9cd0d89d.

    SHA1_CTX sha;
    u_char results[20];
    char *buf;
    int n;

    buf = "abc";
    n = strlen(buf);
    SHA1Init(&sha);
    SHA1Update(&sha, (u_char *)buf, n);
    SHA1Final(results, &sha);

    /* Print the digest as one long hex value */
    printf("0x");
    for (n = 0; n < 20; n++)
    	printf("%02x", results[n]);
    putchar('\en');

    Alternately, the helper functions could be used in the following way:

    SHA1_CTX sha;
    u_char output[41];
    char *buf = "abc";

    printf("0x%s\en", SHA1Data(buf, strlen(buf), output));

  CCAAVVEEAATTSS

    This implementation of SHA-1 has not been validated by NIST and as such is
    not in official compliance with the standard.

    If a message digest is to be copied to a multi-byte type (ie: an array of
    five 32-bit integers) it will be necessary to perform byte swapping on
    little endian machines such as the x86, Alpha, and VAX.

  AAUUTTHHOORRSS

    This implementation of SHA-1 was written by Steve Reid.

    The SSHHAA11EEnndd, SSHHAA11FFiillee, and SSHHAA11DDaattaa helper functions are derived from code
    written by Poul-Henning Kamp.

  SSEEEE AALLSSOO

    _M_D_4(3)

    _M_D_5(3)

    _R_M_D_1_6_0(3)

    J. Burrows, The Secure Hash Standard (FIPS PUB 180-1)

    D. Eastlake and P. Jones, US Secure Hash Algorithm 1 (RFC 3174)

  UUSSAAGGEE NNOOTTEESS

    None of these functions are thread safe.

    None of these functions are async-signal safe.

