blf_cbc_decrypt(3)                                   blf_cbc_decrypt(3)

  BBlloowwffiisshh

  NNAAMMEE

    blf_key(), blf_enc(), blf_dec(), blf_ecb_encrypt(), blf_ecb_decrypt(),
    blf_cbc_encrypt(), blf_cbc_decrypt() - Blowfish encryption

  SSYYNNOOPPSSIISS

    #include <blf.h>

    void blf_key (blf_ctx *state, const u_int8_t *key, u_int16_t keylen)
    void blf_enc (blf_ctx *state, u_int32_t *data, u_int16_t datalen)
    void blf_dec (blf_ctx *state, u_int32_t *data, u_int16_t datalen)
    void blf_ecb_encrypt (blf_ctx *state, u_int8_t *data, u_int32_t datalen)
    void blf_ecb_decrypt (blf_ctx *state, u_int8_t *data, u_int32_t datalen)
    void blf_cbc_encrypt (blf_ctx *state, u_int8_t *iv, u_int8_t *data,
    u_int32_t datalen)
    void blf_cbc_decrypt (blf_ctx *state, u_int8_t *iv, u_int8_t *data,
    u_int32_t datalen)

  DDEESSCCRRIIPPTTIIOONN

    Blowfish is a fast unpatented block cipher designed by Bruce Schneier. It
    basically consists of a 16 times iterated Feistel network. The block size
    is 64 bit and the key size is maximal 448 bit. The bbllff__kkeeyy function
    initializes the 4 8-bit S-boxes and the 18 Subkeys with the hexadecimal
    digits of Pi. The key is used for further randomization. The first
    argument to bbllff__eenncc is the initialized state derived from bbllff__kkeeyy. The
    stream of 32-bit words is encrypted in Electronic Codebook Mode (ECB) and
    datalen must be even. bbllff__ddeecc is used for decrypting Blowfish encrypted
    blocks.

    The functions bbllff__eeccbb__eennccrryypptt and bbllff__eeccbb__ddeeccrryypptt are used for encrypting
    and decrypting octet streams in ECB mode. The functions bbllff__ccbbcc__eennccrryypptt
    and bbllff__ccbbcc__ddeeccrryypptt are used for encrypting and decrypting octet streams
    in Cipherblock Chaining Mode (CBC).

  SSEEEE AALLSSOO

    _p_a_s_s_w_d(1)

    _c_r_y_p_t(3)

  AAUUTTHHOORRSS

    Niels Provos <provos@physnet.uni-hamburg.de>

  UUSSAAGGEE NNOOTTEESS

    None of these functions are thread safe.

    None of these functions are async-signal safe.

