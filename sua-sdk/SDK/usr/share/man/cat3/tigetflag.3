tigetflag(3)                                               tigetflag(3)

  ccuurrss__tteerrmmiinnffoo(())

  NNAAMMEE

    setupterm(), setterm(), set_curterm(), del_curterm(), restartterm(),
    tparm(), tputs(), putp(), vidputs(), vidattr(), mvcur(), tigetflag(),
    tigetnum(), tigetstr() - curses interfaces to terminfo database

  SSYYNNOOPPSSIISS

    #include <curses.h>
    #include <term.h>

    int setupterm(const char *term, int ldes, int *errret);
    int setterm(const char *term);
    TERMINAL *set_curterm(TERMINAL *nterm);
    int del_curterm(TERMINAL *oterm);
    int restartterm(const char *term, int ldes, int *errret);
    char *tparm(const char *str, ...);
    char *tparam(const char *str, char *buffer, int size, ...);
    int tputs(const char *str, int acnt, int (*putc)(int));
    int putp(const char *str);
    int vidputs(chtype attrs, int (*putc)(char *));
    int vidattr(chtype attrs);
    int mvcur(int oldrow, int oldcol, int newrow, int newcol);
    int tigetflag(const char *capname);
    int tigetnum(const char *capname);
    char *tigetstr(const char *capname);

  DDEESSCCRRIIPPTTIIOONN

    These low-level routines must be called by programs that have to deal
    directly with the tteerrmmiinnffoo database to handle certain terminal
    capabilities, such as programming function keys. For all other
    functionality, ccuurrsseess routines are more suitable and their use is
    recommended.

    Initially, _ss_ee_tt_uu_pp_tt_ee_rr_mm(3) should be called. Note that _ss_ee_tt_uu_pp_tt_ee_rr_mm(3) is
    automatically called by _ii_nn_ii_tt_ss_cc_rr(3) and _nn_ee_ww_tt_ee_rr_mm(3). This defines the set of
    terminal-dependent variables (listed in _t_e_r_m_i_n_f_o(5). The tteerrmmiinnffoo
    variables lliinneess and ccoolluummnnss are initialized by _ss_ee_tt_uu_pp_tt_ee_rr_mm(3) as follows: If
    use_env has been called, values for lliinneess and ccoolluummnnss specified in
    tteerrmmiinnffoo are used. Otherwise, if the environment variables LINES and
    COLUMNS exist, their values are used. If these environment variables do
    not exist and the program is running in a window, the current window size
    is used. Otherwise, if the environment variables do not exist, the values
    for lliinneess and ccoolluummnnss specified in the tteerrmmiinnffoo database are used.

    The header files <<ccuurrsseess..hh>> and <<tteerrmm..hh>> should be included (in this
    order) to get the definitions for these strings, numbers, and flags.
    Parameterized strings should be passed through _tt_pp_aa_rr_mm(3) to instantiate
    them. All tteerrmmiinnffoo strings (including the output of _tt_pp_aa_rr_mm(3)) should be
    printed with _tt_pp_uu_tt_ss(3) or _pp_uu_tt_pp(3). Call the _rr_ee_ss_ee_tt____ss_hh_ee_ll_ll____mm_oo_dd_ee(3) to restore
    the tty modes before exiting (see the _c_u_r_s___k_e_r_n_e_l(3) reference page).
    Programs which use cursor addressing should output eenntteerr__ccaa__mmooddee upon
    startup and should output eexxiitt__ccaa__mmooddee before exiting. Programs desiring
    shell escapes should call _rr_ee_ss_ee_tt____ss_hh_ee_ll_ll____mm_oo_dd_ee(3) and output eexxiitt__ccaa__mmooddee
    before the shell is called and should output eenntteerr__ccaa__mmooddee and call
    _rr_ee_ss_ee_tt____pp_rr_oo_gg____mm_oo_dd_ee(3) after returning from the shell.

    The _ss_ee_tt_uu_pp_tt_ee_rr_mm(3) routine reads in the tteerrmmiinnffoo database, initializing the
    tteerrmmiinnffoo structures, but does not set up the output virtualization
    structures used by ccuurrsseess The terminal type is the character string term;
    if term is null, the environment variable TERM is used. All output is to
    file descriptor fildes which is initialized for output. If errret is not
    null, then _ss_ee_tt_uu_pp_tt_ee_rr_mm(3) returns OK or ERR and stores a status value in the
    integer pointed to by errret. A status of 1 in errret is normal, 0 means
    that the terminal could not be found, and -1 means that the tteerrmmiinnffoo
    database could not be found. If errret is null, _ss_ee_tt_uu_pp_tt_ee_rr_mm(3) prints an
    error message upon finding an error and exits. Thus, the simplest call is:

    setupterm((char *)0, 1, (int *)0);

    which uses all the defaults and sends the output to stdout.

    The _ss_ee_tt_tt_ee_rr_mm(3) routine is being replaced by _ss_ee_tt_uu_pp_tt_ee_rr_mm(3). The call:

    setupterm(term, 1, (int *)0)

    provides the same functionality as setterm(term). The _ss_ee_tt_tt_ee_rr_mm(3) routine
    is included here for BSD compatibility, and is not recommended for new
    programs.

    The _ss_ee_tt____cc_uu_rr_tt_ee_rr_mm(3) routine sets the variable cur_term to nterm and makes
    all of the tteerrmmiinnffoo boolean, numeric, and string variables use the values
    from nterm. It returns the old value of cur_term.

    The _dd_ee_ll____cc_uu_rr_tt_ee_rr_mm(3) routine frees the space pointed to by oterm and makes
    it available for further use. If oterm is the same as cur_term, references
    to any of the tteerrmmiinnffoo boolean, numeric, and string variables thereafter
    may refer to invalid memory locations until another _ss_ee_tt_uu_pp_tt_ee_rr_mm(3) has been
    called.

    The _rr_ee_ss_tt_aa_rr_tt_tt_ee_rr_mm(3) routine is similar to _ss_ee_tt_uu_pp_tt_ee_rr_mm(3) and _ii_nn_ii_tt_ss_cc_rr(3),
    except that it is called after restoring memory to a previous state (for
    example, when reloading a game saved as a core image dump). It assumes
    that the windows and the input and output options are the same as when
    memory was saved, but the terminal type and baud rate may be different.
    Accordingly, it saves various tty state bits, does a setupterm, and then
    restores the bits.

    The _tt_pp_aa_rr_mm(3) routine instantiates the string str with parameters pi. A
    pointer is returned to the result of str with the parameters applied.

    The _tt_pp_uu_tt_ss(3) routine applies padding information to the string str and
    outputs it. The str must be a terminfo string variable or the return value
    from _tt_pp_aa_rr_mm(3), _tt_gg_ee_tt_ss_tt_rr(3), or _tt_gg_oo_tt_oo(3). affcnt is the number of lines
    affected, or 1 if not applicable. _pp_uu_tt_cc(3) is a _pp_uu_tt_cc_hh_aa_rr(3)-like routine to
    which the characters are passed, one at a time.

    The _pp_uu_tt_pp(3) routine calls

    tputs(str, 1, putchar).

    Note that the output of _pp_uu_tt_pp(3) always goes to stdout not to the fildes
    specified in _ss_ee_tt_uu_pp_tt_ee_rr_mm(3).

    The _vv_ii_dd_pp_uu_tt_ss(3) routine displays the string on the terminal in the video
    attribute mode attrs, which is any combination of the attributes listed in
    _c_u_r_s_e_s(3). The characters are passed to the _pp_uu_tt_cc_hh_aa_rr(3)-like routine
    _pp_uu_tt_cc(3).

    The _vv_ii_dd_aa_tt_tt_rr(3) routine is like the _vv_ii_dd_pp_uu_tt_ss(3) routine, except that it
    outputs through _pp_uu_tt_cc_hh_aa_rr(3).

    The _mm_vv_cc_uu_rr(3) routine provides low-level cursor motion. It takes effect
    immediately (rather than at the next refresh).

    The _tt_ii_gg_ee_tt_ff_ll_aa_gg(3), _tt_ii_gg_ee_tt_nn_uu_mm(3) and _tt_ii_gg_ee_tt_ss_tt_rr(3) routines return the value of
    the capability corresponding to the tteerrmmiinnffoo capname passed to them, such
    as xxeennll.

    The _tt_ii_gg_ee_tt_ff_ll_aa_gg(3) routine returns the value -1 if capname is not a boolean
    capability.

    The _tt_ii_gg_ee_tt_nn_uu_mm(3) routine returns the value -2 if capname is not a numeric
    capability.

    The _tt_ii_gg_ee_tt_ss_tt_rr(3) routine returns the value (char *)-1 if capname is not a
    string capability.

    The capname for each capability is given in the table column entitled
    capname code in the capabilities section of _t_e_r_m_i_n_f_o(5).

    char *boolnames, *boolcodes, *boolfnames char *numnames,
    *numcodes, *numfnames char *strnames, *strcodes, *strfnames

    These null-terminated arrays contain the capnames, the tteerrmmccaapp codes, and
    the full C names, for each of the tteerrmmiinnffoo variables.

  RREETTUURRNN VVAALLUUEE

    Routines that return an integer return ERR upon failure and OK (SVr4 only
    specifies "an integer value other than ERR") upon successful completion,
    unless otherwise noted in the preceding routine descriptions.

    Routines that return pointers always return NULL on error.

  NNOOTTEESS

    The _ss_ee_tt_uu_pp_tt_ee_rr_mm(3) routine should be used in place of _ss_ee_tt_tt_ee_rr_mm(3). It may be
    useful when you want to test for terminal capabilities without committing
    to the allocation of storage involved in _ii_nn_ii_tt_ss_cc_rr(3).

    Note that _vv_ii_dd_aa_tt_tt_rr(3) and _vv_ii_dd_pp_uu_tt_ss(3) may be macros.

  PPOORRTTAABBIILLIITTYY

    The function _ss_ee_tt_tt_ee_rr_mm(3) is not described in the XSI Curses standard and
    must be considered non-portable. All other functions are as described in
    the XSI curses standard.

    In System V Release 4, _ss_ee_tt____cc_uu_rr_tt_ee_rr_mm(3) has an iinntt return type and returns
    OK or ERR. We have chosen to implement the XSI Curses semantics.

    In System V Release 4, the third argument of _tt_pp_uu_tt_ss(3) has the type iinntt ((**

  SSEEEE AALLSSOO

    _c_u_r_s_e_s(3)

    _c_u_r_s___i_n_i_t_s_c_r(3)

    _c_u_r_s___k_e_r_n_e_l(3)

    _t_e_r_m_c_a_p(3)

    _p_u_t_c(3)

    _t_e_r_m_i_n_f_o(5)

