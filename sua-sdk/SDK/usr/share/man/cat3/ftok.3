ftok(3)                                                         ftok(3)

  ffttookk(())

  NNAAMMEE

    ftok() - Create key for IPC facilities.

  SSYYNNOOPPSSIISS

    #include <sys/ipc.h>

    key_t ftok(const char *path, int id)

  DDEESSCCRRIIPPTTIIOONN

    The _ff_tt_oo_kk(3) call creates a key to be used by interprocess communication
    facilities (IPC). The key is created based on the path and id that can be
    used in subsequent calls to _mm_ss_gg_gg_ee_tt(2), _ss_ee_mm_gg_ee_tt(2), and _ss_hh_mm_gg_ee_tt(2).

    The path must be the pathname of an existing file that the process can
    access. If the same file can be referred to by different path names (for
    instance, relative paths), all paths that refer to the same file will
    result in the same key.

    The id is a character that uniquely identifies a particular project. If
    the low order 8 bits of id are 0, behavior is unspecified.

  RREETTUURRNN VVAALLUUEESS

    The _ff_tt_oo_kk(3) call returns a key if it succeeds. Otherwise it returns -1 and
    sets errno to indicate the error.

  EERRRROORRSS

    The _ff_tt_oo_kk(3) function can fail for the following reasons:

    [EACCES]
        The process did not have permission to searfch a component of the path
        prefix.

    [ELOOP]
        Too many symbolic links were encountered in translating the pathname.

    [ENAMETOOLONG]
        The path argument was longer than {PATH_MAX} or a component was longer
        than {NAME_MAX}.

    [ENOENT]
        Some component of path doesn't exist or path is an empty string.

    [ENOTDIR]
        Some component of the path prefix is not a directory.

  NNOOTTEESS

    This implementation of _ff_tt_oo_kk(3) cannot distinguish between local and
    network drives, because the _ss_tt_aa_tt_vv_ff_ss(2) function cannot distinguish between
    local and remote files and because of limitations in common network file
    systems (other than NFS).

    Because these remote drives won't provide reproducible values for the
    inode number, the return values (generated by _ff_tt_oo_kk(3) from the st_ino
    member of the ssttaatt structure) will not be reproducible.

  SSEEEE AALLSSOO

    _m_s_g_g_e_t(2)

    _s_e_m_g_e_t(2)

    _s_h_m_g_e_t(2)

  UUSSAAGGEE NNOOTTEESS

    The ffttookk function is thread safe.

    The ffttookk function is not async-signal safe.

