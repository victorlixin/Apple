pair_content(3)                                         pair_content(3)

  ccuurrss__ccoolloorr(())

  NNAAMMEE

    start_color(), init_pair(), init_color(), has_colors(),
    can_change_color(), color_content(), pair_content - curses color
    manipulation routines

  SSYYNNOOPPSSIISS

    #include <curses.h>

    int start_color(void);
    int init_pair(short pair, short f, short b);
    int init_color(short color, short r, short g, short b);
    bool has_colors(void);
    bool can_change_color(void);
    int color_content(short color, short *r, short *g, short *b);
    int pair_content(short pair, short *f, short *b);

  DDEESSCCRRIIPPTTIIOONN

  OOvveerrvviieeww

    ccuurrsseess support color attributes on terminals with that capability. To use
    these routines _ss_tt_aa_rr_tt____cc_oo_ll_oo_rr(3) must be called, usually right after
    _ii_nn_ii_tt_ss_cc_rr(3). Colors are always used in pairs (referred to as color-pairs).
    A color-pair consists of a foreground color (for characters) and a
    background color (for the blank field on which the characters are
    displayed). A programmer initializes a color-pair with the routine
    _ii_nn_ii_tt____pp_aa_ii_rr(3). After it has been initialized, COLOR_PAIR(n), a macro
    defined in <<ccuurrsseess..hh>>, can be used as a new video attribute.

    If a terminal is capable of redefining colors, the programmer can use the
    routine _ii_nn_ii_tt____cc_oo_ll_oo_rr(3) to change the definition of a color. The routines
    _hh_aa_ss____cc_oo_ll_oo_rr_ss(3) and _cc_aa_nn____cc_hh_aa_nn_gg_ee____cc_oo_ll_oo_rr(3) return TRUE or FALSE, depending on
    whether the terminal has color capabilities and whether the programmer can
    change the colors. The routine _cc_oo_ll_oo_rr____cc_oo_nn_tt_ee_nn_tt(3) allows a programmer to
    extract the amounts of red, green, and blue components in an initialized
    color. The routine _pp_aa_ii_rr____cc_oo_nn_tt_ee_nn_tt(3) allows a programmer to find out how a
    given color-pair is currently defined.

  RRoouuttiinnee DDeessccrriippttiioonnss

    The _ss_tt_aa_rr_tt____cc_oo_ll_oo_rr(3) routine requires no arguments. It must be called if the
    programmer wants to use colors, and before any other color manipulation
    routine is called. It is good practice to call this routine right after
    _ii_nn_ii_tt_ss_cc_rr(3). _ss_tt_aa_rr_tt____cc_oo_ll_oo_rr(3) initializes eight basic colors (black, red,
    green, yellow, blue, magenta, cyan, and white), and two global variables,
    COLORS and COLOR_PAIRS (respectively defining the maximum number of colors
    and color-pairs the terminal can support). It also restores the colors on
    the terminal to the values they had when the terminal was just turned on.

    The _ii_nn_ii_tt____pp_aa_ii_rr(3) routine changes the definition of a color-pair. It takes
    three arguments: the number of the color-pair to be changed, the
    foreground color number, and the background color number. The value of the
    first argument must be between 1 and COLOR_PAIRS The value of the second
    and third arguments must be between 0 and COLORS (the 0 color pair is
    wired to white on black and cannot be changed). If the color-pair was
    previously initialized, the screen is refreshed and all occurrences of
    that color-pair is changed to the new definition.

    The _ii_nn_ii_tt____cc_oo_ll_oo_rr(3) routine changes the definition of a color. It takes four
    arguments: the number of the color to be changed followed by three RGB
    values (for the amounts of red, green, and blue components). The value of
    the first argument must be between 0 and COLORS (See the section CCoolloorrss
    for the default color index.) Each of the last three arguments must be a
    value between 0 and 1000. When _ii_nn_ii_tt____cc_oo_ll_oo_rr(3) is used, all occurrences of
    that color on the screen immediately change to the new definition.

    The _hh_aa_ss____cc_oo_ll_oo_rr_ss(3) routine requires no arguments. It returns TRUE if the
    terminal can manipulate colors; otherwise, it returns FALSE. This routine
    facilitates writing terminal-independent programs. For example, a
    programmer can use it to decide whether to use color or some other video
    attribute.

    The _cc_aa_nn____cc_hh_aa_nn_gg_ee____cc_oo_ll_oo_rr(3) routine requires no arguments. It returns TRUE if
    the terminal supports colors and can change their definitions; other, it
    returns FALSE. This routine facilitates writing terminal-independent
    programs.

    The _cc_oo_ll_oo_rr____cc_oo_nn_tt_ee_nn_tt(3) routine gives programmers a way to find the intensity
    of the red, green, and blue (RGB) components in a color. It requires four
    arguments: the color number, and three addresses of sshhoorrtts for storing the
    information about the amounts of red, green, and blue components in the
    given color. The value of the first argument must be between 0 and COLORS
    The values that are stored at the addresses pointed to by the last three
    arguments are between 0 (no component) and 1000 (maximum amount of
    component).

    The _pp_aa_ii_rr____cc_oo_nn_tt_ee_nn_tt(3) routine allows programmers to find out what colors a
    given color-pair consists of. It requires three arguments: the color-pair
    number, and two addresses of sshhoorrtts for storing the foreground and the
    background color numbers. The value of the first argument must be between
    1 and COLOR_PAIRS The values that are stored at the addresses pointed to
    by the second and third arguments are between 0 and COLORS

  CCoolloorrss

    In <<ccuurrsseess..hh>> the following macros are defined. These are the default
    colors. ccuurrsseess also assumes that COLOR_BLACK is the default background
    color for all terminals.

    COLOR_BLACK
    COLOR_RED
    COLOR_GREEN
    COLOR_YELLOW
    COLOR_BLUE
    COLOR_MAGENTA
    COLOR_CYAN
    COLOR_WHITE

  RREETTUURRNN VVAALLUUEE

    The routines _cc_aa_nn____cc_hh_aa_nn_gg_ee____cc_oo_ll_oo_rr(3) and _hh_aa_ss____cc_oo_ll_oo_rr_ss(3) return TRUE or FALSE.

    All other routines return the integer ERR upon failure and an OK (SVr4
    specifies only "an integer value other than ERR") upon successful
    completion. Note that setting an implicit background color via a color
    pair affects only character cells that a character write operation
    explicitly touches. To change the background color used when parts of a
    window are blanked by erasing or scrolling operations, see _c_u_r_s___b_k_g_d(3).

    Several caveats apply on 386 and 486 machines with VGA-compatible
    graphics:

    COLOR_YELLOW is actually brown. To get yellow, use COLOR_YELLOW combined
    with the A_BOLD attribute.

    The A_BLINK attribute should in theory cause the background to go bright.
    This often fails to work, and even some cards for which it mostly works
    (such as the Paradise and compatibles) do the wrong thing when you try to
    set a bright "yellow" background (you get a blinking yellow foreground
    instead).

    Color RGB values are not settable. This implementation satisfies XSI
    Curses's minimum maximums for COLORS and COLOR_PAIRS

  SSEEEE AALLSSOO

    _c_u_r_s_e_s(3)

    _c_u_r_s___a_t_t_r(3)

    _c_u_r_s___i_n_i_t_s_c_r(3)

