rand48(3)                                                     rand48(3)

  rraanndd4488(())

  NNAAMMEE

    drand48(), erand48(), lrand48(), nrand48(), mrand48(), jrand48(),
    srand48(), seed48(), lcong48() - pseudo random number generators and
    initialization routines

  SSYYNNOOPPSSIISS

    #include <stdlib.h>

    double drand48 (void)
    double erand48 (unsigned short xseed[3])
    long lrand48 (void)
    long nrand48 (unsigned short xseed[3])
    long mrand48 (void)
    long jrand48 (unsigned short xseed[3])
    void srand48 (long seed)
    unsigned short * seed48 (unsigned short xseed[3])
    void lcong48 (unsigned short p[7])

  DDEESSCCRRIIPPTTIIOONN

    The _rr_aa_nn_dd_44_88(3) family of functions generates pseudo-random numbers using a
    linear congruential algorithm working on integers 48 bits in size. The
    particular formula employed is:

    rr(n+1) = (a * rr(n) + c) mod m

    where the default values are for the multiplicand a = 0xfdeece66d =
    25214903917 and the addend c = 0xb = 11. The modulo is always fixed at m =
    2 ** 48. rr(n) is called the seed of the random number generator.

    For all the six generator routines described next, the first computational
    step is to perform a single iteration of the algorithm.

    The functions _dd_rr_aa_nn_dd_44_88(3) and _ee_rr_aa_nn_dd_44_88(3) return values of type ddoouubbllee. The
    full 48 bits of rr(n+1) are loaded into the mantissa of the returned value,
    with the exponent set such that the values produced lie in the interval
    [0.0, 1.0).

    The functions _ll_rr_aa_nn_dd_44_88(3) and _nn_rr_aa_nn_dd_44_88(3) return values of type long in the
    range [0, 2**31-1]. The high-order (31) bits of rr(n+1) are loaded into the
    lower bits of the returned value, with the topmost (sign) bit set to zero.

    The functions _mm_rr_aa_nn_dd_44_88(3) and _jj_rr_aa_nn_dd_44_88(3) return values of type lloonngg in the
    range [-2**31, 2**31-1]. The high-order (32) bits of rr(n+1) are loaded
    into the returned value.

    The functions _dd_rr_aa_nn_dd_44_88(3), _ll_rr_aa_nn_dd_44_88(3), and _mm_rr_aa_nn_dd_44_88(3) use an internal
    buffer to store rr(n). For these functions the initial value of rr(0) =
    0x1234abcd330e = 20017429951246.

    On the other hand, _ee_rr_aa_nn_dd_44_88(3), _nn_rr_aa_nn_dd_44_88(3), and _jj_rr_aa_nn_dd_44_88(3) utilize a user-
    supplied buffer to store the seed rr(n), which consists of an array of
    three shorts, where the zeroth member holds the least significant bits.

    All functions share the same multiplicand and addend.

    The function _ss_rr_aa_nn_dd_44_88(3) is used to initialize the internal buffer rr(n) of
    _dd_rr_aa_nn_dd_44_88(3), _ll_rr_aa_nn_dd_44_88(3), and _mm_rr_aa_nn_dd_44_88(3) such that the 32 bits of the seed
    value are copied into the upper 32 bits of rr(n), with the lower 16 bits of
    rr(n) arbitrarily being set to 0x330e. Additionally, the constant
    multiplicand and addend of the algorithm are reset to the default values
    given above.

    The function _ss_ee_ee_dd_44_88(3) also initializes the internal buffer rr(n) of
    _dd_rr_aa_nn_dd_44_88(3), _ll_rr_aa_nn_dd_44_88(3), and _mm_rr_aa_nn_dd_44_88(3), but here all 48 bits of the seed
    can be specified in an array of three shorts, where the zeroth member
    specifies the lowest bits. Again, the constant multiplicand and addend of
    the algorithm are reset to the default values given above. The function
    _ss_ee_ee_dd_44_88(3) returns a pointer to an array of three shorts, which contains
    the old seed. This array is statically allocated, thus its contents are
    lost after each new call to _ss_ee_ee_dd_44_88(3).

    Finally, _ll_cc_oo_nn_gg_44_88(3) allows full control over the multiplicand and addend
    used in _dd_rr_aa_nn_dd_44_88(3), _ee_rr_aa_nn_dd_44_88(3), _ll_rr_aa_nn_dd_44_88(3), _nn_rr_aa_nn_dd_44_88(3), _mm_rr_aa_nn_dd_44_88(3), and
    _jj_rr_aa_nn_dd_44_88(3), and the seed used in _dd_rr_aa_nn_dd_44_88(3), _ll_rr_aa_nn_dd_44_88(3), and _mm_rr_aa_nn_dd_44_88(3).
    An array of seven shorts is passed as parameter. The first three shorts
    are used to initialize the seed, the second three are used to initialize
    the multiplicand, and the last short is used to initialize the addend. It
    is thus not possible to use values greater than 0xffff as the addend.

    All three methods of seeding the random number generator always also set
    the multiplicand and addend for any of the six generator calls.

    For a more powerful random number generator, see _r_a_n_d_o_m(3).

  SSEEEE AALLSSOO

    _r_a_n_d(3)

    _r_a_n_d_o_m(3)

  UUSSAAGGEE NNOOTTEESS

    The following functions are thread safe: eerraanndd4488,, jjrraanndd4488,, llccoonngg4488,,
    nnrraanndd4488,, sseeeedd4488,, ssrraanndd4488. The following functions are not thread safe:
    rraanndd4488,, ddrraanndd4488,, llrraanndd4488,, mmrraanndd4488.

    None of these functions are async-signal safe.

