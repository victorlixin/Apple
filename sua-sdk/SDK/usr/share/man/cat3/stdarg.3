stdarg(3)                                                     stdarg(3)

  ssttddaarrgg(())

  NNAAMMEE

    stdarg - variable argument lists

  SSYYNNOOPPSSIISS

    #include <stdarg.h>

    void va_start (va_list ap, last)
    type va_arg (va_list ap, type)
    void va_end (va_list ap)

  DDEESSCCRRIIPPTTIIOONN

    A function may be called with a varying number of arguments of varying
    types. The include file <<ssttddaarrgg..hh>> declares a type vvaa__lliisstt and defines
    three macros for stepping through a list of arguments whose number and
    types are not known to the called function.

    The called function must declare an object of type vvaa__lliisstt which is used
    by the macros _vv_aa____ss_tt_aa_rr_tt(3), _vv_aa____aa_rr_gg(3), and _vv_aa____ee_nn_dd(3).

    The _vv_aa____ss_tt_aa_rr_tt(3) macro initializes ap for subsequent use by _vv_aa____aa_rr_gg(3) and
    _vv_aa____ee_nn_dd(3), and must be called first.

    The parameter last is the name of the last parameter before the variable
    argument list; that is, the last parameter of which the calling function
    knows the type.

    Because the address of this parameter is used in the _vv_aa____ss_tt_aa_rr_tt(3) macro, it
    should not be declared as a register variable, or as a function or an
    array type.

    The _vv_aa____ss_tt_aa_rr_tt(3) macro returns no value.

    The _vv_aa____aa_rr_gg(3) macro expands to an expression that has the type and value
    of the next argument in the call. The parameter ap is the vvaa__lliisstt ap
    initialized by _vv_aa____ss_tt_aa_rr_tt(3). Each call to _vv_aa____aa_rr_gg(3) modifies ap so that the
    next call returns the next argument. The parameter type is a type name
    specified so that the type of a pointer to an object that has the
    specified type can be obtained simply by adding a * to type.

    If there is no next argument, or if type is not compatible with the type
    of the actual next argument (as promoted according to the default argument
    promotions), random errors will occur.

    The first use of the _vv_aa____aa_rr_gg(3) macro after that of the _vv_aa____ss_tt_aa_rr_tt(3) macro
    returns the argument after last. Successive invocations return the values
    of the remaining arguments.

    The _vv_aa____ee_nn_dd(3) macro handles a normal return from the function whose
    variable argument list was initialized by _vv_aa____ss_tt_aa_rr_tt(3).

    The _vv_aa____ee_nn_dd(3) macro returns no value.

  EEXXAAMMPPLLEESS

    The function foo takes a string of format characters and prints out the
    argument associated with each format character based on the type.

    void foo(char *fmt, ...)
    {
         va_list ap;
         int d;
         char c, *p, *s;
         va_start(ap, fmt);
         while (*fmt)
              switch(*fmt++) {
              case 's':           /* string */
                   s = va_arg(ap, char *);
                   printf("string %s\n", s);
                   break;
              case 'd':           /* int */
                   d = va_arg(ap, int);
                   printf("int %d\n", d);
                   break;
              case 'c':           /* char */
                   c = va_arg(ap, char);
                   printf("char %c\n", c);
                   break;
              }
         va_end(ap);
    }

  BBUUGGSS

    Unlike the varargs macros, the ssttddaarrgg(3) macros do not permit programmers
    to code a function with no fixed arguments. This problem generates work
    mainly when converting varargs code to ssttddaarrgg(3) code, but it also creates
    difficulties for variadic functions that would pass all of their arguments
    on to a function that takes a vvaa__lliisstt argument, such as _vv_ff_pp_rr_ii_nn_tt_ff(3).

  UUSSAAGGEE NNOOTTEESS

    The ssttddaarrgg function is thread safe.

    The ssttddaarrgg function is not async-signal safe.

