poll(3)                                                         poll(3)

  ppoollll(())

  NNAAMMEE

    poll() - synchronous I/O multiplexing

  SSYYNNOOPPSSIISS

    #include <poll.h>

    int poll(struct pollfd *fds, int nfds, int timeout)

  DDEESSCCRRIIPPTTIIOONN

    The ppoollll(3) function provides a mechanism for reporting I/O conditions
    across a set of file descriptors.

    The arguments are as follows:

    fds
        Points to an array of ppoollllffdd structures, which are defined as:
        struct pollfd {
                int fd;
                short events;
                short revents;
        };
        The fd member is an open file descriptor that refers to the file //
        pprroocc//procID//ccttll, where procID is the process ID of a process running
        on the system. (The ppoollll function is not supported for use with other
        files.) The events and revents members are bitmasks of conditions to
        monitor and conditions found, respectively.

    nfds
        The number of ppoollllffdd structures in the fds array.

    timeout
        Maximum interval to wait for the poll to complete, in milliseconds. If
        this value is 0, the ppoollll() will return immediately. If this value is
        -1, ppoollll() will block indefinitely until a condition is found.

    The calling process sets the events bitmask and ppoollll() sets the revents
    bitmask. Each call to ppoollll() resets the revents bitmask for accuracy. The
    condition flags in the bitmasks are defined as:

    POLLIN
        Data other than high priority data can be read without blocking.

    POLLRDNORM
        Normal data can be read without blocking.

    POLLRDBAND
        Data with a nonzero priority can be read without blocking.

    POLLPRI
        High priority data can be read without blocking.

    POLLOUT
        Data other than high priority data can be written without blocking.

    POLLWRNORM
        Normal data can be written without blocking.

    POLLWRBAND
        Data with a nonzero priority can be written without blocking.

    POLLERR
        An exceptional condition has occurred on the device or socket. This
        flag is always checked, even if not present in the events bitmask.

    POLLHUP
        The device or socket has been disconnected. This flag is always
        checked, even if not present in the events bitmask. NOte that POLLHUP
        and POLLOUT should never be present in the revents bitmask at the same
        time.

    POLLNVAL
        The file descriptor is not open. This flag is always checked, even if
        it is not present in the events bitmask.

    If timeout is neither zero nor -1, it specifies a maximum interval to wait
    for any file descriptor to become ready, in milliseconds. If timeout is -
    1, the poll blocks indefinitely. If timeout is zero, the ppoollll() returns
    without blocking.

  RREETTUURRNN VVAALLUUEESS

    The ppoollll() function returns the number of descriptors that are ready for
    I/O, or -1 if an error occurred. If the time limit expires, ppoollll() returns
    0. If ppoollll() returns with an error, including one due to an interrupted
    call, the fds array will be unmodified.

  EERRRROORRSS

    [EFAULT]
        The fds argument points outside the allocated address space of the
        process.

    [EINTR]
        A signal was delivered before the time limit expired and before any of
        the selected events occurred.

    [EINVAL]
        The specified time limit is negative.

  NNOOTTEE

    On Subsystem for UNIX-based Applications, ppoollll() is supported only for use with ccttll files (located in //
    pprroocc//procID). No other file types are allowed.

  SSEEEE AALLSSOO

    _a_c_c_e_p_t(2)

    _c_o_n_n_e_c_t(2)

    _r_e_a_d(2)

    _r_e_c_v(2)

    _s_e_l_e_c_t(2)

    _s_e_n_d(2)

  UUSSAAGGEE NNOOTTEESS

    The ppoollll function is thread safe.

    The ppoollll function is async-signal safe.

