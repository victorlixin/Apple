t_rcv(3)                                                       t_rcv(3)

  tt__rrccvv(())

  NNAAMMEE

    t_rcv - receive data or expedited data sent over a connection

  SSYYNNOOPPSSIISS

    #include <xti.h>

    int t_rcv(
        int fd,
        void *buf,
        unsigned int nbytes,
        int *flags)

  DDEESSCCRRIIPPTTIIOONN

    This function receives either normal or expedited data. The argument fd
    identifies the local transport endpoint through which data will arrive,
    buf points to a receive buffer where user data will be placed, and nbytes
    specifies the size of the receive buffer. The argument flags may be set on
    return from tt__rrccvv() and specifies optional flags as described below.

    PPaarraammeetteerrss     BBeeffoorree ccaallll     AAfftteerr ccaallll

    fd             x               /

    buf            x               (x)

    nbytes         x               /

    flags          /               x

    By default, tt__rrccvv() operates in synchronous mode and will wait for data to
    arrive if none is currently available. However, if O_NONBLOCK is set
    (through _tt____oo_pp_ee_nn(3) or _ff_cc_nn_tt_ll(2)), tt__rrccvv() will execute in asynchronous mode
    and will fail if no data is available. (See [TNODATA] below.)

    On return from the call, if T_MORE is set in flags, this indicates that
    there is more data, and the current transport service data unit (TSDU) or
    expedited transport service data unit (ETSDU) must be received in multiple
    tt__rrccvv() calls. In the asynchronous mode, or under unusual conditions (for
    example, the arrival of a signal or T_EXDATA event), the T_MORE flag may
    be set on return from the tt__rrccvv() call even when the number of bytes
    received is less than the size of the receive buffer specified. Each
    tt__rrccvv() with the T_MORE flag set indicates that another tt__rrccvv() must
    follow to get more data for the current TSDU. The end of the TSDU is
    identified by the return of a tt__rrccvv() call with the T_MORE flag not set.
    If the transport provider does not support the concept of a TSDU as
    indicated in the info argument on return from _tt____oo_pp_ee_nn(3) or _tt____gg_ee_tt_ii_nn_ff_oo(3),
    the T_MORE flag is not meaningful and should be ignored. If nbytes is
    greater than zero on the call to tt__rrccvv(), tt__rrccvv() will return 0 only if
    the end of a TSDU is being returned to the user.

    On return, the data is expedited if T_EXPEDITED is set in flags. If T_MORE
    is also set, it indicates that the number of expedited bytes exceeded
    nbytes, a signal has interrupted the call, or that an entire ETSDU was not
    available (only for transport protocols that support fragmentation of
    ETSDUs). The rest of the ETSDU will be returned by subsequent calls to
    tt__rrccvv() which will return with T_EXPEDITED set in flags. The end of the
    ETSDU is identified by the return of a tt__rrccvv() call with T_EXPEDITED set
    and T_MORE cleared. If the entire ETSDU is not available it is possible
    for normal data fragments to be returned between the initial and final
    fragments of an ETSDU.

    If a signal arrives, tt__rrccvv() returns, giving the user any data currently
    available. If no data is available, tt__rrccvv() returns -1, sets t_errno to
    [TSYSERR] and errno to [EINTR]. If some data is available, tt__rrccvv() returns
    the number of bytes received and T_MORE is set in flags.

    In synchronous mode, the only way for the user to be notified of the
    arrival of normal or expedited data is to issue this function or check for
    the T_DATA or T_EXDATA events using the _tt____ll_oo_oo_kk(3) function. Additionally,
    the process can arrange to be notified through the EM interface.

  VVAALLIIDD SSTTAATTEESS

    T_DATAXFER, T_OUTREL

  EERRRROORRSS

    On failure, t_errno is set to one of the following:

    [TBADF]
        The specified file descriptor does not refer to a transport endpoint.

    [TLOOK]
        An asynchronous event has occurred on this transport endpoint and
        requires immediate attention.

    [TNODATA]
        O_NONBLOCK was set, but no data is currently available from the
        transport provider.

    [TNOTSUPPORT]
        This function is not supported by the underlying transport provider.

    [TPROTO]
        This error indicates that a communication problem has been detected
        between XTI and the transport provider for which there is no other
        suitable XTI error (t_errno).

    [TSYSERR]
        A system error has occurred during execution of this function.

  RREETTUURRNN VVAALLUUEE

    On successful completion, tt__rrccvv() returns the number of bytes received.
    Otherwise, it returns -1 on failure and t_errno is set to indicate the
    error.

  SSEEEE AALLSSOO

    _ff_cc_nn_tt_ll(2)

    _tt____gg_ee_tt_ii_nn_ff_oo(3)

    _tt____ll_oo_oo_kk(3)

    _tt____oo_pp_ee_nn(3)

    _tt____ss_nn_dd(3)

  UUSSAAGGEE NNOOTTEESS

    The tt__rrccvv function is not thread safe.

    The tt__rrccvv function is not async-signal safe.

