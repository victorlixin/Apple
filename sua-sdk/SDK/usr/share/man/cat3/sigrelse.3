sigrelse(3)                                                 sigrelse(3)

  ssiiggppaauussee(())

  NNAAMMEE

    sighold(), sigignore(), sigpause(), sigrelse(), sigset() - System V signal
    management routines

  SSYYNNOOPPSSIISS

    #include <signal.h>

    int sighold(int signum)
    int sigignore(int signum)
    int sigpause(int signum)
    int sigrelse(int signum)
    void (*sigset(int signum, void (*handler)(int)))(int);

  DDEESSCCRRIIPPTTIIOONN

    These functions provide a simplified form of signal management; they are
    implemented using the _ss_ii_gg_aa_cc_tt_ii_oo_nn(2) call.

    The _ss_ii_gg_ss_ee_tt(3) function modifies the handling of the signal specified by
    signum. The signal may be any signal but SIGKILL and SIGSTOP. The handler
    is SIG_DFL (default), SIG_IGN (ignore), SIG_HOLD (block signal), or a
    pointer to a handler function. If handler points to a signal handler,
    signum is added to the calling process' signal mask before executing the
    handler. When the handler returns, the system restores the signal mask to
    its previous state. If the handler is SIG_HOLD, _ss_ii_gg_ss_ee_tt(3) adds the signal
    to the process' signal mask but doesn't change how the signal is handled.
    If the handler is SIG_DFL or SIG_IGN, the signal is removed from the
    signal mask.

    The _ss_ii_gg_hh_oo_ll_dd(3) function adds signum to the calling process' signal mask.

    The _ss_ii_gg_rr_ee_ll_ss_ee(3) function removes signum from the calling process' signal
    mask.

    The _ss_ii_gg_ii_gg_nn_oo_rr_ee(3) function sets the disposition of signum to SIG_IGN.

    The _ss_ii_gg_pp_aa_uu_ss_ee(3) function removes the signal signum from the process'
    signal mask and then suspends the process until a signal is received.

  RREETTUURRNN VVAALLUUEE

    On success, _ss_ii_gg_ss_ee_tt(3) returns the signal's previous disposition if the
    signal is not currently blocked. It returns SIG_HOLD if the signal is
    blocked. On failure, it returns SIG_ERR and sets errno to indicate the
    error.

    The _ss_ii_gg_pp_aa_uu_ss_ee(3) function suspends execution of the process until a signal
    is received; then it returns -1 and sets errno to [EINTR].

    The other functions return 0 on success. On failure, they return -1 and
    set errno to indicate the error.

  EERRRROORRSS

    The functions can fail if:

    [EINVAL]
        The value of signum is an illegal signal number.

    The _ss_ii_gg_ss_ee_tt(3) and _ss_ii_gg_ii_gg_nn_oo_rr_ee(3) calls will also fail if:

    [EINVAL]
        They attempt to catch a signal that cannot be caught, or to ignore a
        signal that cannot be ignored.

  NNOOTTEESS

    This implementation of _ss_ii_gg_pp_aa_uu_ss_ee(3) follows the behavior described in the
    Single UNIX Specification, not BSD practice.

  SSEEEE AALLSSOO

    _s_i_g_a_c_t_i_o_n(2)

    _s_i_g_n_a_l(2)

  UUSSAAGGEE NNOOTTEESS

    All of these functions are thread safe.

    The following functions are async-signal safe: ssiiggppaauussee,, ssiiggsseett. The
    following functions are not async-signal safe: ssiigghhoolldd,, ssiiggiiggnnoorree,,
    ssiiggrreellssee.

