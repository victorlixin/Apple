pclose(3)                                                     pclose(3)

  ppooppeenn(())

  NNAAMMEE

    popen(), pclose() - process I/O with pipes

  SSYYNNOOPPSSIISS

    #include <stdio.h>

    FILE * popen (const char *command, const char *type)
    int pclose (FILE *stream)

  DDEESSCCRRIIPPTTIIOONN

    The _pp_oo_pp_ee_nn(3) function opens a process by creating a pipe, forking, and
    invoking the shell. Since a pipe is by definition unidirectional, the type
    argument may specify only reading or writing, not both; the resulting
    stream is correspondingly read-only or write-only.

    The command argument is a pointer to a null-terminated string containing a
    shell command line. This command is passed to //bbiinn//sshh using the --cc flag;
    interpretation, if any, is performed by the shell. The type argument is a
    pointer to a null-terminated string which must be either rr for reading or
    ww for writing.

    The return value from _pp_oo_pp_ee_nn(3) is a normal standard I/O stream in all
    respects save that it must be closed with _pp_cc_ll_oo_ss_ee(3) rather than _ff_cc_ll_oo_ss_ee(3).
    Writing to such a stream writes to the standard input of the command; the
    command's standard output is the same as that of the process that called
    _pp_oo_pp_ee_nn(3) unless this is altered by the command itself. Conversely, reading
    from a popened stream reads the command's standard output, and the
    command's standard input is the same as that of the process that called
    _pp_oo_pp_ee_nn(3).

    Note that output _pp_oo_pp_ee_nn(3) streams are fully buffered by default.

    The _pp_cc_ll_oo_ss_ee(3) function waits for the associated process to terminate and
    returns the exit status of the command.

  RREETTUURRNN VVAALLUUEE

    The _pp_oo_pp_ee_nn(3) function returns NULL if the _ff_oo_rr_kk(2) or _pp_ii_pp_ee(2) calls fail,
    or if it cannot allocate memory.

    On success, the _pp_cc_ll_oo_ss_ee(3) function the exit status of the terminating
    command. On failure, _pp_cc_ll_oo_ss_ee(3) returns -1 if stream is not associated with
    a _pp_oo_pp_ee_nn(3)'ed command, or if stream already _pp_cc_ll_oo_ss_ee(3)'d

  EERRRROORRSS

    The _pp_oo_pp_ee_nn(3) function does not reliably set errno

  SSEEEE AALLSSOO

    _s_h(1)

    _f_o_r_k(2)

    _p_i_p_e(2)

    _f_f_l_u_s_h(3)

    _f_c_l_o_s_e(3)

    _f_o_p_e_n(3)

    _s_y_s_t_e_m(3)

  UUSSAAGGEE NNOOTTEESS

    All of these functions are thread safe.

    None of these functions are async-signal safe.

