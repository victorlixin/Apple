ftw(3)                                                           ftw(3)

  ffttww(())

  NNAAMMEE

    ftw() - walk a file tree

  SSYYNNOOPPSSIISS

    #include <ftw.h>

    int ftw (const char *path, int (*fn)(const char *,
             const struct stat *ptr, int flag), int ndirs);

  DDEESSCCRRIIPPTTIIOONN

    The _ff_tt_ww(3) call recursively descends the directory hierarchy rooted in
    path, calling the function pointed to by fn for each object. A null or
    empty string for path is an error. For each call, the function pointed to
    by fn is passed a pointer to the name of the object (a null-terminated
    character string), a pointer to a ssttaatt structure that contains information
    about the object, and an integer flag which defines the type of the
    object. Possible values of flag are:

    FTW_D
        The object is a directory.

    FTW_DNR
        The object is a directory that cannot be read. In this case, children
        of the directory are not read.

    FTW_F
        The object is a file.

    FTW_NS
        The object was not successfully _ss_tt_aa_tt(2)'ed. In this case, the ssttaatt
        function will contain undefined values. For example, a file with read
        but not execute/search permission can cause this value.

    FTW_SL
        The object is a symbolic link.

    The ndirs argument specifies the maximum number of file descriptors for
    use by _ff_tt_ww(3) while traversing the tree. The limit is a resource advisory
    for which _nn_ff_tt_ww(3) adjusts itself accordingly. The value of ndirs should be
    between 1 and {OPEN_MAX}. A value of zero allows _ff_tt_ww(3) to use as many
    file descriptors as it needs and can obtain for maximum performance.

    When _ff_tt_ww(3) returns, it closes any directory streams and file descriptors
    it uses, not counting any opened by the function pointed to by fn.

    The _ff_tt_ww(3) function visits a directory before visiting any of its
    children.

  RREETTUURRNN VVAALLUUEESS

    The _ff_tt_ww(3) function returns 0 when the tree is exhausted. If the function
    pointed to by fn returns a non-zero value or an error (other than
    [EACCES]), the _ff_tt_ww(3) function stops and returns that value. If _ff_tt_ww(3)
    detects an error, it returns -1 and sets errno.

  EERRRROORR VVAALLUUEESS

    The _ff_tt_ww(3) function may fail for the following reasons:

    [EACCES]
        The process does not have permission to read or search a component of
        path.

    [EINVAL]
        The ndirs argument is invalid.

    [ELOOP]
        There were too many symbolic links.

    [ENAMETOOLONG]
        The path is more than {PATH_MAX} characters long, or a path component
        is more than {NAME_MAX} characters long.

    [ENOENT]
        Either a component of path doesn't exist, or path is an empty string.

    [ENOMEM]
        Insufficient memory.

    [ENOTDIR]
        A component of path is not a directory.

  SSEEEE AALLSSOO

    _l_o_n_g_j_m_p(3)

    _m_a_l_l_o_c(3)

    _n_f_t_w(3)

    _o_p_e_n_d_i_r(3)

    _s_i_g_l_o_n_g_j_m_p(3)

    _s_t_a_t(2)

  UUSSAAGGEE NNOOTTEESS

    The ffttww function is not thread safe.

    The ffttww function is not async-signal safe.

