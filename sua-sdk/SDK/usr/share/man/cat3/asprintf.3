asprintf(3)                                                        asprintf(3)

NNAAMMEE
     aasspprriinnttff, vvaasspprriinnttff - formatted output conversion

SSYYNNOOPPSSIISS
     ##iinncclluuddee <<ssttddiioo..hh>>

     _i_n_t
     aasspprriinnttff(_c_h_a_r _*_*_r_e_t, _c_o_n_s_t _c_h_a_r _*_f_o_r_m_a_t, _._._.);

     ##iinncclluuddee <<ssttddaarrgg..hh>>

     _i_n_t
     vvaasspprriinnttff(_c_h_a_r _*_*_r_e_t, _c_o_n_s_t _c_h_a_r _*_f_o_r_m_a_t, _v_a___l_i_s_t _a_p);

DDEESSCCRRIIPPTTIIOONN
     The pprriinnttff() family of functions produce output according to the given
     _f_o_r_m_a_t as described below.  This format may contain ``conversion
     specifiers''; the results of such conversions, if any, depend on the
     arguments following the _f_o_r_m_a_t string.  aasspprriinnttff() and vvaasspprriinnttff() write
     to a dynamically allocated string that is stored in _r_e_t.

     These functions write the output under the control of a _f_o_r_m_a_t string
     that specifies how subsequent arguments (or arguments accessed via the
     variable-length argument facilities of stdarg(3)) are converted for out-
     put.

     These functions return the number of characters printed (not including
     the trailing `\0' used to end output to strings),

     aasspprriinnttff() and vvaasspprriinnttff() return a pointer to a buffer sufficiently
     large to hold the string in the _r_e_t argument.  This pointer should be
     passed to free(3) to release the allocated storage when it is no longer
     needed.  If sufficient space cannot be allocated, these functions will
     return -1.  The value of _r_e_t in this situation is implementation-depen-
     dent (on OpenBSD, _r_e_t will be set to the null pointer, but this behavior
     should not be relied upon).

     The arguments must correspond properly (after type promotion) with the
     conversion specifier.  After the %%, the following appear in sequence:

     ++oo   An optional field, consisting of a decimal digit string followed by a
         $$ specifying the next argument to access.  If this field is not pro-
         vided, the argument following the last argument accessed will be
         used.  Arguments are numbered starting at 11.

     ++oo   Zero or more of the following flags:

         --   A hash `##' character specifying that the value should be con-
             verted to an ``alternate form''.  For cc, dd, ii, nn, pp, ss, and uu
             conversions, this option has no effect.  For oo conversions, the
             precision of the number is increased to force the first character
             of the output string to a zero (except if a zero value is printed
             with an explicit precision of zero).  For xx and XX conversions, a
             non-zero result has the string `0x' (or `0X' for XX conversions)
             prepended to it.  For ee, EE, ff, gg, and GG conversions, the result
             will always contain a decimal point, even if no digits follow it
             (normally, a decimal point appears in the results of those con-
             versions only if a digit follows).  For gg and GG conversions,
             trailing zeros are not removed from the result as they would oth-
             erwise be.

         --   A zero `00' character specifying zero padding.  For all conver-
             sions except nn, the converted value is padded on the left with
             zeros rather than blanks.  If a precision is given with a numeric
             conversion (dd, ii, oo, uu, xx, and XX), the `00' flag is ignored.

         --   A negative field width flag `--' indicates the converted value is
             to be left adjusted on the field boundary.  Except for nn conver-
             sions, the converted value is padded on the right with blanks,
             rather than on the left with blanks or zeros.  A `--' overrides a
             `00' if both are given.

         --   A space, specifying that a blank should be left before a positive
             number produced by a signed conversion (dd, ee, EE, ff, gg, GG, or ii).

         --   A `++' character specifying that a sign always be placed before a
             number produced by a signed conversion.  A `++' overrides a space
             if both are used.

     ++oo   An optional decimal digit string specifying a minimum field width.
         If the converted value has fewer characters than the field width, it
         will be padded with spaces on the left (or right, if the left-adjust-
         ment flag has been given) to fill out the field width.

     ++oo   An optional precision, in the form of a period `..' followed by an
         optional digit string.  If the digit string is omitted, the precision
         is taken as zero.  This gives the minimum number of digits to appear
         for dd, ii, oo, uu, xx, and XX conversions, the number of digits to appear
         after the decimal-point for ee, EE, and ff conversions, the maximum num-
         ber of significant digits for gg and GG conversions, or the maximum
         number of characters to be printed from a string for ss conversions.

     ++oo   The optional character hh, specifying that a following dd, ii, oo, uu, xx,
         or XX conversion corresponds to a short int or unsigned short int
         argument, or that a following nn conversion corresponds to a pointer
         to a short int argument.

     ++oo   The optional character ll (ell) specifying that a following dd, ii, oo,
         uu, xx, or XX conversion corresponds to a long int or unsigned long int
         argument, or that a following nn conversion corresponds to a pointer
         to a long int argument.

     ++oo   The optional character sequence llll, specifying that a following dd, ii,
         oo, uu, xx, or XX conversion corresponds to a quad int or unsigned quad
         int argument, or that a following nn conversion corresponds to a
         pointer to a quad int argument.  The use of qq has been deprecated as
         conversion character.

     ++oo   The optional character tt, specifying that a following dd, ii, oo, uu, xx,
         or XX conversion corresponds to a _p_t_r_d_i_f_f___t or the corresponding
         unsigned integer type argument, or that a following nn conversion cor-
         responds to a pointer to a _p_t_r_d_i_f_f___t argument.

     ++oo   The optional character zz, specifying that a following dd, ii, oo, uu, xx,
         or XX conversion corresponds to a _s_i_z_e___t or the corresponding signed
         integer type argument, or that a following nn conversion corresponds
         to a pointer to a signed integer type corresponding to _s_i_z_e___t argu-
         ment.

     ++oo   The character LL specifying that a following ee, EE, ff, gg, or GG conver-
         sion corresponds to a long double argument (but note that long double
         values are not currently supported by the VAX compiler).

     ++oo   A character that specifies the type of conversion to be applied.

     A field width or precision, or both, may be indicated by an asterisk `*'
     or an asterisk followed by one or more decimal digits and a `$' instead
     of a digit string.  In this case, an int argument supplies the field
     width or precision.  A negative field width is treated as a left adjust-
     ment flag followed by a positive field width; a negative precision is
     treated as though it were missing.  If a single format directive mixes
     positional (nn$) and non-positional arguments, the results are undefined.

     The conversion specifiers and their meanings are:

     ddiioouuxxXX  The int (or appropriate variant) argument is converted to signed
             decimal (dd and ii), unsigned octal (oo), unsigned decimal (uu), or
             unsigned hexadecimal (xx and XX) notation.  The letters aabbccddeeff are
             used for xx conversions; the letters AABBCCDDEEFF are used for XX conver-
             sions.  The precision, if any, gives the minimum number of digits
             that must appear; if the converted value requires fewer digits,
             it is padded on the left with zeros.

     DDOOUU     The long int argument is converted to signed decimal, unsigned
             octal, or unsigned decimal, as if the format had been lldd, lloo, or
             lluu respectively.  These conversion characters are deprecated, and
             will eventually disappear.

     eeEE      The double argument is rounded and converted in the style
             [-]d..dddee+-dd where there is one digit before the decimal-point
             character and the number of digits after it is equal to the pre-
             cision; if the precision is missing, it is taken as 6; if the
             precision is zero, no decimal-point character appears.  An EE con-
             version uses the letter EE (rather than ee) to introduce the expo-
             nent.  The exponent always contains at least two digits; if the
             value is zero, the exponent is 00.

     ff       The double argument is rounded and converted to decimal notation
             in the style [-]ddd..ddd, where the number of digits after the
             decimal-point character is equal to the precision specification.
             If the precision is missing, it is taken as 6; if the precision
             is explicitly zero, no decimal-point character appears.  If a
             decimal point appears, at least one digit appears before it.

     ggGG      The double argument is converted in style ff or ee (or EE for GG con-
             versions).  The precision specifies the number of significant
             digits.  If the precision is missing, 6 digits are given; if the
             precision is zero, it is treated as 1.  Style ee is used if the
             exponent from its conversion is less than -4 or greater than or
             equal to the precision.  Trailing zeros are removed from the
             fractional part of the result; a decimal point appears only if it
             is followed by at least one digit.

     cc       The int argument is converted to an unsigned char, and the
             resulting character is written.

     ss       The char * argument is expected to be a pointer to an array of
             character type (pointer to a string).  Characters from the array
             are written up to (but not including) a terminating NUL charac-
             ter; if a precision is specified, no more than the number speci-
             fied are written.  If a precision is given, no null character
             need be present; if the precision is not specified, or is greater
             than the size of the array, the array must contain a terminating
             NUL character.

     pp       The void * pointer argument is printed in hexadecimal (as if by
             `%#x' or `%#lx').

     nn       The number of characters written so far is stored into the inte-
             ger indicated by the int * (or variant) pointer argument.  No
             argument is converted.

     %%       A `%' is written.  No argument is converted.  The complete con-
             version specification is `%%'.

     In no case does a non-existent or small field width cause truncation of a
     field; if the result of a conversion is wider than the field width, the
     field is expanded to contain the conversion result.

SSEEEE AALLSSOO
     printf(1), printf(3), strlcat(3), strlcpy(3), scanf(3)

NNOOTTEESS
     The conversion formats %%DD, %%OO, and %%UU are not standard and are provided
     only for backward compatibility.  The effect of padding the %%pp format
     with zeros (either by the `00' flag or by specifying a precision), and the
     benign effect (i.e., none) of the `##' flag on %%nn and %%pp conversions, as
     well as other nonsensical combinations such as %%LLdd, are not standard;
     such combinations should be avoided.  The aasspprriinnttff() and vvaasspprriinnttff()
     interfaces are not portable.

