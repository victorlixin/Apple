env_get(3)                                                   env_get(3)

  eennvv__tt(())

  NNAAMMEE

    env_t - environment manipulation type and functions

  SSYYNNOOPPSSIISS

    #include <interix/env.h>

    env_t * env_alloc (void)
    env_t * env_winlogin (struct passwd *pw)
    env_t * env_login (struct passwd *pw)
    env_t * env_cron (struct passwd *pw)
    void env_free (env_t *environ)
    char * env_get (env_t *env, char *name)
    int env_set (env_t *env, char *name, char *value,
                 int action)
    int env_unset (env_t *env, char *name)
    int env_put (env_t *env, char *entry, int action)
    char ** env_array (env_t *env)
    int env_putarray (env_t *env, char **array, int action)
    char * env_expand_win (env_t *env, char *str)
    void env_strfree (char *str)

  DDEESSCCRRIIPPTTIIOONN

    These calls and the eennvv__tt structure (declared in <<iinntteerriixx//eennvv..hh>>) deal
    with user environments in the Subsystem for UNIX-based Applications. The eennvv__tt structure is an
    opaque data structure; all manipulation of its members should be done
    through these calls.

    The following functions are provided:

    eennvv__tt **     eennvv__aalllloocc()          Allocate a new, empty eennvv__tt object.

    eennvv__tt **     eennvv__wwiinnllooggiinn()       Create an eennvv__tt object initialized with
                                     Win32 data.

    eennvv__tt **     eennvv__llooggiinn()          Create a standard eennvv__tt object.

    eennvv__tt **     eennvv__ccrroonn()           Create a standard eennvv__tt object
                                     initialized for the user's ccrroonn
                                     environment.

    vvooiidd        eennvv__ffrreeee()           Deallocate an eennvv__tt object.

    cchhaarr **      eennvv__ggeett()            Get the value for an environment
                                     variable.

    iinntt         eennvv__sseett()            Set the value for an environment
                                     variable.

    iinntt         eennvv__ppuutt()            Set the value for an environment
                                     variable as a single string.

    iinntt         eennvv__uunnsseett()          Unset an environment variable.

    cchhaarr ****     eennvv__aarrrraayy()          Return pointer to an array of
                                     environment entries.

    iinntt         eennvv__ppuuttaarrrraayy()       Set the values in an array of
                                     environment entries.

    cchhaarr **      eennvv__eexxppaanndd__wwiinn()     Expand Windows environment variables

    vvooiidd        eennvv__ssttrrffrreeee()        Deallocate memory used for string.

    For all the functions that take a struct passwd argument, (eennvv__llooggiinn(3),
    eennvv__ccrroonn(3), and eennvv__wwiinnllooggiinn(3)) it is the responsibility of the caller
    to ensure this structure contains current and valid information returned
    from a successful call to _gg_ee_tt_pp_ww_uu_ii_dd(2) or _gg_ee_tt_pp_ww_nn_aa_mm(2). If this structure
    contains invalid data, then the data returned from the eennvv__** functions
    will also be invalid. These functions do not check if the struct passwd
    contains valid data so there is no error indication can be returned.

    The _ee_nn_vv____aa_ll_ll_oo_cc(3) call creates an empty eennvv__tt object.

    The _ee_nn_vv____ww_ii_nn_ll_oo_gg_ii_nn(3) call creates a new eennvv__tt object and initializes it
    with the standard Windows login environment for the user specified in the
    pw password structure. The Windows login environment is already in the
    Subsystem for UNIX-based Applications syntax. (The conversion is done by converting all environment
    variable names to upper case, and by translating the Windows PATH variable
    to the Subsystem for UNIX-based Applications syntax.)

    The _ee_nn_vv____ll_oo_gg_ii_nn(3) call creates a new eennvv__tt object and initializes it with
    the standard Subsystem for UNIX-based Applications user environment for the user specified in the pw
    password structure. The Subsystem for UNIX-based Applications environment consists of the Windows login
    environment (as created by _ee_nn_vv____ww_ii_nn_ll_oo_gg_ii_nn(3)) plus HOME (ppww-->>ppww__ddiirr),
    LOGNAME (ppww-->>ppww__nnaammee), SHELL (//bbiinn//sshh), and LD_LIBRARY_PATH (//uussrr//lliibb).

    The _ee_nn_vv____cc_rr_oo_nn(3) call creates a new eennvv__tt object and initializes it with
    the standard ccrroonn(1) environment, as required by the Single UNIX Standard,
    for the user specified in the pw password structure. The environment
    defined includes the Windows login environment (as returned by
    _ee_nn_vv____ww_ii_nn_ll_oo_gg_ii_nn(3)) plus HOME, LOGNAME, SHELL, PATH, and LD_LIBRARY_PATH.

    The _ee_nn_vv____ff_rr_ee_ee(3) call deallocates an existing eennvv__tt object.

    The _ee_nn_vv____gg_ee_tt(3) call retrieves the value of name within the environment
    object eennvv. It returns a pointer to the value, or NULL if the variable
    isn't set.

    The _ee_nn_vv____ss_ee_tt(3) call sets the environment variable name to the provided
    value in the environment referenced by env. The action controls how the
    variable is set and can have one of the following values:

    ENV_OVERRIDE
        Set name; if name is already defined, override the current value.

    ENV_SETIFUNSET
        Set name only if it is currently not defined.

    ENV_APPEND
        Quickly append a new name-value pair to the end of the environment
        without checking to see if name is already defined.

    If the action is invalid, the call returns -1.

    The _ee_nn_vv____pp_uu_tt(3) function behaves in the same way as _ee_nn_vv____ss_ee_tt(3), except that
    the name and value are represented as a single string, entry, of the form

    name=value

    The _ee_nn_vv____aa_rr_rr_aa_yy(3) call returns the contents of an eennvv__tt structure as a
    conventional NULL-terminated array of environment entries.

    The _ee_nn_vv____pp_uu_tt_aa_rr_rr_aa_yy(3) function takes a traditional NULL-terminated array of
    environment entries, array, and calls _ee_nn_vv____pp_uu_tt(3) once for eennvv__tt structure
    env.

    The _ee_nn_vv____ee_xx_pp_aa_nn_dd____ww_ii_nn(3) call takes str and expands all occurrences of the
    Windows  %vvaarr% syntax with the value of the variable var found in env. If
    env is NULL, then the environment used is the Windows system environment.
    The call returns a new string, or NULL if there's an error. Note that the
    new string can only be deallocated by calling _ee_nn_vv____ss_tt_rr_ff_rr_ee_ee(3).

    The _ee_nn_vv____ss_tt_rr_ff_rr_ee_ee(3) call deallocates the memory pointed to by str.

  RREETTUURRNN VVAALLUUEESS

    The functions _ee_nn_vv____aa_ll_ll_oo_cc(3), _ee_nn_vv____ww_ii_nn_ll_oo_gg_ii_nn(3), _ee_nn_vv____ll_oo_gg_ii_nn(3), _ee_nn_vv____cc_rr_oo_nn(3),
    _ee_nn_vv____gg_ee_tt(3), _ee_nn_vv____aa_rr_rr_aa_yy(3), and _ee_nn_vv____ee_xx_pp_aa_nn_dd____ww_ii_nn(3) functions return a pointer
    on success or NULL on failure. The _ee_nn_vv____ss_ee_tt(3), _ee_nn_vv____uu_nn_ss_ee_tt(3), _ee_nn_vv____pp_uu_tt(3),
    and _ee_nn_vv____pp_uu_tt_aa_rr_rr_aa_yy(3) functions return 0 on success or -1 on failure.

    On failure, all of these functions set errno to indicate the cause of the
    error.

  EERRRROORRSS

    The eennvv__**(3) functions can fail for the following reasons:

    [EINVAL]
        The entry in an _ee_nn_vv____pp_uu_tt(3) call was poorly formed.

    [EIO]
        An I/O error while reading the system environment.

    [ENOENT]
        The user's environment could not be retrieved from the registry.

    [ENOMEM]
        Insufficient memory to allocate the eennvv__tt object.

    [ERANGE]
        A string in the environment cannot be represented in the current
        locale.

  SSEEEE AALLSSOO

    _l_o_g_i_n(1)

  UUSSAAGGEE NNOOTTEESS

    None of these functions are thread safe.

    None of these functions are async-signal safe.

