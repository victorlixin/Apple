setbuffer(3)                                               setbuffer(3)

  sseettbbuuff(())

  NNAAMMEE

    setbuf(), setbuffer(), setlinebuf(), setvbuf() - stream buffering
    operations

  SSYYNNOOPPSSIISS

    #include <stdio.h>

    void setbuf (FILE *stream, char *buf)
    void setbuffer (FILE *stream, char *buf, size_t size)
    void setlinebuf (FILE *stream)
    int setvbuf (FILE *stream, char *buf, int mode, size_t size)

  DDEESSCCRRIIPPTTIIOONN

    The three types of buffering available are unbuffered, block buffered, and
    line buffered. When an output stream is unbuffered, information appears on
    the destination file or terminal as soon as written; when it is block
    buffered many characters are saved up and written as a block; when it is
    line buffered characters are saved up until a newline is output or input
    is read from any stream attached to a terminal device (typically stdin).
    The function _ff_ff_ll_uu_ss_hh(3) may be used to force the block out early. (See
    _ff_cc_ll_oo_ss_ee(3).)

    Normally all files are block buffered. When the first I/O operation occurs
    on a file, _mm_aa_ll_ll_oo_cc(3) is called, and an optimally-sized buffer is obtained.
    If a stream refers to a terminal (as stdout normally does) it is line
    buffered. The standard error stream stderr is always unbuffered.

    The _ss_ee_tt_vv_bb_uu_ff(3) function may be used to alter the buffering behavior of a
    stream. The mode parameter must be one of the following three macros:

    _IONBF
        unbuffered

    _IOLBF
        line buffered

    _IOFBF
        fully buffered

    In standard ANSI C implementations, the size parameter is the size of the
    buffer pointed to by buf. Normally, if buf is NULL, then size should be 0,
    and _ss_ee_tt_vv_bb_uu_ff(3) will allocate a buffer of size BUFSIZ. In this
    implementation, if buf is NULL but size is non-zero, _ss_ee_tt_vv_bb_uu_ff(3) (and
    _ss_ee_tt_bb_uu_ff_ff_ee_rr(3)) will allocate a buffer of size size and use that, releasing
    it on close. (Portable code should use a size of 0 with any NULL buffer.)

    The size parameter may be given as zero to obtain deferred optimal-size
    buffer allocation as usual. If it is not zero, then except for unbuffered
    files, the buf argument should point to a buffer at least size bytes long;
    this buffer will be used instead of the current buffer.

    The _ss_ee_tt_vv_bb_uu_ff(3) function may be used at any time, but may have peculiar
    side effects (such as discarding input or flushing output) if the stream
    is "active". Portable applications should call it only once on any given
    stream, and before any I/O is performed.

    The other three calls are essentially aliases for calls to _ss_ee_tt_vv_bb_uu_ff(3).
    Except for the lack of a return value, the _ss_ee_tt_bb_uu_ff(3) function is exactly
    equivalent to the call

    setvbuf(stream, buf, buf ? _IOFBF: _IONBF, BUFSIZ);

    In the _ss_ee_tt_bb_uu_ff_ff_ee_rr(3) call, the size of the buffer is up to the caller,
    rather than being determined by the default BUFSIZE.

    The _ss_ee_tt_ll_ii_nn_ee_bb_uu_ff(3) call is equivalent to the call:

    setvbuf(stream, (char *)NULL, _IOLBF, 0);

  RREETTUURRNN VVAALLUUEESS

    The _ss_ee_tt_vv_bb_uu_ff(3) function returns 0 on success, or EOF if the request cannot
    be honored (note that the stream is still functional in this case).

    The _ss_ee_tt_ll_ii_nn_ee_bb_uu_ff(3) function returns what the equivalent _ss_ee_tt_vv_bb_uu_ff(3) call
    would have returned.

  SSEEEE AALLSSOO

    _f_o_p_e_n(3)

    _f_c_l_o_s_e(3)

    _f_r_e_a_d(3)

    _m_a_l_l_o_c(3)

    _p_u_t_s(3)

    _p_r_i_n_t_f(3)

  UUSSAAGGEE NNOOTTEESS

    All of these functions are thread safe.

    None of these functions are async-signal safe.

