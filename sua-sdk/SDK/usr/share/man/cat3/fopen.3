fopen(3)                                                     fopen(3)

  ffddooppeenn(())

  NNAAMMEE

    fopen(), fdopen(), freopen() - stream open functions

  SSYYNNOOPPSSIISS

    #include <stdio.h>

    FILE * fopen (char *path, const char *mode)
    FILE * fdopen (int fd, const char *mode)
    FILE * freopen (const char *path, const char *mode, FILE *stream)

  DDEESSCCRRIIPPTTIIOONN

    The _ff_oo_pp_ee_nn(3) function opens the file whose name is the string pointed to
    by path and associates a stream with it.

    The argument mode points to a string beginning with one of the following
    sequences. Additional characters may follow these sequences.

    r
        Open text file for reading. The stream is positioned at the beginning
        of the file.

    r+
        Open for reading and writing. The stream is positioned at the
        beginning of the file.

    w
        Truncate file to zero length or create text file for writing. The
        stream is positioned at the beginning of the file.

    w+
        Open for reading and writing. The file is created if it does not
        exist, otherwise it is truncated. The stream is positioned at the
        beginning of the file.

    W
        Open a text file for writing (but not trucated). The stream is
        positioned at the end of the file. The file is created if it does
        not exist. The entire file may been seeked.

    W+
        Open for reading and writing. The file is created if it does not
        exist. The stream is positioned at the end of the file. The entire
        file may be seeked. The file is not truncated.

    a
        Open for writing. The file is created if it does not exist. The stream
        is positioned at the end of the file.

    a+
        Open for reading and writing. The file is created if it does not
        exist. The stream is positioned at the end of the file.

    The mode string can also include the letter "b" either as a third
    character or as a character between the characters in any of the two-
    character strings described above.

    Any created files will have mode S_IRUSR | S_IWUSR | S_IRGRP | S_IWGRP |
    S_IROTH | S_IWOTH (0666), as modified by the process' umask value (see
    _uu_mm_aa_ss_kk(2)).

    Reads and writes may be intermixed on read/write streams in any order, and
    do not require an intermediate seek as in previous versions of stdio. This
    is not portable to other systems, however; ANSI C requires that a file
    positioning function intervene between output and input, unless an input
    operation encounters end-of-file.

    The _ff_dd_oo_pp_ee_nn(3) function associates a stream with the existing file
    descriptor, fd. The mode of the stream must be compatible with the mode of
    the file descriptor.

    The _ff_rr_ee_oo_pp_ee_nn(3) function opens the file whose name is the string pointed to
    by path and associates the stream pointed to by stream with it. The
    original stream (if it exists) is closed. The mode argument is used just
    as in the ffooppeenn(3) function. The primary use of the _ff_rr_ee_oo_pp_ee_nn(3) function is
    to change the file associated with a standard text stream (stderr, stdin,
    or stdout).

  RREETTUURRNN VVAALLUUEESS

    Upon successful completion _ff_oo_pp_ee_nn(3), _ff_dd_oo_pp_ee_nn(3), and _ff_rr_ee_oo_pp_ee_nn(3) return a
    FFIILLEE pointer. Otherwise, NULL is returned and the global variable errno is
    set to indicate the error.

  EERRRROORRSS

    [EINVAL]
        The mode provided to _ff_oo_pp_ee_nn(3), _ff_dd_oo_pp_ee_nn(3), or _ff_rr_ee_oo_pp_ee_nn(3) was invalid.

    The _ff_oo_pp_ee_nn(3) function may fail and set errno for any of the errors
    specified for the routines _mm_aa_ll_ll_oo_cc(3) and _oo_pp_ee_nn(2). The _ff_dd_oo_pp_ee_nn(3) function
    may fail and set errno for any of the errors specified for the routines
    _mm_aa_ll_ll_oo_cc(3) and _ff_cc_nn_tt_ll(2). The _ff_rr_ee_oo_pp_ee_nn(3) function may also fail and set
    errno for any of the errors specified for the routines _oo_pp_ee_nn(2), _ff_cc_ll_oo_ss_ee(3)
    and _ff_ff_ll_uu_ss_hh(3).

  SSEEEE AALLSSOO

    _o_p_e_n(2)

    _f_c_l_o_s_e(3)

    _f_f_l_u_s_h(3)

    _f_s_e_e_k(3)

  UUSSAAGGEE NNOOTTEESS

    All of these functions are thread safe.

    None of these functions are async-signal safe.

