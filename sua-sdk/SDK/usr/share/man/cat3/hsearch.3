hsearch(3)                                                   hsearch(3)

  hhccrreeaattee(())

  NNAAMMEE

    hcreate(), hcreate_r(), hdestroy(), hdestroy_r(), hsearch(), hsearch_r(),
    - manage hash search table

  SSYYNNOOPPSSIISS

    #include <search.h>

    int hcreate (size_t nel)
    void hdestroy(void)
    ENTRY *hsearch (ENTRY item, ACTION action)

    void *hcreate_r(size_t nel)
    void hdestroy_r (void *h)
    ENTRY *hsearch_r(void *h, ENTRY item), ACTION action)

  DDEESSCCRRIIPPTTIIOONN

    The _hh_cc_rr_ee_aa_tt_ee(3), _hh_dd_ee_ss_tt_rr_oo_yy(3), and _hh_ss_ee_aa_rr_cc_hh(3) functions manage hash search
    tables. They create, destroy, and search a given table.

    First the table must be created using _hh_cc_rr_ee_aa_tt_ee(3). The argument nel is an
    estimate of the maximum number of elements the table will hold. (For
    better performance, the function may actually create a table with more
    than nel elements.)

    To destroy the table, call _hh_dd_ee_ss_tt_rr_oo_yy(3).

    To search and add items to the hash table, call _hh_ss_ee_aa_rr_cc_hh(3). It returns a
    pointer into the hash table. The function takes an EENNTTRRYY structure and an
    AACCTTIIOONN enumerated type; both are defined in <<sseeaarrcchh..hh>>. The EENNTTRRYY defines
    the item being searched for and the AACCTTIIOONN defines the action to take if
    the item is not found.

    An EENNTTRRYY is defined as:

    typedef struct {
         char *key;
         char *data;
    } ENTRY;

    The item.key member points to a comparison key and the item.data member
    points to any other data associated with that key. For comparison,
    _hh_ss_ee_aa_rr_cc_hh(3) uses the _ss_tt_rr_cc_mm_pp(3) function.

    The enumeration type AACCTTIIOONN is defined as:

    enum { FIND, ENTER, REMOVE } ACTION;

    (The type REMOVE is an Subsystem for UNIX-based Applications extension.)

    If the action argument to _hh_ss_ee_aa_rr_cc_hh(3) is FIND, the function returns the
    null pointer. If the action argument is ENTER, the function inserts the
    item into the hash table and returns a pointer to the item. If the action
    is REMOVE, the _hh_ss_ee_aa_rr_cc_hh(3) function looks from the indicated item and
    removes it from the hash table.

    The _hh_cc_rr_ee_aa_tt_ee____rr(3), _hh_dd_ee_ss_tt_rr_oo_yy____rr(3), and _hh_ss_ee_aa_rr_cc_hh____rr(3) functions are reentrant
    versions of the standard functions. The context pointer refers to a
    structure as returned by _hh_cc_rr_ee_aa_tt_ee____rr(3). These functions are only available
    if _ALL_SOURCE is defined.

    Both of the _hh_ss_ee_aa_rr_cc_hh(3) functions make copies of the ENTERed keys in a
    series of string tables. The application does not need to keep storing the
    keys after the keys return. Because of this, the strings in the ENTRY
    structures by those functions are private and cannot be overwritten.

  RREETTUURRNN VVAALLUUEESS

    The _hh_cc_rr_ee_aa_tt_ee(3) function returns non-zero on success and 0 if it cannot
    create the hash table.

    On success, the _hh_ss_ee_aa_rr_cc_hh(3) function returns a pointer to the item; on
    failure it returns a null pointer. It can fail if the action is FIND and
    the item could not be found, or if the action is ENTER and the table is
    full.

    The _hh_dd_ee_ss_tt_rr_oo_yy(3) and _hh_dd_ee_ss_tt_rr_oo_yy____rr(3) functions don't return a value.

    On success, the _hh_cc_rr_ee_aa_tt_ee____rr(3) function returns a pointer to a context
    structure. On failure, it returns ((vvooiidd **))00 and sets the global variable
    errno.

    On success, the _hh_ss_ee_aa_rr_cc_hh____rr(3) with the FIND or ENTER function returns a
    pointer to the item; with the argument REMOVE, it returns the dataportion
    of the removed element cast from a vvooiidd ** to an EENNTTRRYY **. On failure it
    returns ((vvooiidd **))00 and sets the global variable errno.

  EERRRROORRSS

    The _hh_cc_rr_ee_aa_tt_ee(3) function may fail for these reasons:

    [EBUSY]
        _HH_cc_rr_ee_aa_tt_ee(3) has already been called and the resultant hash table has
        not yet been destroyed.

    [ENOMEM]
        Not enough memory available.

    The _hh_ss_ee_aa_rr_cc_hh(3) and _hh_ss_ee_aa_rr_cc_hh____rr(3) functions may fail for these reasons:

    [ENOENT]
        If called with either FIND or REMOVE, the requested key was not found
        in the hash table.

    The _hh_cc_rr_ee_aa_tt_ee____rr(3) function can fail for these reasons:

    [ENOMEM]

  EEXXAAMMPPLLEESS

    #include <search.h>
    #include <stdio.h>
    struct object_struct {
        char *name;
        size_t len;
        ...
    };
    /*
     * Place the supplied object into a hash table based upon its name.
     */
    static int
    hash_insert(struct object_struct *obj)
    {
        ENTRY e, *r;
        e.key = obj->name;
        e.data = (void *)obj;
        r = hsearch(e, ENTER);
        if ((ENTRY *)0 == r)
            return 0;
        return 1;
    }
    /*s
     * Retrieve an object from the hash table based upon it's name.
     */
    static struct object_struct *
    hash_get(char *name)
    {
        ENTRY e, *r;
        if ((char *)0 == name || '\0' == *name)
            return (struct object_struct *)0;
        e.key = name;
        e.data = (void *)0;
        r = hsearch(e, FIND);
        if ((ENTRY *)0 == r)
            return (struct object_struct *)0;
        return (struct object_struct *)r->data;
    }
    int
    main(int argc, char *argv[])
    {
        struct object_struct *new, *obj;
        char *name;
        ...
        /*l
         * Instantiate the hash table.
         */
        hcreate(1024);
        ...
        /*l
         * Store a newly defined object.
         */
        if (!hash_insert(new))
            fprintf(stderr, "Could not insert object into the hash table!\n");
        ...
        /*l
         * Retreive an object by name.
         */
        if ((struct object_struct *)0 == (obj=hash_get(name)))
            fprintf(stderr,
                  "Could not find object '%s' in the hash table!\n",
                  name);
        ...
        /*l
         * Release the hash table's resources.
         */
        hdestroy();
        ...
    }

  SSEEEE AALLSSOO

    _b_s_e_a_r_c_h(3)

    _l_s_e_a_r_c_h(3)

    _t_s_e_a_r_c_h(3)

  UUSSAAGGEE NNOOTTEESS

    The following functions are thread safe: hhccrreeaattee__rr,, hhddeessttrrooyy__rr,, hhsseeaarrcchh__rr.
    The following functions are not thread safe: hhccrreeaattee,, hhddeessttrrooyy,, hhsseeaarrcchh.

    None of these functions are async-signal safe.

