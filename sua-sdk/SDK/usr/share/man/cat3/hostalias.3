hostalias(3)                                               hostalias(3)

  rreessoollvveerr

  NNAAMMEE

    res_ninit, res_ourserver_p, fp_resstat, res_hostalias, res_pquery,
    res_nquery, res_nsearch, res_nquerydomain, res_nmkquery, res_nsend,
    res_nupdate, res_nmkupdate, res_nclose, res_nsendsigned, res_findzonecut,
    res_getservers, res_setservers, dn_comp, dn_expand, hstrerror, res_init,
    res_isourserver, fp_nquery, p_query, hostalias, res_query, res_search,
    res_querydomain, res_mkquery, res_send, res_update, res_close, herror -
    resolver routines

  SSYYNNOOPPSSIISS

    #include <sys/types.h>
    #include <netinet/in.h>
    #include <arpa/nameser.h>
    #include <resolv.h>
    #include <res_update.h>

    typedef struct __res_state *res_state;

    int res_ninit(res_state statp);
    int res_ourserver_p(const res_state statp, const struct sockaddr_in
    *addr);
    void fp_resstat(const res_state statp, FILE *fp);
    const char * res_hostalias(const res_state statp, const char *name, char
    *buf, size_t buflen);
    int res_pquery(const res_state statp, const u_char *msg, int msglen, FILE
    *fp);
    int res_nquery(res_state statp, const char *dname, int class, int type,
                   u_char *answer, int anslen);
    int res_nsearch(res_state statp, const char *dname, int class, int type,
                    u_char *answer, int anslen);
    int res_nquerydomain(res_state statp, const char *name, const char
    *domain,
                         int class, int type, u_char *answer, int anslen);
    int res_nmkquery(res_state statp, int op, const char *dname, int class,
    int type,
                     const u_char *data, int datalen, const u_char
    *newrr,u_char *buf, int buflen);
    int res_nsend(res_state statp, const u_char *msg, int msglen, u_char
    *answer, int anslen);
    int res_nupdate(res_state statp, ns_updrec *rrecp_in);
    int res_nmkupdate(res_state statp, ns_updrec *rrecp_in, u_char *buf, int
    buflen);
    void res_nclose(res_state statp);
    int res_nsendsigned(res_state statp, const u_char *msg, int msglen,
                        ns_tsig_key *key, u_char *answer, int anslen);
    int res_findzonecut(res_state statp, const char *dname, ns_class class,
    int options,
                        char *zname, size_t zsize, struct in_addr *addrs, int
    naddrs);
    int res_getservers(res_state statp, union res_sockaddr_union *set, int
    cnt);
    void res_setservers(res_state statp, const union res_sockaddr_union *set,
    int cnt);
    int dn_comp(const char *exp_dn, u_char *comp_dn, int length,  u_char
    *dnptrs,
                u_char **lastdnptr);
    int dn_expand(const u_char *msg, const u_char *eomorig, const u_char
    *comp_dn,
                  char *exp_dn, int length);
    const char *hstrerror(int err);

    DDeepprreeccaatteedd

    #include <sys/types.h>
    #include <netinet/in.h>
    #include <arpa/nameser.h>
    #include <resolv.h>
    #include <res_update.h>

    int res_init(void);
    int res_isourserver(const struct sockaddr_in *addr);
    int fp_nquery(const u_char *msg, int msglen, FILE *fp);
    void p_query(const u_char *msg, FILE *fp);
    const char * hostalias(const char *name);
    int res_query(const char *dname, int class, int type, u_char *answer, int
    anslen);
    int res_search(const char *dname, int class, int type, u_char *answer, int
    anslen);
    int res_querydomain(const char *name, const char *domain, int class, int
    type,
                        u_char *answer, int anslen);
    int res_mkquery(int op, const char *dname, int class, int type, const char
    *data,
                    int datalen, struct rrec *newrr, u_char *buf, int buflen);
    int res_send(const u_char *msg, int msglen, u_char *answer, int anslen);
    int res_update(ns_updrec *rrecp_in);
    void res_close(void);
    void herror(const char *s);

  DDEESSCCRRIIPPTTIIOONN

    These routines are used for making, sending and interpreting query and
    reply messages with Internet domain name servers.

    State information is kept in statp and is used to control the behavior of
    these functions. statp should be set to all zeros prior to the first call
    to any of these functions.

    The functions rreess__iinniitt(), rreess__iissoouurrsseerrvveerr(), ffpp__nnqquueerryy(), pp__qquueerryy(),
    hhoossttaalliiaass(), rreess__qquueerryy(), rreess__sseeaarrcchh(), rreess__qquueerryyddoommaaiinn(), rreess__mmkkqquueerryy(),
    rreess__sseenndd(), rreess__uuppddaattee(), rreess__cclloossee() and hheerrrroorr() are deprecated and are
    supplied for compatability with old source code. They use global
    configuration and state information that is kept in the structure _res
    rather than that referenced through statp.

    Most of the values in statp and _res are initialized on the first call to
    rreess__nniinniitt() / rreess__iinniitt() to reasonable defaults and can be ignored.
    Options stored in statp->options / _res.options are defined in resolv.h
    and are as follows. Options are stored as a simple bit mask containing the
    bitwise &lsquo;&lsquo;OR&rsquo;&rsquo; of the options enabled.

    RES_INIT
        True if the initial name server address and default domain name are
        initialized (i.e., rreess__nniinniitt() / rreess__iinniitt() has been called).

    RES_DEBUG
        Print debugging messages.

    RES_AAONLY
        Accept authoritative answers only. Should continue until it finds an
        authoritative answer or finds an error. Currently this is not
        implemented.

    RES_USEVC
        Use TCP connections for queries instead of UDP datagrams.

    RES_STAYOPEN
        Used with RES_USEVC to keep the TCP connection open between queries.
        This is useful only in programs that regularly do many queries. UDP
        should be the normal mode used.

    RES_IGNTC
        Ignore truncation errors, i.e., don&rsquo;t retry with TCP.

    RES_RECURSE
        Set the recursion-desired bit in queries. This is the default.
        (rreess__nnsseenndd() / rreess__sseenndd() does not do iterative queries and expects
        the name server to handle recursion.)

    RES_DEFNAMES
        If set, rreess__nnsseeaarrcchh() / rreess__sseeaarrcchh() will append the default domain
        name to single-component names (those that do not contain a dot). This
        option is enabled by default.

    RES_DNSRCH
        If this option is set, rreess__nnsseeaarrcchh() / rreess__sseeaarrcchh() will search for
        host names in the current domain and in parent domains; see
        hostname(@DESC_EXT@). This is used by the standard host lookup routine
        gethostbyname(@LIB_NETWORK_EXT@). This option is enabled by default.

    RES_NOALIASES
        This option turns off the user level aliasing feature controlled by
        the HOSTALIASES environment variable. Network daemons should set this
        option.

    RES_USE_INET6
        This option causes gethostbyname(@LIB_NETWORK_EXT@) to look for AAAA
        records before looking for A records if none are found.

    RES_ROTATE
        This options causes the rreess__nnsseenndd() / rreess__sseenndd() to rotate the list of
        nameservers in statp->nsaddr_list / _res.nsaddr_list.

    RES_KEEPTSIG
        This option causes rreess__nnsseennddssiiggnneedd() to leave the message unchanged
        after TSIG verification; otherwise the TSIG record would be removed
        and the header updated.

    RES_NOTLDQUERY
        This option causes rreess__nnsseeaarrcchh() to not attempt to resolve a
        unqualified name as if it were a top level domain (TLD). This option
        can cause problems if the site has "localhost" as a TLD rather than
        having localhost on one or more elements of the search list. This
        option has no effect if neither RES_DEFNAMES or RES_DNSRCH is set.

    The rreess__nniinniitt() / rreess__iinniitt() routine reads the configuration file (if any;
    see resolver(@FORMAT_EXT@)) to get the default domain name, search list
    and the Internet address of the local name server(s). If no server is
    configured, the host running the resolver is tried. The current domain
    name is defined by the hostname if not specified in the configuration
    file; it can be overridden by the environment variable LOCALDOMAIN. This
    environment variable may contain several blank-separated tokens if you
    wish to override the &lsquo;&lsquo;search list&rsquo;&rsquo; on a per-
    process basis. This is similar to the sseeaarrcchh command in the configuration
    file. Another environment variable
    (&lsquo;&lsquo;RES_OPTIONS&rsquo;&rsquo;) can be set to override certain
    internal resolver options which are otherwise set by changing fields in
    the statp / _res structure or are inherited from the configuration
    file&rsquo;s ooppttiioonnss command. The syntax of the
    &lsquo;&lsquo;RES_OPTIONS&rsquo;&rsquo; environment variable is explained
    in resolver(@FORMAT_EXT@). Initialization normally occurs on the first
    call to one of the other resolver routines.

    The rreess__nnqquueerryy() / rreess__qquueerryy() functions provides interfaces to the server
    query mechanism. They constructs a query, sends it to the local server,
    awaits a response, and makes preliminary checks on the reply. The query
    requests information of the specified type and class for the specified
    fully-qualified domain name dname. The reply message is left in the answer
    buffer with length anslen supplied by the caller. rreess__nnqquueerryy() /
    rreess__qquueerryy() return -1 on error or the length of the answer.

    The rreess__nnsseeaarrcchh() / rreess__sseeaarrcchh() routines make a query and awaits a
    response like rreess__nnqquueerryy() / rreess__qquueerryy(), but in addition, it implements
    the default and search rules controlled by the RES_DEFNAMES and RES_DNSRCH
    options. It returns the length of the first successful reply which is
    stored in answer or -1 on error.

    The remaining routines are lower-level routines used by rreess__nnqquueerryy() /
    rreess__qquueerryy(). The rreess__nnmmkkqquueerryy() / rreess__mmkkqquueerryy() functions constructs a
    standard query message and places it in buf. It returns the size of the
    query, or -1 if the query is larger than buflen. The query type op is
    usually QUERY, but can be any of the query types defined in <arpa/
    nameser.h>. The domain name for the query is given by dname. Newrr is
    currently unused but is intended for making update messages.

    The rreess__nnsseenndd() / rreess__sseenndd() / rreess__nnsseennddssiiggnneedd() routines sends a pre-
    formatted query and returns an answer. It will call rreess__nniinniitt() /
    rreess__iinniitt() if RES_INIT is not set, send the query to the local name
    server, and handle timeouts and retries. Additionally, rreess__nnsseennddssiiggnneedd()
    will use TSIG signatures to add authentication to the query and verify the
    response. In this case, only one nameserver will be contacted. The length
    of the reply message is returned, or -1 if there were errors.

    rreess__nnqquueerryy() / rreess__qquueerryy(), rreess__nnsseeaarrcchh() / rreess__sseeaarrcchh() and rreess__nnsseenndd() /
    rreess__sseenndd() return a length that may be bigger than anslen. In that case
    the query should be retried with a bigger buffer. NOTE the answer to the
    second query may be larger still so supplying a buffer that bigger that
    the answer returned by the previous query is recommended.

    answer MUST be big enough to receive a maximum UDP response from the
    server or parts of the answer will be silently discarded. The default
    maximum UDP response size is 512 bytes.

    The function rreess__oouurrsseerrvveerr__pp() returns true when inp is one of the servers
    in statp->nsaddr_list / _res.nsaddr_list.

    The functions ffpp__nnqquueerryy() / pp__qquueerryy() print out the query and any answer
    in msg on fp. pp__qquueerryy() is equivalent to ffpp__nnqquueerryy() with msglen set to
    512.

    The function ffpp__rreessssttaatt() prints out the active flag bits in statp-
    >options preceeded by the text ";; res options:" on file.

    The functions rreess__hhoossttaalliiaass() / hhoossttaalliiaass() lookup up name in the file
    referred to by the HOSTALIASES files return a fully qualified hostname if
    found or NULL if not found or an error occurred. rreess__hhoossttaalliiaass() uses buf
    to store the result in, hhoossttaalliiaass() uses a static buffer.

    The functions rreess__ggeettsseerrvveerrss() and rreess__sseettsseerrvveerrss() are used to get and
    set the list of server to be queried.

    The functions rreess__nnuuppddaattee() / rreess__uuppddaattee() take a list of ns_updrec
    rrecp_in. Identifies the containing zone for each record and groups the
    records according to containing zone maintaining in zone order then sends
    and update request to the servers for these zones. The number of zones
    updated is returned or -1 on error. Note that rreess__nnuuppddaattee() will perform
    TSIG authenticated dynamic update operations if the key is not NULL.

    The function rreess__ffiinnddzzoonneeccuutt() discovers the closest enclosing zone cut
    for a specified domain name, and finds the IP addresses of the
    zone&rsquo;s master servers.

    The functions rreess__nnmmkkuuppddaattee() / rreess__mmkkuuppddaattee() take a linked list of
    ns_updrec rrecp_in and construct a UPDATE message in buf. rreess__nnmmkkuuppddaattee()
    / rreess__mmkkuuppddaattee() return the length of the constructed message on no error
    or one of the following error values.

    -1
        An error occurred parsing rrecp_in.

    -2
        The buffer buf was too small.

    -3
        The first record was not a zone section or there was a section order
        problem. The section order is S_ZONE, S_PREREQ and S_UPDATE.

    -4
        A number overflow occurred.

    -5
        Unknown operation or no records.

    The functions rreess__nncclloossee() / rreess__cclloossee() close any open files referenced
    through statp / _res.

    The ddnn__ccoommpp() function compresses the domain name exp_dn and stores it in
    comp_dn. The size of the compressed name is returned or -1 if there were
    errors. The size of the array pointed to by comp_dn is given by length.
    The compression uses an array of pointers dnptrs to previously-compressed
    names in the current message. The first pointer points to to the beginning
    of the message and the list ends with NULL. The limit to the array is
    specified by lastdnptr. A side effect of ddnn__ccoommpp() is to update the list
    of pointers for labels inserted into the message as the name is
    compressed. If dnptr is NULL, names are not compressed. If lastdnptr is
    NULL, the list of labels is not updated.

    The ddnn__eexxppaanndd() entry expands the compressed domain name comp_dn to a full
    domain name. The compressed name is contained in a query or reply message;
    msg is a pointer to the beginning of the message. eomorig is a pointer to
    the first location after the message. The uncompressed name is placed in
    the buffer indicated by exp_dn which is of size length. The size of
    compressed name is returned or -1 if there was an error.

    The variables statp->res_h_errno / _res.res_h_errno and external variable
    h_errno is set whenever an error occurs during resolver operation. The
    following definitions are given in <netdb.h>:

    #define NETDB_INTERNAL -1 /* see errno */
    #define NETDB_SUCCESS 0 /* no problem */
    #define HOST_NOT_FOUND 1 /* Authoritative Answer Host not
    found */
    #define TRY_AGAIN 2 /* Non-Authoritative not found, or
    SERVFAIL */
    #define NO_RECOVERY 3 /* Non-Recoverable: FORMERR, REFUSED,
    NOTIMP */
    #define NO_DATA 4 /* Valid name, no data for requested type
    */

    The hheerrrroorr() function writes a message to the diagnostic output consisting
    of the string parameter s, the constant string ": ", and a message
    corresponding to the value of h_errno.

    The hhssttrreerrrroorr() function returns a string which is the message text
    corresponding to the value of the err parameter.

  FFIILLEE

    /etc/resolv.conf

  SSEEEE AALLSSOO

    _g_e_t_h_o_s_t_b_y_n_a_m_e(3)

    RFC1032, RFC1033, RFC1034, RFC1035, RFC974; SMM:11, "Name Server
    Operations Guide for BIND"

    4th Berkeley Distribution July 4, 2000 4th Berkeley Distribution

  UUSSAAGGEE NNOOTTEESS

    None of these functions are thread safe.

    None of these functions are async-signal safe.

