insnstr(3)                                                   insnstr(3)

  ccuurrss__iinnssssttrr(())

  NNAAMMEE

    insstr(), insnstr(), winsstr(), winsnstr(), mvinsstr(), mvinsnstr(),
    mvwinsstr(), mvwinsnstr() - insert string before cursor in a curses window

  SSYYNNOOPPSSIISS

    #include <curses.h>

    int insstr(const char *str);
    int insnstr(const char *str, int n);
    int winsstr(WINDOW *win, const char *str);
    int winsnstr(WINDOW *win, const char *str, int n);
    int mvinsstr(int y, int x, const char *str);
    int mvinsnstr(int y, int x, const char *str, int n);
    int mvwinsstr(WINDOW *win, int y, int x, const char *str);
    int mvwinsnstr(WINDOW *win, int y, int x, const char *str,
                   int n);

  DDEESSCCRRIIPPTTIIOONN

    These routines insert a character string (as many characters as will fit
    on the line) before the character under the cursor. All characters to the
    right of the cursor are shifted right, with the possibility of the
    rightmost characters on the line being lost. The cursor position does not
    change (after moving to y, x, if specified). The four routines with n as
    the last argument insert a leading substring of at most n characters. If
    n<=0, then the entire string is inserted.

    If a character in str is a tab, newline, carriage return or backspace, the
    cursor is moved appropriately within the window. A newline also does a
    _cc_ll_rr_tt_oo_ee_oo_ll(3) before moving. Tabs are considered to be at every eighth
    column. If a character in str is another control character, it is drawn in
    the ^^X notation. Calling _ww_ii_nn_cc_hh(3) after adding a control character (and
    moving to it, if necessary) does not return the control character, but
    instead returns a character in the ^-representation of the control
    character.

  RREETTUURRNN VVAALLUUEE

    All routines that return an integer return ERR upon failure and OK (SVr4
    specifies only "an integer value other than ERR") upon successful
    completion, unless otherwise noted in the preceding routine descriptions.

  NNOOTTEESS

    All but _ww_ii_nn_ss_nn_ss_tt_rr(3) may be macros.

  PPOORRTTAABBIILLIITTYY

    These functions are described in the XSI Curses standard, Issue 4, which
    adds const qualifiers to the arguments. The XSI Curses error conditions
    [EILSEQ] and [EILOVERFLOW] associated with extended-level conformance are
    not yet detected (this implementation does not yet support XPG4 multibyte
    characters).

  SSEEEE AALLSSOO

    _c_u_r_s_e_s(3)

    _c_u_r_s___c_l_e_a_r(3)

    _c_u_r_s___i_n_c_h(3)

