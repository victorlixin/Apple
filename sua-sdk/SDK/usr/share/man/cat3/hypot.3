HYPOT(3)	                                        	      HYPOT(3)

NAME
     hypot, hypotf, cabs, cabsf -- Euclidean distance and complex absolute
     value functions

LIBRARY
     Math Library (libm, -lm)

SYNOPSIS
     #include <math.h>

     double
     hypot(double x, double y);

     float
     hypotf(float x, float y);

     #include <complex.h>

     double
     cabs(double complex z);

     float
     cabsf(float complex z);

DESCRIPTION
     The hhyyppoott() and hhyyppoottff() functions compute the sqrt(x*x+y*y) in such a
     way that underflow will not happen, and overflow occurs only if the final
     result deserves it.  The cabs() and cabsf() functions compute the complex
     absolute value of z.

     hypot(infinity, v) = hypot(v, infinity) = +infinity for all v, including
     NaN.

ERROR (due to Roundoff, etc.)
     Below 0.97 ulps.  Consequently hypot(5.0, 12.0) = 13.0 exactly; in gen-
     eral, hypot and cabs return an integer whenever an integer might be
     expected.

     The same cannot be said for the shorter and faster version of hypot and
     cabs that is provided in the comments in cabs.c; its error can exceed 1.2
     ulps.

NOTES
     As might be expected, hypot(v, NaN) and hypot(NaN, v) are NaN for all
     finite v.	But programmers might be surprised at first to discover that
     hypot(±infinity, NaN) = +infinity.  This is intentional; it happens
     because hypot(infinity, v) = +infinity for all v, finite or infinite.
     Hence hypot(infinity, v) is independent of v.  Unlike the reserved oper-
     and fault on a VAX, the IEEE NaN is designed to disappear when it turns
     out to be irrelevant, as it does in hypot(infinity, NaN).

SEE ALSO
     math(3), ssqqrrtt(3)

HISTORY
     Both a hhyyppoott() function and a cabs() function appeared in Version 7 AT&T
     UNIX.


USAGE NOTES

     The hhyyppoott function is thread safe.
     The hhyyppoott function is nnoott async-signal safe.

