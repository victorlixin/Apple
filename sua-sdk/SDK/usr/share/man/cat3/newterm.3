newterm(3)                                                   newterm(3)

  ccuurrss__iinniittssccrr(())

  NNAAMMEE

    initscr(), newterm(), endwin(), isendwin(), set_term(), delscreen() -
    curses screen initialization and manipulation routines

  SSYYNNOOPPSSIISS

    #include <curses.h>

    WINDOW *initscr(void);
    int endwin(void);
    int isendwin(void);
    SCREEN *newterm(const char *type, FILE *outfd, FILE *infd);
    SCREEN *set_term(SCREEN *new);
    void delscreen(SCREEN *sp);

  DDEESSCCRRIIPPTTIIOONN

    _ii_nn_ii_tt_ss_cc_rr(3) is normally the first curses routine to call when initializing
    a program. A few special routines sometimes need to be called before it;
    these are _ss_ll_kk____ii_nn_ii_tt(3), _ff_ii_ll_tt_ee_rr(3), _rr_ii_pp_oo_ff_ff_ll_ii_nn_ee(3), and _uu_ss_ee____ee_nn_vv(3). For
    multiple-terminal applications, _nn_ee_ww_tt_ee_rr_mm(3) may be called before
    _ii_nn_ii_tt_ss_cc_rr(3).

    The initscr code determines the terminal type and initializes all curses
    data structures. initscr also causes the first call to _rr_ee_ff_rr_ee_ss_hh(3) to clear
    the screen. If errors occur, _ii_nn_ii_tt_ss_cc_rr(3) writes an appropriate error
    message to standard error and exits; otherwise, a pointer is returned to
    stdscr

    A program that outputs to more than one terminal should use the _nn_ee_ww_tt_ee_rr_mm(3)
    routine for each terminal instead of _ii_nn_ii_tt_ss_cc_rr(3). A program that needs to
    inspect capabilities, so it can continue to run in a line-oriented mode if
    the terminal cannot support a screen-oriented program, would also use
    _nn_ee_ww_tt_ee_rr_mm(3). The routine _nn_ee_ww_tt_ee_rr_mm(3) should be called once for each
    terminal. It returns a variable of type SSCCRREEEENN ** which should be saved as
    a reference to that terminal. The arguments are the type of the terminal
    to be used in place of the value of TERM, a file pointer for output to the
    terminal, and another file pointer for input from the terminal (if type is
    NULL, the value of TERM will be used). The program must also call
    _ee_nn_dd_ww_ii_nn(3) for each terminal being used before exiting from curses. If
    _nn_ee_ww_tt_ee_rr_mm(3) is called more than once for the same terminal, the first
    terminal referred to must be the last one for which _ee_nn_dd_ww_ii_nn(3) is called.

    A program should always call _ee_nn_dd_ww_ii_nn(3) before exiting or escaping from
    curses mode temporarily. This routine restores tty modes, moves the cursor
    to the lower left-hand corner of the screen and resets the terminal into
    the proper non-visual mode. Calling _rr_ee_ff_rr_ee_ss_hh(3) or _dd_oo_uu_pp_dd_aa_tt_ee(3) after a
    temporary escape causes the program to resume visual mode.

    The _ii_ss_ee_nn_dd_ww_ii_nn(3) routine returns TRUE if _ee_nn_dd_ww_ii_nn(3) has been called without
    any subsequent calls to _ww_rr_ee_ff_rr_ee_ss_hh(3), and FALSE otherwise.

    The _ss_ee_tt____tt_ee_rr_mm(3) routine is used to switch between different terminals. The
    screen reference new becomes the new current terminal. The previous
    terminal is returned by the routine. This is the only routine which
    manipulates SSCCRREEEENN pointers; all other routines affect only the current
    terminal.

    The _dd_ee_ll_ss_cc_rr_ee_ee_nn(3) routine frees storage associated with the SSCCRREEEENN data
    structure. The _ee_nn_dd_ww_ii_nn(3) routine does not do this, so _dd_ee_ll_ss_cc_rr_ee_ee_nn(3) should
    be called after _ee_nn_dd_ww_ii_nn(3) if a particular SSCCRREEEENN is no longer needed.

  RREETTUURRNN VVAALLUUEE

    _ee_nn_dd_ww_ii_nn(3) returns the integer ERR upon failure and OK upon successful
    completion.

    Routines that return pointers always return NULL on error.

  NNOOTTEESS

    Note that _ii_nn_ii_tt_ss_cc_rr(3) and _nn_ee_ww_tt_ee_rr_mm(3) may be macros.

  PPOORRTTAABBIILLIITTYY

    These functions are described in the XSI Curses standard, Issue 4. It
    specifies that portable applications must not call _ii_nn_ii_tt_ss_cc_rr(3) more than
    once.

  SSEEEE AALLSSOO

    _c_u_r_s_e_s(3)

    _c_u_r_s___k_e_r_n_e_l(3)

    _c_u_r_s___r_e_f_r_e_s_h(3)

    _c_u_r_s___s_l_k(3)

    _c_u_r_s___u_t_i_l(3)

