wrefresh(3)                                                 wrefresh(3)

  ccuurrss__rreeffrreesshh(())

  NNAAMMEE

    refresh(), wrefresh(), wnoutrefresh(), doupdate(), redrawwin(),
    wredrawln() - refresh curses windows and lines

  SSYYNNOOPPSSIISS

    #include <curses.h>

    int refresh(void);
    int wrefresh(WINDOW *win);
    int wnoutrefresh(WINDOW *win);
    int doupdate(void);
    int redrawwin(WINDOW *win);
    int wredrawln(WINDOW *win, int beg_line, int num_lines);

  DDEESSCCRRIIPPTTIIOONN

    The _rr_ee_ff_rr_ee_ss_hh(3) and _ww_rr_ee_ff_rr_ee_ss_hh(3) routines (or _ww_nn_oo_uu_tt_rr_ee_ff_rr_ee_ss_hh(3) and
    _dd_oo_uu_pp_dd_aa_tt_ee(3)) must be called to get actual output to the terminal, as other
    routines merely manipulate data structures. The routine _ww_rr_ee_ff_rr_ee_ss_hh(3) copies
    the named window to the physical terminal screen, taking into account what
    is already there in order to do optimizations. The _rr_ee_ff_rr_ee_ss_hh(3) routine is
    the same, using stdscr as the default window. Unless _ll_ee_aa_vv_ee_oo_kk(3) has been
    enabled, the physical cursor of the terminal is left at the location of
    the cursor for that window.

    The _ww_nn_oo_uu_tt_rr_ee_ff_rr_ee_ss_hh(3) and _dd_oo_uu_pp_dd_aa_tt_ee(3) routines allow multiple updates with
    more efficiency than _ww_rr_ee_ff_rr_ee_ss_hh(3) alone. In addition to all the window
    structures, ccuurrsseess keeps two data structures representing the terminal
    screen: a physical screen, describing what is actually on the screen, and
    a virtual screen, describing what the programmer wants to have on the
    screen.

    The routine _ww_rr_ee_ff_rr_ee_ss_hh(3) works by first calling _ww_nn_oo_uu_tt_rr_ee_ff_rr_ee_ss_hh(3), which
    copies the named window to the virtual screen, and then calling ddoouuppddaattee,
    which compares the virtual screen to the physical screen and does the
    actual update. If the programmer wishes to output several windows at once,
    a series of calls to _ww_rr_ee_ff_rr_ee_ss_hh(3) results in alternating calls to
    _ww_nn_oo_uu_tt_rr_ee_ff_rr_ee_ss_hh(3) and _dd_oo_uu_pp_dd_aa_tt_ee(3), causing several bursts of output to the
    screen. By first calling _ww_nn_oo_uu_tt_rr_ee_ff_rr_ee_ss_hh(3) for each window, it is then
    possible to call _dd_oo_uu_pp_dd_aa_tt_ee(3) once, resulting in only one burst of output,
    with fewer total characters transmitted and less CPU time used. If the win
    argument to _ww_rr_ee_ff_rr_ee_ss_hh(3) is the global variable curscr the screen is
    immediately cleared and repainted from scratch.

    The phrase "copies the named window to the virtual screen" above is
    ambiguous. What actually happens is that all ttoouucchheedd (changed) lines in
    the window are copied to the virtual screen. This affects programs that
    use overlapping windows; it means that if two windows overlap, you can
    refresh them in either order and the overlap region will be modified only
    when it is explicitly changed. (But see the section on PPOORRTTAABBIILLIITTYY below
    for a warning about exploiting this behavior.)

    The _ww_rr_ee_dd_rr_aa_ww_ll_nn(3) routine indicates to ccuurrsseess that some screen lines are
    corrupted and should be thrown away before anything is written over them
    it touches the indicated lines (marking them changed) then does a refresh
    of the window. The routine _rr_ee_dd_rr_aa_ww_ww_ii_nn(3) touches the entire window and then
    refreshes it.

  RREETTUURRNN VVAALLUUEE

    Routines that return an integer return ERR upon failure, and OK (SVr4 only
    specifies "an integer value other than ERR") upon successful completion.

  NNOOTTEESS

    Note that _rr_ee_ff_rr_ee_ss_hh(3) and _rr_ee_dd_rr_aa_ww_ww_ii_nn(3) may be macros.

  PPOORRTTAABBIILLIITTYY

    The XSI Curses standard, Issue 4 describes these functions.

    Whether _ww_nn_oo_uu_tt_rr_ee_ff_rr_ee_ss_hh(3) copies to the virtual screen the entire contents
    of a window or just its changed portions has never been well-documented in
    historic curses versions (including SVr4). It might be unwise to rely on
    either behavior in programs that might have to be linked with other curses
    implementations. Instead, you can do an explicit _tt_oo_uu_cc_hh_ww_ii_nn(3) before the
    _ww_nn_oo_uu_tt_rr_ee_ff_rr_ee_ss_hh(3) call to guarantee an entire-contents copy anywhere.

  SSEEEE AALLSSOO

    _c_u_r_s_e_s(3)

    _c_u_r_s___o_u_t_o_p_t_s(3)

