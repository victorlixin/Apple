use_env(3)                                                   use_env(3)

  ccuurrss__uuttiill(())

  NNAAMMEE

    unctrl(), keyname(), filter(), use_env(), putwin(), getwin(),
    delay_output(), flushinp() - miscellaneous curses utility routines

  SSYYNNOOPPSSIISS

    #include <curses.h>

    char *unctrl(chtype c);
    char *keyname(int c);
    void filter(void);
    void use_env(char bool);
    int putwin(WINDOW *win, FILE *filep);
    WINDOW *getwin(FILE *filep);
    int delay_output(int ms);
    int flushinp(void);

  DDEESSCCRRIIPPTTIIOONN

    The _uu_nn_cc_tt_rr_ll(3) macro expands to a character string which is a printable
    representation of the character c. Control characters are displayed in the
    ^X notation. Printing characters are displayed as is.

    The _kk_ee_yy_nn_aa_mm_ee(3) routine returns a character string corresponding to the key
    c.

    The _ff_ii_ll_tt_ee_rr(3) routine, if used, must be called before _ii_nn_ii_tt_ss_cc_rr(3) or
    _nn_ee_ww_tt_ee_rr_mm(3) are called. The effect is that, during those calls, LINES is
    set to 1; the capabilities cclleeaarr, ccuupp, ccuudd, ccuudd11, ccuuuu11, ccuuuu, vvppaa are
    disabled; and the hhoommee string is set to the value of ccrr.

    The _uu_ss_ee____ee_nn_vv(3) routine, if used, is called before _ii_nn_ii_tt_ss_cc_rr(3) or _nn_ee_ww_tt_ee_rr_mm(3)
    are called. When called with FALSE as an argument, the values of lliinneess and
    ccoolluummnnss specified in the tteerrmmiinnffoo database will be used, even if the
    environment variables LINES and COLUMNS (used by default) are set, or if
    ccuurrsseess is running in a window (in which case default behavior would be to
    use the window size if LINES and COLUMNS are not set).

    The _pp_uu_tt_ww_ii_nn(3) routine writes all data associated with window win into the
    file to which filep points. This information can be later retrieved using
    the _gg_ee_tt_ww_ii_nn(3) function.

    The _gg_ee_tt_ww_ii_nn(3) routine reads window related data stored in the file by
    _pp_uu_tt_ww_ii_nn(3). The routine then creates and initializes a new window using
    that data. It returns a pointer to the new window.

    The _dd_ee_ll_aa_yy____oo_uu_tt_pp_uu_tt(3) routine inserts an ms millisecond pause in output.
    This routine should not be used extensively because padding characters are
    used rather than a CPU pause.

    The _ff_ll_uu_ss_hh_ii_nn_pp(3) routine throws away any typeahead that has been typed by
    the user and has not yet been read by the program.

  RREETTUURRNN VVAALLUUEE

    Except for _ff_ll_uu_ss_hh_ii_nn_pp(3), routines that return an integer return ERR upon
    failure and OK (SVr4 specifies only "an integer value other than ERR")
    upon successful completion.

    _ff_ll_uu_ss_hh_ii_nn_pp(3) always returns OK.

    Routines that return pointers return NULL on error.

  PPOORRTTAABBIILLIITTYY

    The XSI Curses standard, Issue 4 describes these functions.

    The SVr4 documentation describes the action of _ff_ii_ll_tt_ee_rr(3) only in the
    vaguest terms. The description here is adapted from the XSI Curses
    standard (which erroneously fails to describe the disabling of ccuuuu).

  NNOOTTEESS

    Note that _uu_nn_cc_tt_rr_ll(3) is a macro, which is defined in <<uunnccttrrll..hh>>.

  SSEEEE AALLSSOO

    _c_u_r_s_e_s(3)

    _c_u_r_s___i_n_i_t_s_c_r(3)

    _c_u_r_s___s_c_r___d_u_m_p(3)

