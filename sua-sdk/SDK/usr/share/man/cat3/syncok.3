syncok(3)                                                     syncok(3)

  ccuurrss__wwiinnddooww(())

  NNAAMMEE

    newwin(), delwin(), mvwin(), subwin(), derwin(), mvderwin(), dupwin(),
    wsyncup(), syncok(), wcursyncup(), wsyncdown() - create curses windows

  SSYYNNOOPPSSIISS

    #include <curses.h>

    WINDOW *newwin(int nlines, int ncols, int begin_y,
                   int begin_x);
    int delwin(WINDOW *win);
    int mvwin(WINDOW *win, int y, int x);
    WINDOW *subwin(WINDOW *orig, int nlines, int ncols,
                   int begin_y, int begin_x);
    WINDOW *derwin(WINDOW *orig, int nlines, int ncols,
                   int begin_y, int begin_x);
    int mvderwin(WINDOW *win, int par_y, int par_x);
    WINDOW *dupwin(WINDOW *win);
    void wsyncup(WINDOW *win);
    int syncok(WINDOW *win, bool bf);
    void wcursyncup(WINDOW *win);
    void wsyncdown(WINDOW *win);

  DDEESSCCRRIIPPTTIIOONN

    Calling _nn_ee_ww_ww_ii_nn(3) creates and returns a pointer to a new window with the
    given number of lines and columns. The upper left-hand corner of the
    window is at line begin_y, column begin_x. If either nlines or ncols is
    zero, they default to LINES - begin_y and COLS - begin_x. A new full-
    screen window is created by calling newwin(0,0,0,0).

    Calling _dd_ee_ll_ww_ii_nn(3) deletes the named window, freeing all memory associated
    with it (it does not actually erase the window's screen image). Subwindows
    must be deleted before the main window can be deleted.

    Calling _mm_vv_ww_ii_nn(3) moves the window so that the upper left-hand corner is at
    position (x y). If the move would cause the window to be off the screen,
    it is an error and the window is not moved. Moving subwindows is allowed,
    but should be avoided.

    Calling _ss_uu_bb_ww_ii_nn(3) creates and returns a pointer to a new window with the
    given number of lines, nlines, and columns, ncols. The window is at
    position (begin_y begin_x) on the screen. (This position is relative to
    the screen, and not to the window orig.) The window is made in the middle
    of the window orig, so that changes made to one window will affect both
    windows. The subwindow shares memory with the window orig. When using this
    routine, it is necessary to call _tt_oo_uu_cc_hh_ww_ii_nn(3) or _tt_oo_uu_cc_hh_ll_ii_nn_ee(3) on orig
    before calling _ww_rr_ee_ff_rr_ee_ss_hh(3) on the subwindow.

    Calling _dd_ee_rr_ww_ii_nn(3) is the same as calling _ss_uu_bb_ww_ii_nn(3), except that begin_y
    and begin_x are relative to the origin of the window orig rather than the
    screen. There is no difference between the subwindows and the derived
    windows.

    Calling _mm_vv_dd_ee_rr_ww_ii_nn(3) moves a derived window (or subwindow) inside its
    parent window. The screen-relative parameters of the window are not
    changed. This routine is used to display different parts of the parent
    window at the same physical position on the screen.

    Calling _dd_uu_pp_ww_ii_nn(3) creates an exact duplicate of the window win.

    Calling _ww_ss_yy_nn_cc_uu_pp(3) touches all locations in ancestors of win that are
    changed in win. If _ss_yy_nn_cc_oo_kk(3) is called with second argument TRUE then is
    called automatically whenever there is a change in the window.

    The _ww_ss_yy_nn_cc_dd_oo_ww_nn(3) routine touches each location in win that has been
    touched in any of its ancestor windows. This routine is called by
    _ww_rr_ee_ff_rr_ee_ss_hh(3), so it should almost never be necessary to call it manually.

    The routine _ww_cc_uu_rr_ss_yy_nn_cc_uu_pp(3) updates the current cursor position of all the
    ancestors of the window to reflect the current cursor position of the
    window.

  RREETTUURRNN VVAALLUUEE

    Routines that return an integer return the integer ERR upon failure and OK
    (SVr4 only specifies "an integer value other than ERR") upon successful
    completion.

    _dd_ee_ll_ww_ii_nn(3) returns the integer ERR upon failure and OK upon successful
    completion.

    Routines that return pointers return NULL on error.

  NNOOTTEESS

    If many small changes are made to the window, the _ww_ss_yy_nn_cc_uu_pp(3) option could
    degrade performance.

    Note that _ss_yy_nn_cc_oo_kk(3) may be a macro.

  BBUUGGSS

    The subwindow functions (_ss_uu_bb_ww_ii_nn(3), _dd_ee_rr_ww_ii_nn(3), _mm_vv_dd_ee_rr_ww_ii_nn(3), _ww_ss_yy_nn_cc_uu_pp(3),
    _ww_ss_yy_nn_cc_dd_oo_ww_nn(3), _ww_cc_uu_rr_ss_yy_nn_cc_uu_pp(3), _ss_yy_nn_cc_oo_kk(3)) are flaky, incompletely
    implemented, and not well tested.

    The System V curses documentation is very unclear about what _ww_ss_yy_nn_cc_uu_pp(3)
    and _ww_ss_yy_nn_cc_dd_oo_ww_nn(3) actually do. It seems to imply that they are only
    supposed to touch exactly those lines that are affected by ancestor
    changes. The language here, and the behavior of the ccuurrsseess implementation,
    is patterned on the XPG4 curses standard. The weaker XPG4 spec may result
    in slower updates.

  PPOORRTTAABBIILLIITTYY

    The XSI Curses standard, Issue 4 describes these functions.

  SSEEEE AALLSSOO

    _c_u_r_s_e_s(3)

    _c_u_r_s___r_e_f_r_e_s_h(3)

    _c_u_r_s___t_o_u_c_h(3)

