verr(3)                                                         verr(3)

  eerrrr(())

  NNAAMMEE

    err(), verr(), errx(), verrx(), warn(), vwarn(), warnx(), vwarnx() -
    formatted error messages

  SSYYNNOOPPSSIISS

    #include <err.h>

    void err (int eval, const char *fmt, ...)
    void verr (int eval, const char *fmt, va_list args)
    void errx (int eval, const char *fmt, ...)
    void verrx (int eval, const char *fmt, va_list args)
    void warn (const char *fmt, ...)
    void vwarn (const char *fmt, va_list args)
    void warnx (const char *fmt, ...)
    void vwarnx (const char *fmt, va_list args)

  DDEESSCCRRIIPPTTIIOONN

    The _ee_rr_rr(3) and _ww_aa_rr_nn(3) family of functions display a formatted error
    message on the standard error output. In all cases, the last component of
    the program name, a colon character, and a space are output first. If the
    fmt argument is not NULL, the formatted error message, a colon character,
    and a space are output. In the case of the _ee_rr_rr(3), _vv_ee_rr_rr(3), _ww_aa_rr_nn(3), and
    _vv_ww_aa_rr_nn(3) functions, the error message string affiliated with the current
    value of the global variable errno is output. In all cases, the output is
    followed by a newline character.

  RREETTUURRNN VVAALLUUEESS

    The _ee_rr_rr(3), _vv_ee_rr_rr(3), _ee_rr_rr_xx(3), and _vv_ee_rr_rr_xx(3) functions do not return, but
    exit with the value of the argument eval.

  EEXXAAMMPPLLEESS

    Display the current errno information string and exit:

    if ((p = malloc(size)) == NULL)
         err(1, NULL);
    if ((fd = open(file_name, O_RDONLY, 0)) == -1)
         err(1, "%s", file_name);

    Display an error message and exit:

    if (tm.tm_hour < START_TIME)
         errx(1, "too early, wait until %s", start_time_string);

    Warn of an error:

    if ((fd = open(raw_device, O_RDONLY, 0)) == -1)
         warnx("%s: %s: trying the block device",
             raw_device, strerror(errno));
    if ((fd = open(block_device, O_RDONLY, 0)) == -1)
         err(1, "%s", block_device);

  SSEEEE AALLSSOO

    _s_t_r_e_r_r_o_r(3)

  UUSSAAGGEE NNOOTTEESS

    All of these functions are thread safe.

    None of these functions are async-signal safe.

