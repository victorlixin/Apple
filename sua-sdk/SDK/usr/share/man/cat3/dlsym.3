dlsym(3)                                                       dlsym(3)

  ddllssyymm(())

  NNAAMMEE

    dlsym() - get the address of a symbol from a dynamically-linked object

  SSYYNNOOPPSSIISS

    #include <dlfcn.h>

    void *dlsym(void *handle, const char *name)

  DDEESSCCRRIIPPTTIIOONN

    The _dd_ll_ss_yy_mm(3) call retrieves the address of a symbol defined in the object
    referenced by handle. The object must have already been opened by a call
    to _dd_ll_oo_pp_ee_nn(3). The symbol is stored in name as a character string.

    If loading the object referenced by handle caused other objects to be
    automatically loaded, all of those objects are searched by the _dd_ll_ss_yy_mm(3)
    call. Typically, _dd_ll_ss_yy_mm(3) operations on the global symbol object use load ordering.
    However, the symbols are resolved in dependency order (see the _dd_ll_oo_pp_ee_nn(3)
    reference page).

  RREETTUURRNN VVAALLUUEESS

    The _dd_ll_ss_yy_mm(3) call returns NULL if the handle doesn't refer to a valid
    object, or if the symbol can't be found in any of the objects associated
    with handle. For more detailed information, use _dd_ll_ee_rr_rr_oo_rr(3).

  EEXXAAMMPPLLEE

    Here's a brief example of using _dd_ll_oo_pp_ee_nn(3) and _dd_ll_ss_yy_mm(3):

    void *handle;
    int  *iptr, (*fptr)(int);
    /* open the object */
    handle = dlopen("/usr/lib/libc.so", RTLD_LAZY);
    /* find the address of a data object */
    iptr = (int *)dlsym(handle, "an_object");
    /* find the address of a function */
    fptr = (int (*)(int))dlsym(handle, "a_function");

  NNOOTTEESS

    There is a special purpose value for handle, RTLD_NEXT, that is reserved
    for future use.

  SSEEEE AALLSSOO

    _d_l_c_l_o_s_e(3)

    _d_l_e_r_r_o_r(3)

    _d_l_o_p_e_n(3)

  UUSSAAGGEE NNOOTTEESS

    The ddllssyymm function is thread safe.

    The ddllssyymm function is not async-signal safe.

