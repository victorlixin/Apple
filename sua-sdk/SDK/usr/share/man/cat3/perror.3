perror(3)                                                     perror(3)

  ssttrreerrrroorr(())

  NNAAMMEE

    perror(), strerror(), strerror_r(), hstrerror(), - system error messages

  SSYYNNOOPPSSIISS

    #include <stdio.h>

    void perror (const char *string)

    #include <string.h>

    char * strerror (int errnum)
    int strerror_r (int errnum, char *strerrbuf, size_t buflen)
    char * hstrerror (int errnum)

  DDEESSCCRRIIPPTTIIOONN

    The ssttrreerrrroorr(3) and ppeerrrroorr(3) functions look up the error message string
    corresponding to an error number.

    The ssttrreerrrroorr(3) function accepts an error number argument errnum and
    returns a pointer to the corresponding message string.

    The reentrant ssttrreerrrroorr__rr(3) function maps the error number specified by
    errnum to a locale-dependent error message string and shall returns the
    string in the buffer identified by strerrbuf, with length buflen.

    The ppeerrrroorr(3) function finds the error message corresponding to the
    current value of the global variable errno (see the eerrrroorrss(1) page) and
    writes it, followed by a newline, to the standard error file descriptor.
    If the argument string is non-NULL, it is prepended to the message string
    and separated from it by a colon and space (:.) If string is NULL, only
    the error message string is printed.

    If errnum is not a recognized error number, the error message string will
    contain "Unknown error:" followed by the error number in decimal.

    The hhssttrreerrrroorr(3) call is a ##ddeeffiinnee for ssttrreerrrroorr(3), provided for
    convenience in working with sockets.

  SSEEEE AALLSSOO

    _e_r_r_n_o(3)

  UUSSAAGGEE NNOOTTEESS

    The following functions are thread safe: ppeerrrroorr,, ssttrreerrrroorr__rr. The following
    functions are not thread safe: ssttrreerrrroorr,, hhssttrreerrrroorr.

    None of these functions are async-signal safe.

