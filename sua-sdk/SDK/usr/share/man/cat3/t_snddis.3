t_snddis(3)                                                 t_snddis(3)

  tt__ssnnddddiiss(())

  NNAAMMEE

    t_snddis - send user-initiated disconnection request

  SSYYNNOOPPSSIISS

    #include <xti.h>

    int t_snddis(
        int fd,
        const struct t_call *call)

  DDEESSCCRRIIPPTTIIOONN

    The tt__ssnnddddiiss(3) function is used to initiate an abortive release on an
    already established connection, or to reject a connection request.

    PPaarraammeetteerrss     BBeeffoorree ccaallll      AAfftteerr ccaallll

    fd             x                /

    call->         addr.maxlen      =

    call->         addr.len         =

    call->         addr.buf         =

    call->         opt.maxlen       =

    call->         opt.len          =

    call->         opt.buf          =

    call->         udata.maxlen     =

    call->         udata.len        x

    call->         udata.buf        ?(?)

    call->         sequence         ?

    The argument fd identifies the local transport endpoint of the connection,
    and call specifies information associated with the abortive release. The
    argument call points to a t_call structure which contains the following
    members:

    struct netbuf addr;
    struct netbuf opt;
    struct netbuf udata;
    int sequence;

    The values in call have different semantics, depending on the context of
    the call to tt__ssnnddddiiss(3). When rejecting a connection request, call must be
    non-null and contain a valid value of sequence to uniquely identify the
    rejected connection indication to the transport provider. The sequence
    field is only meaningful if the transport connection is in the T_INCON
    state. The addr and opt fields of call are ignored. In all other cases,
    call need only be used when data is being sent with the disconnection
    request. The addr, opt and sequence fields of the t_call structure are
    ignored. If the user does not want to send data to the remote user, the
    value of call may be a null pointer.

    The udata structure specifies the user data to be sent to the remote user.
    The amount of user data must not exceed the limits supported by the
    transport provider, as returned in the discon field, of the info argument
    of _tt____oo_pp_ee_nn(3) or _tt____gg_ee_tt_ii_nn_ff_oo(3). If the len field of udata is zero, no data
    will be sent to the remote user.

  VVAALLIIDD SSTTAATTEESS

    T_DATAXFER,T_OUTCON,T_OUTREL,T_INREL,T_INCON(ocnt >; 0)

  EERRRROORRSS

    On failure, t_errno is set to one of the following:

    [TBADF]
        The specified file descriptor does not refer to a transport endpoint.

    [TBADDATA]
        The amount of user data specified was not within the bounds allowed by
        the transport provider.

    [TBADSEQ]
        An invalid sequence number was specified, or a null call pointer was
        specified, when rejecting a connection request.

    [TLOOK]
        An asynchronous event, which requires attention, has occurred.

    [TNOTSUPPORT]
        This function is not supported by the underlying transport provider.

    [TOUTSTATE]
        The communications endpoint referenced by fd is not in one of the
        states in which a call to this function is valid.

    [TPROTO]
        This error indicates that a communication problem has been detected
        between XTI and the transport provider for which there is no other
        suitable XTI error (t_errno).

    [TSYSERR]
        A system error has occurred during execution of this function.

  RREETTUURRNN VVAALLUUEE

    Upon successful completion, a value of 0 is returned. Otherwise, a value
    of -1 is returned and t_errno is set to indicate an error.

  SSEEEE AALLSSOO

    _tt____cc_oo_nn_nn_ee_cc_tt(3)

    _tt____gg_ee_tt_ii_nn_ff_oo(3)

    _tt____ll_ii_ss_tt_ee_nn(3)

    _tt____oo_pp_ee_nn(3)

  CCAAVVEEAATTSS

    The tt__ssnnddddiiss(3) function is an abortive disconnection. Therefore a
    tt__ssnnddddiiss(3) issued on a connection endpoint may cause data previously sent
    using _tt____ss_nn_dd(3), or data not yet received, to be lost (even if an error is
    returned).

  UUSSAAGGEE NNOOTTEESS

    The tt__ssnnddddiiss function is not thread safe.

    The tt__ssnnddddiiss function is not async-signal safe.

