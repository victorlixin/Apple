mvwchgat(3)                                                 mvwchgat(3)

  ccuurrss__aattttrr(())

  NNAAMMEE

    attroff(), wattroff(), attron(), wattron(), attrset(), wattrset(),
    standend(), wstandend(), standout(), wstandout() - curses character and
    window attribute control routines

  SSYYNNOOPPSSIISS

    #include <curses.h>

    int attroff(int attrs);
    int wattroff(WINDOW *win, int attrs);
    int attron(int attrs);
    int wattron(WINDOW *win, int attrs);
    int attrset(int attrs);
    int wattrset(WINDOW *win, int attrs);
    int standend(void);
    int wstandend(WINDOW *win);
    int standout(void);
    int wstandout(WINDOW *win);

    attr_t attr_get(void);
    attr_t wattr_get(WINDOW *win);
    int attr_off(attr_t attrs);
    int wattr_off(WINDOW *win, attr_t attrs);
    int attr_on(attr_t attrs);
    int wattr_on(WINDOW *win, attr_t attrs);
    int attr_set(attr_t attrs);
    int wattr_set(WINDOW *win, attr_t attrs);

    int chgat(int n, attr_t attr, short color, const void *opts)
    int wchgat(WINDOW *win, int n, attr_t attr, short color,
               const void *opts)
    int mvchgat(int y, int x, int n, attr_t attr, short color,
                const void *opts)
    int mvwchgat(WINDOW *win, int y, int x, int n, attr_t attr,
                 short color, const void *opts)

  DDEESSCCRRIIPPTTIIOONN

    These routines manipulate the current attributes of the named window. The
    current attributes of a window apply to all characters that are written
    into the window with _ww_aa_dd_dd_cc_hh(3), _ww_aa_dd_dd_ss_tt_rr(3) and _ww_pp_rr_ii_nn_tt_ww(3). Attributes are
    a property of the character, and move with the character through any
    scrolling and insert/delete line/character operations. To the extent
    possible, they are displayed as appropriate modifications to the graphic
    rendition of characters put on the screen.

    The routine _aa_tt_tt_rr_ss_ee_tt(3) sets the current attributes of the given window to
    attrs. The routine _aa_tt_tt_rr_oo_ff_ff(3) turns off the named attributes without
    turning any other attributes on or off. The routine _aa_tt_tt_rr_oo_nn(3) turns on the
    named attributes without affecting any others. The routine _ss_tt_aa_nn_dd_oo_uu_tt(3) is
    the same as attron(A_STANDOUT). The routine _ss_tt_aa_nn_dd_ee_nn_dd(3) is the same as
    attrset(A_NORMAL) or attrset(0) that is, it turns off all attributes.

    The routine _ww_aa_tt_tt_rr____gg_ee_tt(3) returns the current attribute for the given
    window; _aa_tt_tt_rr____gg_ee_tt(3) returns the current attribute for stdscr The remaining
    attr_ functions operate exactly like the corresponding attr functions,
    except that they take arguments of type aattttrr__tt rather than iinntt.

    The routine _cc_hh_gg_aa_tt(3) changes the attributes of a given number of
    characters starting at the current cursor location of stdscr It does not
    update the cursor and does not perform wrapping. A character count of -
    1 or greater than the remaining window width means to change attributes
    all the way to the end of the current line. The _ww_cc_hh_gg_aa_tt(3) function
    generalizes this to any window; the _mm_vv_ww_cc_hh_gg_aa_tt(3) function does a cursor
    move before acting. In these functions, the color argument is a color-pair
    index (as in the first argument of _ii_nn_ii_tt____pp_aa_ii_rr(3), see _c_u_r_s___c_o_l_o_r(3). The
    opts argument is not presently used, but is reserved for the future (leave
    it NULL).

  AAttttrriibbuutteess

    The following video attributes, defined in <<ccuurrsseess..hh>>, can be passed to
    the routines _aa_tt_tt_rr_oo_nn(3), _aa_tt_tt_rr_oo_ff_ff(3), and _aa_tt_tt_rr_ss_ee_tt(3) or OR-ed with the
    characters passed to _aa_dd_dd_cc_hh(3).

    A_NORMAL          Normal display (no highlight)

    A_STANDOUT        Best highlighting mode of the terminal.

    A_UNDERLINE       Underlining

    A_REVERSE         Reverse video

    A_BLINK           Blinking

    A_DIM             Half bright

    A_BOLD            Extra bright or bold

    A_PROTECT         Protected mode

    A_INVIS           Invisible or blank mode

    A_ALTCHARSET      Alternate character set

    A_CHARTEXT        Bit-mask to extract a character

    COLOR_PAIR(n)     Color-pair number n

    The following macro is the reverse of CCOOLLOORR__PPAAIIRR(n):
    PPAAIIRR__NNUUMMBBEERR(attrs)
        Returns the pair number associated with the CCOOLLOORR__PPAAIIRR(n) attribute.

    The return values of many of these routines are not meaningful (they are
    implemented as macro-expanded assignments and simply return their
    argument). The SVr4 manual page claims (falsely) that these routines
    always return 1.

  NNOOTTEESS

    _aa_tt_tt_rr_oo_ff_ff(3), _ww_aa_tt_tt_rr_oo_ff_ff(3), _aa_tt_tt_rr_oo_nn(3), _ww_aa_tt_tt_rr_oo_nn(3), _aa_tt_tt_rr_ss_ee_tt(3), _ww_aa_tt_tt_rr_ss_ee_tt(3),
    _ss_tt_aa_nn_dd_ee_nn_dd(3) and _ss_tt_aa_nn_dd_oo_uu_tt(3) may be macros.

  PPOORRTTAABBIILLIITTYY

    All these functions are supported in the XSI Curses standard, Issue 4. The
    standard defined the dedicated type for highlights, aattttrr__tt, which is not
    defined in SVr4 curses. The functions taking aattttrr__tt arguments are not
    supported under SVr4.

    The XSI Curses standard states that whether the traditional functions
    _aa_tt_tt_rr_oo_nn(3), _aa_tt_tt_rr_oo_ff_ff(3), _aa_tt_tt_rr_ss_ee_tt(3) can manipulate attributes other than
    A_BLINK, A_BOLD, A_DIM, A_REVERSE, A_STANDOUT, or A_UNDERLINE is
    "unspecified". Under this implementation as well as SVr4 curses, these
    functions correctly manipulate all other highlights (specifically,
    A_ALTCHARSET, A_PROTECT, and A_INVIS).

    XSI Curses added the new entry points, _aa_tt_tt_rr____gg_ee_tt(3), _aa_tt_tt_rr____oo_nn(3),
    _aa_tt_tt_rr____oo_ff_ff(3), _aa_tt_tt_rr____ss_ee_tt(3), _ww_aa_tt_tt_rr____oo_nn(3), _ww_aa_tt_tt_rr____oo_ff_ff(3), _ww_aa_tt_tt_rr____gg_ee_tt(3),
    _ww_aa_tt_tt_rr____ss_ee_tt(3). These are intended to work with a new series of highlight
    macros prefixed with WA_.

    WA_NORMAL         Normal display (no highlight)

    WA_STANDOUT       Best highlighting mode of the terminal.

    WA_UNDERLINE      Underlining

    WA_REVERSE        Reverse video

    WA_BLINK          Blinking

    WA_DIM            Half bright

    WA_BOLD           Extra bright or bold

    WA_ALTCHARSET     Alternate character set

    The XSI curses standard specifies that each pair of corresponding A_ and
    WA_-using functions operates on the same current-highlight information.

    The XSI standard extended conformance level adds new highlights
    A_HORIZONTAL, A_LEFT, A_LOW, A_RIGHT, A_TOP, A_VERTICAL (and corresponding
    WA_ macros for each) which this curses does not yet support.

  SSEEEE AALLSSOO

    _c_u_r_s_e_s(3)

    _c_u_r_s___a_d_d_c_h(3)

    _c_u_r_s___a_d_d_s_t_r(3)

    _c_u_r_s___p_r_i_n_t_w(3)

