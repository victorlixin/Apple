overlay(3)                                                   overlay(3)

  ccuurrss__oovveerrllaayy(())

  NNAAMMEE

    overlay(), overwrite(), copywin() - overlay and manipulate overlapped
    curses windows

  SSYYNNOOPPSSIISS

    #include <curses.h>

    int overlay(const WINDOW *srcwin, WINDOW *dstwin);
    int overwrite(const WINDOW *srcwin, WINDOW *dstwin);
    int copywin(const WINDOW *srcwin, WINDOW *dstwin, int sminrow,
          int smincol, int dminrow, int dmincol, int dmaxrow,
          int dmaxcol, int overlay);

  DDEESSCCRRIIPPTTIIOONN

    The _oo_vv_ee_rr_ll_aa_yy(3) and _oo_vv_ee_rr_ww_rr_ii_tt_ee(3) routines overlay srcwin on top of dstwin.
    srcwin and dstwinarenot to be the same size; only text where the two
    windows overlap is copied. The difference is that _oo_vv_ee_rr_ll_aa_yy(3) is non-
    destructive (blanks are not copied) whereas _oo_vv_ee_rr_ww_rr_ii_tt_ee(3) is destructive.

    The _cc_oo_pp_yy_ww_ii_nn(3) routine provides a finer granularity of control over the
    oovveerrllaayy and _oo_vv_ee_rr_ww_rr_ii_tt_ee(3) routines. Like in the _pp_rr_ee_ff_rr_ee_ss_hh(3) routine, a
    rectangle is specified in the destination window, (dminrow dmincol) and
    (maxrow dmaxcol), and the upper-left-corner coordinates of the source
    window, (sminrow smincol). If the argument overlay is TRUE, then copying
    is non-destructive, as in _oo_vv_ee_rr_ll_aa_yy(3).

  RREETTUURRNN VVAALLUUEE

    Routines that return an integer return ERR upon failure, and OK (SVr4 only
    specifies "an integer value other than ERR") upon successful completion.

  NNOOTTEESS

    _oo_vv_ee_rr_ll_aa_yy(3) and _oo_vv_ee_rr_ww_rr_ii_tt_ee(3) may be macros.

  PPOORRTTAABBIILLIITTYY

    The XSI Curses standard, Issue 4 describes these functions (adding the
    const qualifiers). It further specifies their behavior in the presence of
    characters with multi-byte renditions (not yet supported in this
    implementation).

  SSEEEE AALLSSOO

    _c_u_r_s_e_s(3)

    _c_u_r_s___p_a_d(3)

    _c_u_r_s___r_e_f_r_e_s_h(3)

