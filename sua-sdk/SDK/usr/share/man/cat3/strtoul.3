strtoul(3)                                                   strtoul(3)

  ssttrrttoouull(())

  NNAAMMEE

    strtoul() - convert a string to an unsigned long

  SSYYNNOOPPSSIISS

    #include <stdlib.h>
    #include <limits.h>

    unsigned long strtoul (const char *nptr, char **endptr, int base)

  DDEESSCCRRIIPPTTIIOONN

    The _ss_tt_rr_tt_oo_uu_ll(3) function converts the string in nptr to an uunnssiiggnneedd lloonngg
    value. The conversion is done according to the given base, which must be
    between 2 and 36 inclusive, or be the special value 0.

    The string may begin with an arbitrary amount of white space (as
    determined by _ii_ss_ss_pp_aa_cc_ee(3)) followed by a single optional + or - sign. If
    base is zero or 16, the string may then include a 0x prefix, and the
    number will be read in base 16; otherwise, a zero base is taken as 10
    (decimal) unless the next character is 0, in which case it is taken as 8
    (octal).

    The remainder of the string is converted to an uunnssiiggnneedd lloonngg value in the
    obvious manner, stopping at the end of the string or at the first
    character that does not produce a valid digit in the given base. (In bases
    above 10, the letter A in either upper or lower case represents 10, B
    represents 11, and so forth, with Z representing 35.)

    If endptr is not nil, _ss_tt_rr_tt_oo_uu_ll(3) stores the address of the first invalid
    character in *endptr. If there were no digits at all, however, _ss_tt_rr_tt_oo_uu_ll(3)
    stores the original value of nptr in *endptr. (Thus, if *nptr is not \0
    but **endptr is \0 on return, the entire string was valid.)

  RREETTUURRNN VVAALLUUEESS

    The _ss_tt_rr_tt_oo_uu_ll(3) function returns either the result of the conversion or, if
    there was a leading minus sign, the negation of the result of the
    conversion, unless the original (non-negated) value would overflow; in the
    latter case, _ss_tt_rr_tt_oo_uu_ll(3) returns {ULONG_MAX} and sets the global variable
    errno to [ERANGE].

  EERRRROORRSS

    [ERANGE]
        The given string was out of range; the value converted has been
        clamped.

  SSEEEE AALLSSOO

    _s_t_r_t_o_l(3)

  UUSSAAGGEE NNOOTTEESS

    The ssttrrttoouull function is thread safe.

    The ssttrrttoouull function is not async-signal safe.

