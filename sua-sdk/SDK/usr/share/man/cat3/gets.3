gets(3)                                                         gets(3)

  ffggeettss(())

  NNAAMMEE

    fgets(), gets() - get a line from a stream

  SSYYNNOOPPSSIISS

    #include <stdio.h>

    char * fgets (char *str, size_t size, FILE *stream)
    char * gets (char *str)

  DDEESSCCRRIIPPTTIIOONN

    The _ff_gg_ee_tt_ss(3) function reads at most one less than the number of characters
    specified by size from the given stream and stores them in the string str.
    Reading stops when a newline character is found, at end-of-file or error.
    The newline, if any, is retained. In any case a \0 character is appended
    to end the string.

    The _gg_ee_tt_ss(3) function is equivalent to _ff_gg_ee_tt_ss(3) with an infinite size and a
    stream of stdin except that the newline character (if any) is not stored
    in the string. It is the caller's responsibility to ensure that the input
    line, if any, is sufficiently short to fit in the string.

    Because the _gg_ee_tt_ss(3) function is a security violation, this implementation
    warns the user by writing the string, warning: this program uses gets(),
    which is unsafe.\r\n to standard error. This warning can be disabled by
    setting the environment variable DISABLE_GETS_WARNING.

  RREETTUURRNN VVAALLUUEESS

    Upon successful completion, _ff_gg_ee_tt_ss(3) and _gg_ee_tt_ss(3) return a pointer to the
    string. If end-of-file or an error occurs before any characters are read,
    they return NULL. The _ff_gg_ee_tt_ss(3) and functions _gg_ee_tt_ss(3) do not distinguish
    between end-of-file and error, and callers must use _ff_ee_oo_ff(3) and _ff_ee_rr_rr_oo_rr(3)
    to determine which occurred.

  EERRRROORRSS

    [EBADF]
        The given stream is not a readable stream.

    The function _ff_gg_ee_tt_ss(3) may also fail and set errno for any of the errors
    specified for the routines _ff_ff_ll_uu_ss_hh(3), _ff_ss_tt_aa_tt(2), _rr_ee_aa_dd(2) or _mm_aa_ll_ll_oo_cc(3).

    The function _gg_ee_tt_ss(3) may also fail and set errno for any of the errors
    specified for the routine _gg_ee_tt_cc_hh_aa_rr(3).

  NNOOTTEESS

    Since it is usually impossible to ensure that the next input line is less
    than some arbitrary length, and because overflowing the input buffer is
    almost invariably a security violation, programs should never use _gg_ee_tt_ss(3).
    The _gg_ee_tt_ss(3) function exists to conform to ANSI-C.

  SSEEEE AALLSSOO

    _f_e_o_f(3)

    _f_e_r_r_o_r(3)

  UUSSAAGGEE NNOOTTEESS

    All of these functions are thread safe.

    None of these functions are async-signal safe.

