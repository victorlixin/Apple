rcmd(3)                                                         rcmd(3)

  rrccmmdd

  NNAAMMEE

    rcmd(), rresvport(), iruserok(), ruserok() - routines for returning a
    stream to a remote command

  SSYYNNOOPPSSIISS

    #include <netdb.h>

    int rcmd (char **ahost, unsigned short inport, const char *locuser,
             const char *remuser, const char *cmd, int *fd2p)
    int rresvport (int *port)
    int iruserok (unsigned long raddr, int superuser, const char *ruser,
                  const char *luser)
    int ruserok (const char *rhost, int superuser, const char *ruser,
                 const char *luser)

  DDEESSCCRRIIPPTTIIOONN

    The _rr_cc_mm_dd(3) function is used to execute a command on a remote computer
    using an authentication scheme based on reserved port numbers. The
    _rr_rr_ee_ss_vv_pp_oo_rr_tt(3) function returns a descriptor to a socket with an address in
    the privileged port space. The _rr_uu_ss_ee_rr_oo_kk(3) function is used by servers to
    authenticate clients requesting service with _rr_cc_mm_dd(3). All three functions
    are present in the same file and are used by the _r_s_h_d(1) server (among
    others).

    The _rr_cc_mm_dd(3) function looks up the host *ahost using _gg_ee_tt_hh_oo_ss_tt_bb_yy_nn_aa_mm_ee(2),
    returning -1 if the host does not exist. Otherwise *ahost is set to the
    standard name of the host and a connection is established to a server
    residing at the well-known Internet port inport. The host name can be
    specified in either name or numeric dot-notation format.

    If the connection succeeds, a socket in the Internet domain of type
    SOCK_STREAM is returned to the caller, and given to the remote command as
    stdin and stdout. If fd2p is non-zero, an auxiliary channel to a control
    process will be set up, and a descriptor for it will be placed in *fd2p
    The control process will return diagnostic output from the command (unit
    2) on this channel, and will also accept bytes on this channel as being
    POSIX signal numbers, to be forwarded to the process group of the command.
    If fd2p is 0, then the stderr (unit 2 of the remote command) will be made
    the same as the stdout and no provision is made for sending arbitrary
    signals to the remote process, although you may be able to get its
    attention by using out-of-band data.

    The protocol is described in detail in rrsshhdd(1).

    The _rr_rr_ee_ss_vv_pp_oo_rr_tt(3) function is used to obtain a socket with a privileged
    address bound to it. This socket is suitable for use by _rr_cc_mm_dd(3) and
    several other functions. Privileged Internet ports are those in the range
    0 to 1023. Only the superuser is allowed to bind an address of this sort
    to a socket.

    The _ii_rr_uu_ss_ee_rr_oo_kk(3) and _rr_uu_ss_ee_rr_oo_kk(3) functions take a remote host's internet
    protocol (IP) address or name, as returned by the _gg_ee_tt_hh_oo_ss_tt_bb_yy_nn_aa_mm_ee(2)
    routines, two user names and a flag indicating whether the local user is
    privileged (equivalent to superuser on UNIX computers). If the user is nnoott
    privileged user, it checks the $$IINNTTEERRIIXX__RROOOOTT//eettcc//hhoossttss..eeqquuiivv file. If that
    lookup is not done, or is unsuccessful, it checks the ..rrhhoossttss in the local
    user's home directory to see if the request for service is allowed.

    If this file does not exist, is not a regular file, is owned by anyone
    other than the user or the superuser, or is writeable by anyone other than
    the owner, the check automatically fails. Zero is returned if the computer
    name is listed in the hhoossttss..eeqquuiivv file, or the host and remote user name
    are found in the ..rrhhoossttss file; otherwise _ii_rr_uu_ss_ee_rr_oo_kk(3) and _rr_uu_ss_ee_rr_oo_kk(3) return
    -1. If the local domain (as obtained from _gg_ee_tt_hh_oo_ss_tt_nn_aa_mm_ee(3)) is the same as
    the remote domain, only the computer name need be specified.

    The _ii_rr_uu_ss_ee_rr_oo_kk(3) function is strongly preferred for security reasons. It
    requires trusting the local Domain Name System (DNS) networking protocol
    at most, while the _rr_uu_ss_ee_rr_oo_kk(3) function requires trusting the entire DNS,
    which can be spoofed.

  RREETTUURRNN VVAALLUUEESS

    The _rr_cc_mm_dd(3) function returns a valid socket descriptor on success. It
    returns -1 on error and prints a diagnostic message on the standard error.

    The _rr_rr_ee_ss_vv_pp_oo_rr_tt(3) function returns a valid, bound socket descriptor on
    success. It returns -1 on error with the global value errno set according
    to the reason for failure. The error code EAGAIN is overloaded to mean
    "All network ports in use."

  SSEEEE AALLSSOO

    _r_l_o_g_i_n(1)

    _r_s_h(1)

    _r_e_x_e_c_d(1)

    _r_l_o_g_i_n_d(1)

    _r_s_h_d(1)

    _r_e_x_e_c(3)

  UUSSAAGGEE NNOOTTEESS

    None of these functions are thread safe.

    None of these functions are async-signal safe.

