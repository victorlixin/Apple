ungetch(3)                                                   ungetch(3)

  ccuurrss__ggeettcchh(())

  NNAAMMEE

    getch(), wgetch(), mvgetch(), mvwgetch(), ungetch() - get (or push back)
    characters from curses terminal keyboard

  SSYYNNOOPPSSIISS

    #include <curses.h>

    int getch(void);
    int wgetch(WINDOW *win);
    int mvgetch(int y, int x);
    int mvwgetch(WINDOW *win, int y, int x);
    int ungetch(int ch);

  DDEESSCCRRIIPPTTIIOONN

    The _gg_ee_tt_cc_hh(3), _ww_gg_ee_tt_cc_hh(3), _mm_vv_gg_ee_tt_cc_hh(3) and _mm_vv_ww_gg_ee_tt_cc_hh(3), routines read a
    character from the window. In no-delay mode, if no input is waiting, the
    value ERR is returned. In delay mode, the program waits until the system
    passes text through to the program. Depending on the setting of _cc_bb_rr_ee_aa_kk(3),
    this is after one character (cbreak mode), or after the first newline
    (nocbreak mode). In half-delay mode, the program waits until a character
    is typed or the specified time-out has been reached.

    If _nn_oo_ee_cc_hh_oo(3) has been set, then the character will also be echoed into the
    designated window according to the following rules: If the character is
    the current erase character, left arrow, or backspace, the cursor is moved
    one space to the left and that screen position is erased as if _dd_ee_ll_cc_hh(3)
    had been called. If the character value is any other KEY_ define, the user
    is alerted with a _bb_ee_ee_pp(3) call. Otherwise the character is simply output
    to the screen.

    If the window is not a pad, and it has been moved or modified since the
    last call to _ww_rr_ee_ff_rr_ee_ss_hh(3), _ww_rr_ee_ff_rr_ee_ss_hh(3) will be called before another
    character is read.

    If _kk_ee_yy_pp_aa_dd(3) is TRUE, and a function key is pressed, the token for that
    function key is returned instead of the raw characters. Possible function
    keys are defined in <<ccuurrsseess..hh>> as macros with values outside the range of
    8-bit characters whose names begin with KEY_. Thus, a variable intended to
    hold the return value of a function key must be of sshhoorrtt size or larger.

    When a character that could be the beginning of a function key is received
    (which, on modern terminals, means an escape character), ccuurrsseess sets a
    timer. If the remainder of the sequence does not come in within the
    designated time, the character is passed through; otherwise, the function
    key value is returned. For this reason, many terminals experience a delay
    between the time a user presses the escape key and the escape is returned
    to the program.

    The _uu_nn_gg_ee_tt_cc_hh(3) routine places ch back onto the input queue to be returned
    by the next call to _ww_gg_ee_tt_cc_hh(3). Note that there is, in effect, just one
    input queue for all windows.

  FFuunnccttiioonn KKeeyyss

    The following function keys, defined in <<ccuurrsseess..hh>>, might be returned by
    _gg_ee_tt_cc_hh(3) if _kk_ee_yy_pp_aa_dd(3) has been enabled. Not all of these are necessarily
    supported on any particular terminal.

    NNaammee              KKeeyy nnaammee

    KEY_BREAK         Break key

    KEY_DOWN          The four arrow keys ...

    KEY_UP

    KEY_LEFT

    KEY_RIGHT

    KEY_HOME          Home key (upward+left arrow)

    KEY_BACKSPACE     Backspace

    KEY_F0            Function keys; space for 64 keys is reserved.

    KEY_F(n)          For 0 < n < 63

    KEY_DL            Delete line

    KEY_IL            Insert line

    KEY_DC            Delete character

    KEY_IC            Insert char or enter insert mode

    KEY_EIC           Exit insert char mode

    KEY_CLEAR         Clear screen

    KEY_EOS           Clear to end of screen

    KEY_EOL           Clear to end of line

    KEY_SF            Scroll 1 line forward

    KEY_SR            Scroll 1 line backward (reverse)

    KEY_NPAGE         Next page

    KEY_PPAGE         Previous page

    KEY_STAB          Set tab

    KEY_CTAB          Clear tab

    KEY_CATAB         Clear all tabs

    KEY_ENTER         Enter or send

    KEY_SRESET        Soft (partial) reset

    KEY_RESET         Reset or hard reset

    KEY_PRINT         Print or copy

    KEY_LL            Home down or bottom (lower left).
                      Keypad is arranged like this:
                      AA11 uupp AA33
                      lleefftt BB22 rriigghhtt
                      CC11 ddoowwnn CC33

    KEY_A1            Upper left of keypad

    KEY_A3            Upper right of keypad

    KEY_B2            Center of keypad

    KEY_C1            Lower left of keypad

    KEY_C3            Lower right of keypad

    KEY_BTAB          Back tab key

    KEY_BEG           Beg(inning) key

    KEY_CANCEL        Cancel key

    KEY_CLOSE         Close key

    KEY_COMMAND       Cmd (command) key

    KEY_COPY          Copy key

    KEY_CREATE        Create key

    KEY_END           End key

    KEY_EXIT          Exit key

    KEY_FIND          Find key

    KEY_HELP          Help key

    KEY_MARK          Mark key

    KEY_MESSAGE       Message key

    KEY_MOVE          Move key

    KEY_NEXT          Next object key

    KEY_OPEN          Open key

    KEY_OPTIONS       Options key

    KEY_PREVIOUS      Previous object key

    KEY_REDO          Redo key

    KEY_REFERENCE     Ref(erence) key

    KEY_REFRESH       Refresh key

    KEY_REPLACE       Replace key

    KEY_RESTART       Restart key

    KEY_RESUME        Resume key

    KEY_SAVE          Save key

    KEY_SBEG          Shifted beginning key

    KEY_SCANCEL       Shifted cancel key

    KEY_SCOMMAND      Shifted command key

    KEY_SCOPY         Shifted copy key

    KEY_SCREATE       Shifted create key

    KEY_SDC           Shifted delete char key

    KEY_SDL           Shifted delete line key

    KEY_SELECT        Select key

    KEY_SEND          Shifted end key

    KEY_SEOL          Shifted clear line key

    KEY_SEXIT         Shifted exit key

    KEY_SFIND         Shifted find key

    KEY_SHELP         Shifted help key

    KEY_SHOME         Shifted home key

    KEY_SIC           Shifted input key

    KEY_SLEFT         Shifted left arrow key

    KEY_SMESSAGE      Shifted message key

    KEY_SMOVE         Shifted move key

    KEY_SNEXT         Shifted next key

    KEY_SOPTIONS      Shifted options key

    KEY_SPREVIOUS     Shifted prev key

    KEY_SPRINT        Shifted print key

    KEY_SREDO         Shifted redo key

    KEY_SREPLACE      Shifted replace key

    KEY_SRIGHT        Shifted right arrow

    KEY_SRSUME        Shifted resume key

    KEY_SSAVE         Shifted save key

    KEY_SSUSPEND      Shifted suspend key

    KEY_SUNDO         Shifted undo key

    KEY_SUSPEND       Suspend key

    KEY_UNDO          Undo key

  RREETTUURRNN VVAALLUUEE

    All routines return the integer ERR upon failure and "an integer value
    other than ERR" (OK in the case of _uu_nn_gg_ee_tt_cc_hh(3)) upon successful completion.

  NNOOTTEESS

    Use of the escape key by a programmer for a single character function is
    discouraged, as it will cause a delay of up to one second while the keypad
    code looks for a following function-key sequence.

    When using _gg_ee_tt_cc_hh(3), _ww_gg_ee_tt_cc_hh(3), _mm_vv_gg_ee_tt_cc_hh(3), or _mm_vv_ww_gg_ee_tt_cc_hh(3), nocbreak mode
    (_nn_oo_cc_bb_rr_ee_aa_kk(3)) and echo mode (_ee_cc_hh_oo(3)) should not be used at the same time.
    Depending on the state of the tty driver when each character is typed, the
    program may produce undesirable results.

    Note that _gg_ee_tt_cc_hh(3), _mm_vv_gg_ee_tt_cc_hh(3), and _mm_vv_ww_gg_ee_tt_cc_hh(3) may be macros.

    Historically, the set of keypad macros was largely defined by the
    extremely function-key-rich keyboard of the AT&T 7300, aka 3B1, aka Safari
    4. Modern personal computers usually have only a small subset of these.
    IBM PC-style consoles typically support little more than KEY_UP ,
    KEY_DOWN, KEY_LEFT, KEY_RIGHT , KEY_HOME, KEY_END, KEY_NPAGE, KEY_PPAGE,
    and function keys 1 through 12. The Ins key is usually mapped to KEY_IC.

  PPOORRTTAABBIILLIITTYY

    These functions are described in the XSI Curses standard, Issue 4. They
    read single-byte characters only. The standard specifies that they return
    ERR on failure, but specifies no error conditions.

    The echo behavior of these functions on input of KEY_ or backspace
    characters was not specified. This description is adopted from the XSI
    Curses standard.

  SSEEEE AALLSSOO

    _c_u_r_s_e_s(3)

    _c_u_r_s___i_n_o_p_t_s(3)

    _c_u_r_s___m_o_v_e(3)

    _c_u_r_s___r_e_f_r_e_s_h(3)

