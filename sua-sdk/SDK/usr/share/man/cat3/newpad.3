newpad(3)                                                     newpad(3)

  ccuurrss__ppaadd(())

  NNAAMMEE

    newpad(), subpad(), prefresh(), pnoutrefresh(), pechochar() - create and
    display curses pads

  SSYYNNOOPPSSIISS

    #include <curses.h>

    WINDOW *newpad(int nlines, int ncols);
    WINDOW *subpad(WINDOW *orig, int nlines, int ncols,
          int begin_y, int begin_x);
    int prefresh(WINDOW *pad, int pminrow, int pmincol,
          int sminrow, int smincol, int smaxrow, int smaxcol);
    int pnoutrefresh(WINDOW *pad, int pminrow, int pmincol,
          int sminrow, int smincol, int smaxrow, int smaxcol);
    int pechochar(WINDOW *pad, chtype ch);

  DDEESSCCRRIIPPTTIIOONN

    The _nn_ee_ww_pp_aa_dd(3) routine creates and returns a pointer to a new pad data
    structure with the given number of lines, nlines, and columns, ncols. A
    pad is like a window, except that it is not restricted by the screen size,
    and is not necessarily associated with a particular part of the screen.
    Pads can be used when a large window is needed, and only a part of the
    window will be on the screen at one time. Automatic refreshes of pads
    (e.g., from scrolling or echoing of input) do not occur. It is not legal
    to call _ww_rr_ee_ff_rr_ee_ss_hh(3) with a pad as an argument; the routines _pp_rr_ee_ff_rr_ee_ss_hh(3) or
    _pp_nn_oo_uu_tt_rr_ee_ff_rr_ee_ss_hh(3) should be called instead. Note that these routines require
    additional parameters to specify the part of the pad to be displayed and
    the location on the screen to be used for the display.

    The _ss_uu_bb_pp_aa_dd(3) routine creates and returns a pointer to a subwindow within
    a pad with the given number of lines, nlines, and columns, ncols. Unlike
    _ss_uu_bb_ww_ii_nn(3), which uses screen coordinates, the window is at position
    (begin_x begin_y) on the pad. The window is made in the middle of the
    window orig, so that changes made to one window affect both windows.
    During the use of this routine, it will often be necessary to call
    _tt_oo_uu_cc_hh_ww_ii_nn(3) or _tt_oo_uu_cc_hh_ll_ii_nn_ee(3) on orig before calling _pp_rr_ee_ff_rr_ee_ss_hh(3).

    The _pp_rr_ee_ff_rr_ee_ss_hh(3) and _pp_nn_oo_uu_tt_rr_ee_ff_rr_ee_ss_hh(3) routines are analogous to _ww_rr_ee_ff_rr_ee_ss_hh(3)
    and _ww_nn_oo_uu_tt_rr_ee_ff_rr_ee_ss_hh(3) except that they relate to pads instead of windows.
    The additional parameters are needed to indicate what part of the pad and
    screen are involved. pminrow and pmincol specify the upper left-hand
    corner of the rectangle to be displayed in the pad. sminrow, smincol,
    smaxrow, and smaxcol specify the edges of the rectangle to be displayed on
    the screen. The lower right-hand corner of the rectangle to be displayed
    in the pad is calculated from the screen coordinates, since the rectangles
    must be the same size. Both rectangles must be entirely contained within
    their respective structures. Negative values of pminrow, pmincol, sminrow,
    or smincol are treated as if they were zero.

    The pechochar routine is functionally equivalent to a call to _aa_dd_dd_cc_hh(3)
    followed by a call to _rr_ee_ff_rr_ee_ss_hh(3), a call to _ww_aa_dd_dd_cc_hh(3) followed by a call
    to _ww_rr_ee_ff_rr_ee_ss_hh(3), or a call to _ww_aa_dd_dd_cc_hh(3) followed by a call to _pp_rr_ee_ff_rr_ee_ss_hh(3).
    The knowledge that only a single character is being output is taken into
    consideration and, for non-control characters, a considerable performance
    gain might be seen by using these routines instead of their equivalents.
    In the case of _pp_ee_cc_hh_oo_cc_hh_aa_rr(3), the last location of the pad on the screen is
    reused for the arguments to _pp_rr_ee_ff_rr_ee_ss_hh(3).

  RREETTUURRNN VVAALLUUEE

    Routines that return an integer return ERR upon failure and OK (SVr4 only
    specifies "an integer value other than ERR") upon successful completion.

    Routines that return pointers return NULL on error, and set errno to
    [ENOMEM].

  NNOOTTEESS

    Note that _pp_ee_cc_hh_oo_cc_hh_aa_rr(3) may be a macro.

  PPOORRTTAABBIILLIITTYY

    The XSI Curses standard, Issue 4 describes these functions.

  SSEEEE AALLSSOO

    _c_u_r_s_e_s(3)

    _c_u_r_s___r_e_f_r_e_s_h(3)

    _c_u_r_s___t_o_u_c_h(3)

    _c_u_r_s___a_d_d_c_h(3)

