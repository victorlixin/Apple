lfind(3)                                                       lfind(3)

  llsseeaarrcchh(())

  NNAAMMEE

    lsearch(), lfind() - linear searching routines

  SSYYNNOOPPSSIISS

    char * lsearch (const void *key, const void *base, size_t *nelp,
                    size_t width, int (*compar)(void *, void *))
    char * lfind (const void *key, const void *base, size_t *nelp,
                  size_t width, int (*compar)(void *, void *))

  DDEESSCCRRIIPPTTIIOONN

    The functions _ll_ss_ee_aa_rr_cc_hh(3) and _ll_ff_ii_nn_dd(3) provide basic linear searching
    functionality.

    Base is the pointer to the beginning of an array. The argument nelp is the
    current number of elements in the array, where each element is width bytes
    long. The compar function is a comparison routine which is used to compare
    two elements. It takes two arguments which point to the key object and to
    an array member, in that order, and must return an integer less than,
    equivalent to, or greater than zero if the key object is considered,
    respectively, to be less than, equal to, or greater than the array member.

    The _ll_ss_ee_aa_rr_cc_hh(3) and _ll_ff_ii_nn_dd(3) functions return a pointer into the array
    referenced by base where key is located. If key does not exist, _ll_ff_ii_nn_dd(3)
    will return a null pointer and _ll_ss_ee_aa_rr_cc_hh(3) will add it to the array. When
    an element is added to the array by _ll_ss_ee_aa_rr_cc_hh(3) the location referenced by
    the argument nelp is incremented by one.

  SSEEEE AALLSSOO

    _b_s_e_a_r_c_h(3)

  UUSSAAGGEE NNOOTTEESS

    All of these functions are thread safe.

    None of these functions are async-signal safe.

