fputc(3)                                                       fputc(3)

  ppuuttcc(())

  NNAAMMEE

    fputc(), putc(), putchar() - output a character or word to a stream

  SSYYNNOOPPSSIISS

    #include <stdio.h>

    int fputc (int c, FILE *stream)
    int putc (int c, FILE *stream)
    int putchar (int c)

  DDEESSCCRRIIPPTTIIOONN

    The _ff_pp_uu_tt_cc(3) function writes the character c (converted to an uunnssiiggnneedd
    cchhaarr) to the output stream pointed to by stream.

    The _pp_uu_tt_cc(3) function acts essentially identically to _ff_pp_uu_tt_cc(3), but is a
    macro that expands in-line. It may evaluate stream more than once, so
    arguments given to _pp_uu_tt_cc(3) should not be expressions with potential side
    effects.

    The _pp_uu_tt_cc_hh_aa_rr(3) function is identical to _pp_uu_tt_cc(3) with an output stream of
    stdout.

  RREETTUURRNN VVAALLUUEESS

    The functions, _ff_pp_uu_tt_cc(3), _pp_uu_tt_cc(3) and _pp_uu_tt_cc_hh_aa_rr(3) return the character
    written. If an error occurs, the value EOF is returned.

  EERRRROORRSS

    These functions can set errno to the following values:

    [EAGAIN]
        The O_NONBLOCK flag is set for the file descriptor underlying stream
        and the process would be delayed in the write operation.

    [EBADF]
        The file descriptor underlying stream is not a valid file descriptor
        open for writing.

    [EFBIG]
        An attempt was made to write to a file that exceeds the maximum file
        size  or the process' file size limit.

    [EFBIG]
        The file is a regular file and an attempt was made to write at or
        beyond the offset maximum.

    [EINTR]
        The write operation was terminated due to the receipt of a signal, and
        no data was transferred.

    [EIO]
        A physical I/O error has occurred, or the process is a member of a
        background process group attempting to write to its controlling
        terminal, TOSTOP is set, the process is neither ignoring nor blocking
        SIGTTOU and the process group of the process is orphaned. This error
        may also be returned under implementation-dependent conditions.

    [ENOSPC]
        There was no free space remaining on the device containing the file.

    [EPIPE]
        An attempt is made to write to a pipe or FIFO that is not open for
        reading by any process. A SIGPIPE signal will also be sent to the
        thread.

  SSEEEE AALLSSOO

    _f_e_o_f(3)

    _f_e_r_r_o_r(3)

    _f_o_p_e_n(3)

    _g_e_t_c(3)

  UUSSAAGGEE NNOOTTEESS

    All of these functions are thread safe.

    None of these functions are async-signal safe.

