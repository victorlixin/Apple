xdr_long(3)                                                 xdr_long(3)

  xxddrr(())

  NNAAMMEE

    xdr - library routines for external data representation

  SSYYNNOOPPSSIISS

    #include <rpc/rpc.h>

    bool_t xdr_array(XDR *xdrs, char **arrp, u_int *sizep,
              u_int maxsize, u_ing elsize, xdrproc_t elproc)
    bool_t xdr_bool(XDR *xdrs, bool_t *bp)
    xdr_bytes(XDR *xdrs, char **sp, u_int *sizep, u_int maxsize)
    bool_t xdr_char(XDR *xdrs, char *cp)
    void xdr_destroy(XDR *xdrs)
    bool_t xdr_double(XDR *xdrs, double *dp)
    bool_t xdr_enum(XDR *xdrs, enum_t *ep)
    bool_t xdr_float(XDR *xdrs, float *fp)
    void xdr_free(xdrproc_t proc, char *objp)
    void xdr_free(xdrproc_t proc, char *objp)
    u_int xdr_getpos(XDR *xdrs)
    long * xdr_inline(XDR *xdrs, int len)
    bool_t xdr_int(XDR *xdrs, int *ip)
    bool_t xdr_long(XDR *xdrs, long *lp)
    void xdrmem_create(XDR *xdrs, char *addr, u_int size, enum xdr_op op)
    bool_t xdr_opaque(XDR *xdrs, char *cp, u_int cnt)
    bool_t xdr_pointer(XDR *xdrs, char **objpp, u_int objsize, xdrproc_t
    xdrobj)
    void xdrrec_create(XDR *xdrs, u_int sendsize, u_int recvsize,
                 char *handle, int (*readit) (), int (*writeit) ())
    bool_t xdrrec_endofrecord(XDR *xdrs, int sendnow)
    bool_t xdrrec_eof(XDR *xdrs, int empty)
    bool_t xdrrec_skiprecord(XDR *xdrs)
    bool_t xdr_reference(XDR *xdrs, char **pp, u_int size, xdrproc_t proc)
    xdr_setpos(XDR *xdrs, u_int pos)
    bool_t xdr_short(XDR *xdrs, short *sp)
    void xdrstdio_create(XDR *xdrs, FILE *file, enum xdr_op op)
    bool_t xdr_string(XDR *xdrs, char **sp, u_int maxsize,
    bool_t xdr_u_char(XDR *xdrs, unsigned char *ucp)
    bool_t xdr_u_int(XDR *xdrs, unsigned *up)
    bool_t xdr_u_long(XDR *xdrs, unsigned long *ulp)
    bool_t xdr_u_short(XDR *xdrs, unsigned short *usp)
    bool_t xdr_union(XDR *xdrs, int *dscmp, char *unp,
              struct xdr_discrim *choices,
              bool_t (*defaultarm) ())
    bool_t xdr_vector(XDR *xdrs, char *arrp, u_int size,
               u_int elsize, xdrproc_t elproc)
    bool_t xdr_void(void)
    bool_t xdr_wrapstring(XDR *xdrs, char **sp)

  DDEESSCCRRIIPPTTIIOONN

    These routines allow C programmers to describe arbitrary data structures
    in a machine-independent fashion. Data for remote procedure calls are
    transmitted using these routines.

    Declarations for these routines are included when you include <<rrppcc//rrppcc..hh>>.

    xdr_array(XDR *xdrs, char **arrp, u_int *sizep,
              u_int maxsize, u_ing elsize, xdrproc_t elproc)

    A filter primitive that translates between variable-length arrays and
    their corresponding external representations. The parameter arrp is the
    address of the pointer to the array, while sizep is the address of the
    element count of the array, this element count cannot exceed maxsize. The
    parameter elsize is the sizeof each of the array's elements, and elproc is
    an XDR filter that translates between the array elements' C form, and
    their external representation. This routine returns one if it succeeds,
    zero otherwise.

    xdr_bool(XDR *xdrs, bool_t *bp)

    A filter primitive that translates between booleans (C integers) and their
    external representations. When encoding data, this filter produces values
    of either one or zero. This routine returns one if it succeeds, zero
    otherwise.

    xdr_bytes(XDR *xdrs, char **sp, u_int *sizep, u_int maxsize)

    A filter primitive that translates between counted byte strings and their
    external representations. The parameter sp is the address of the string
    pointer. The length of the string is located at address sizep, strings
    cannot be longer than maxsize. This routine returns one if it succeeds,
    zero otherwise.

    xdr_char(XDR *xdrs, char *cp)

    A filter primitive that translates between C characters and their external
    representations. This routine returns one if it succeeds, zero otherwise.
    Note: encoded characters are not packed, and occupy 4 bytes each. For
    arrays of characters, it is worthwhile to consider _xx_dd_rr____bb_yy_tt_ee_ss(3),
    _xx_dd_rr____oo_pp_aa_qq_uu_ee(3) or _xx_dd_rr____ss_tt_rr_ii_nn_gg(3).

    void
    xdr_destroy(XDR *xdrs)

    A macro that invokes the destroy routine associated with the XDR stream,
    xdrs. Destruction usually involves freeing private data structures
    associated with the stream. Using xdrs after invoking _xx_dd_rr____dd_ee_ss_tt_rr_oo_yy(3) is
    undefined.

    xdr_double(XDR *xdrs, double *dp)

    A filter primitive that translates between C precision numbers and their
    external representations. This routine returns one if it succeeds, zero
    otherwise.

    xdr_enum(XDR *xdrs, enum_t *ep)

    A filter primitive that translates between C (actually integers) and their
    external representations. This routine returns one if it succeeds, zero
    otherwise.

    xdr_float(XDR *xdrs, float *fp)

    A filter primitive that translates between C and their external
    representations. This routine returns one if it succeeds, zero otherwise.

    void
    xdr_free(xdrproc_t proc, char *objp)

    Generic freeing routine. The first argument is the XDR routine for the
    object being freed. The second argument is a pointer to the object itself.
    Note: the pointer passed to this routine is not freed, but what it points
    to is freed (recursively).

    u_int
    xdr_getpos(XDR *xdrs)

    A macro that invokes the get-position routine associated with the XDR
    stream, xdrs. The routine returns an unsigned integer, which indicates the
    position of the XDR byte stream. A desirable feature of XDR streams is
    that simple arithmetic works with this number, although the XDR stream
    instances need not guarantee this.

    long *
    xdr_inline(XDR *xdrs, int len)

    A macro that invokes the in-line routine associated with the XDR stream,
    xdrs. The routine returns a pointer to a contiguous piece of the stream's
    buffer, len is the byte length of the desired buffer. Note: pointer is
    cast to Warning: _xx_dd_rr____ii_nn_ll_ii_nn_ee(3) may return NULL (0) if it cannot allocate a
    contiguous piece of a buffer. Therefore the behavior may vary among XDR
    stream instances, it exists for the sake of efficiency.

    xdr_int(XDR *xdrs, int *ip)

    A filter primitive that translates between C integers and their external
    representations. This routine returns one if it succeeds, zero otherwise.

    xdr_long(XDR *xdrs, long *lp)

    A filter primitive that translates between C integers and their external
    representations. This routine returns one if it succeeds, zero otherwise.

    void
    xdrmem_create(XDR *xdrs, char *addr, u_int size, enum xdr_op op)

    This routine initializes the stream object pointed to by xdrs. The
    stream's data is written to, or read from, a chunk of memory at location
    addr whose length is no more than size bytes long. The op determines the
    direction of the XDR stream (either or

    xdr_opaque(XDR *xdrs, char *cp, u_int cnt)

    A filter primitive that translates between fixed size opaque data and its
    external representation. The parameter cp is the address of the opaque
    object, and cnt is its size in bytes. This routine returns one if it
    succeeds, zero otherwise.

    xdr_pointer(XDR *xdrs, char **objpp, u_int objsize, xdrproc_t xdrobj)

    Like _xx_dd_rr____rr_ee_ff_ee_rr_ee_nn_cc_ee(3) execpt that it serializes NULL pointers, whereas
    _xx_dd_rr____rr_ee_ff_ee_rr_ee_nn_cc_ee(3) does not. Thus, _xx_dd_rr____pp_oo_ii_nn_tt_ee_rr(3) can represent recursive
    data structures, such as binary trees or linked lists.

    void
    xdrrec_create(XDR *xdrs, u_int sendsize, u_int recvsize,
                 char *handle, int (*readit) (), int (*writeit) ())

    This routine initializes the XDR stream object pointed to by xdrs. The
    stream's data is written to a buffer of size sendsize, a value of zero
    indicates the system should use a suitable default. The stream's data is
    read from a buffer of size recvsize, it too can be set to a suitable
    default by passing a zero value. When a stream's output buffer is full,
    writeit is called. Similarly, when a stream's input buffer is empty,
    readit is called. The behavior of these two routines is similar to the
    system calls and except that handle is passed to the former routines as
    the first parameter. Note: the XDR stream's op field must be set by the
    caller. Warning: this XDR stream implements an intermediate record stream.
    Therefore there are additional bytes in the stream to provide record
    boundary information.

    xdrrec_endofrecord(XDR *xdrs, int sendnow)

    This routine can be invoked only on streams created by _xx_dd_rr_rr_ee_cc____cc_rr_ee_aa_tt_ee(3).
    The data in the output buffer is marked as a completed record, and the
    output buffer is optionally written out if sendnow is non-zero. This
    routine returns one if it succeeds, zero otherwise.

    xdrrec_eof(XDR *xdrs, int empty)

    This routine can be invoked only on streams created by _xx_dd_rr_rr_ee_cc____cc_rr_ee_aa_tt_ee(3).
    After consuming the rest of the current record in the stream, this routine
    returns one if the stream has no more input, zero otherwise.

    xdrrec_skiprecord(XDR *xdrs)

    This routine can be invoked only on streams created by _xx_dd_rr_rr_ee_cc____cc_rr_ee_aa_tt_ee(3).
    It tells the XDR implementation that the rest of the current record in the
    stream's input buffer should be discarded. This routine returns one if it
    succeeds, zero otherwise.

    xdr_reference(XDR *xdrs, char **pp, u_int size, xdrproc_t proc)

    A primitive that provides pointer chasing within structures. The parameter
    pp is the address of the pointer, size is the sizeof the structure that
    *pp points to, and proc is an XDR procedure that filters the structure
    between its C form and its external representation. This routine returns
    one if it succeeds, zero otherwise. Warning: this routine does not
    understand NULL pointers. Use _xx_dd_rr____pp_oo_ii_nn_tt_ee_rr(3) instead.

    xdr_setpos(XDR *xdrs, u_int pos)

    A macro that invokes the set position routine associated with the XDR
    stream xdrs. The parameter pos is a position value obtained from
    _xx_dd_rr____gg_ee_tt_pp_oo_ss(3). This routine returns one if the XDR stream could be
    repositioned, and zero otherwise. Warning: it is difficult to reposition
    some types of XDR streams, so this routine may fail with one type of
    stream and succeed with another.

    xdr_short(XDR *xdrs, short *sp)

    A filter primitive that translates between C integers and their external
    representations. This routine returns one if it succeeds, zero otherwise.

    void
    xdrstdio_create(XDR *xdrs, FILE *file, enum xdr_op op)

    This routine initializes the XDR stream object pointed to by xdrs. The XDR
    stream data is written to, or read from, the Standard stream file. The
    parameter op determines the direction of the XDR stream (either or
    Warning: the destroy routine associated with such XDR streams calls
    _ff_ff_ll_uu_ss_hh(3) on the file stream, but never _ff_cc_ll_oo_ss_ee(3).

    xdr_string(XDR *xdrs, char **sp, u_int maxsize,

    A filter primitive that translates between C strings and their
    corresponding external representations. Strings cannot be longer than
    maxsize. Note: sp is the address of the string's pointer. This routine
    returns one if it succeeds, zero otherwise.

    xdr_u_char(XDR *xdrs, unsigned char *ucp)

    A filter primitive that translates between C characters and their external
    representations. This routine returns one if it succeeds, zero otherwise.

    xdr_u_int(XDR *xdrs, unsigned *up)

    A filter primitive that translates between C integers and their external
    representations. This routine returns one if it succeeds, zero otherwise.

    xdr_u_long(XDR *xdrs, unsigned long *ulp)

    A filter primitive that translates between C integers and their external
    representations. This routine returns one if it succeeds, zero otherwise.

    xdr_u_short(XDR *xdrs, unsigned short *usp)

    A filter primitive that translates between C integers and their external
    representations. This routine returns one if it succeeds, zero otherwise.

    xdr_union(XDR *xdrs, int *dscmp, char *unp,
              struct xdr_discrim *choices,
              bool_t (*defaultarm) ())
    /*  defaultarm may equal NULL */

    A filter primitive that translates between a discriminated C and its
    corresponding external representation. It first translates the
    discriminant of the union located at dscmp. This discriminant is always an
    Next the union located at unp is translated. The parameter choices is a
    pointer to an array of _xx_dd_rr____dd_ii_ss_cc_rr_ii_mm(3) structures. Each structure contains
    an ordered pair of [value,proc]. If the union's discriminant is equal to
    the associated value, then the proc is called to translate the union. The
    end of the _xx_dd_rr____dd_ii_ss_cc_rr_ii_mm(3) structure array is denoted by a routine of value
    NULL. If the discriminant is not found in the choices array, then the
    defaultarm procedure is called (if it is not NULL). Returns one if it
    succeeds, zero otherwise.

    xdr_vector(XDR *xdrs, char *arrp, u_int size,
               u_int elsize, xdrproc_t elproc)

    A filter primitive that translates between fixed-length arrays and their
    corresponding external representations. The parameter arrp is the address
    of the pointer to the array, while size is is the element count of the
    array. The parameter elsize is the sizeof each of the array's elements,
    and elproc is an XDR filter that translates between the array elements' C
    form, and their external representation. This routine returns one if it
    succeeds, zero otherwise.

    xdr_void(void)

    This routine always returns one. It may be passed to RPC routines that
    require a function parameter, where nothing is to be done.

    xdr_wrapstring(XDR *xdrs, char **sp)

    A primitive that calls where MAXUN.UNSIGNED is the maximum value of an
    unsigned integer. _xx_dd_rr____ww_rr_aa_pp_ss_tt_rr_ii_nn_gg(3) is handy because the RPC package
    passes a maximum of two XDR routines as parameters, and _xx_dd_rr____ss_tt_rr_ii_nn_gg(3), one
    of the most frequently used primitives, requires three. Returns one if it
    succeeds, zero otherwise.

  SSEEEE

    _r_p_c(3)

    The following manuals: eXternal Data Representation Standard: Protocol
    Specification, eXternal Data Representation: Sun Technical Notes,

    XDR: External Data Representation Standard, RFC 1014, Sun Microsystems,
    Inc., USC-ISI.

  UUSSAAGGEE NNOOTTEESS

    None of these functions are thread safe.

    None of these functions are async-signal safe.

