inet_addr(3)                                               inet_addr(3)

  iinneett__aattoonn(())

  NNAAMMEE

    inet_aton(), inet_addr(), inet_network(), inet_ntoa(), inet_makeaddr(),
    inet_lnaof(), inet_netof() - Internet address manipulation routines

  SSYYNNOOPPSSIISS

    #include <sys/socket.h>
    #include <netinet/in.h>
    #include <arpa/inet.h>
	
	int inet_aton (char *cp, struct in_addr *pin)
    unsigned int in_addr_t (char *cp)
    unsigned int in_addr_t (char *cp)
    char * inet_ntoa (struct in_addr in)
    struct in_addr inet_makeaddr (int net, int lna)
    unsigned int inet_lnaof (struct in_addr in)
    unsigned int inet_netof (struct in_addr in)

  DDEESSCCRRIIPPTTIIOONN

    The routines _ii_nn_ee_tt____aa_tt_oo_nn(3), _ii_nn_ee_tt____aa_dd_dd_rr(3) and _ii_nn_ee_tt____nn_ee_tt_ww_oo_rr_kk(3) interpret
    character strings representing numbers expressed in the Internet standard
    . notation. The _ii_nn_ee_tt____aa_tt_oo_nn(3) routine interprets the specified character
    string as an Internet address, placing the address into the structure
    provided. It returns 1 if the string was successfully interpreted, or 0 if
    the string is invalid. The _ii_nn_ee_tt____aa_dd_dd_rr(3) and _ii_nn_ee_tt____nn_ee_tt_ww_oo_rr_kk(3) functions
    return numbers suitable for use as Internet addresses and Internet network
    numbers, respectively. The routine _ii_nn_ee_tt____nn_tt_oo_aa(3) takes an Internet address
    and returns an ASCII string representing the address in . notation. The
    routine _ii_nn_ee_tt____mm_aa_kk_ee_aa_dd_dd_rr(3) takes an Internet network number and a local
    network address and constructs an Internet address from it. The routines
    _ii_nn_ee_tt____nn_ee_tt_oo_ff(3) and _ii_nn_ee_tt____ll_nn_aa_oo_ff(3) break apart Internet host addresses,
    returning the network number and local network address part, respectively.

    All Internet addresses are returned in network order (bytes ordered from
    left to right). All network numbers and local address parts are returned
    as machine format integer values.

  IINNTTEERRNNEETT AADDDDRREESSSSEESS

    Values specified using the . notation take one of the following forms:

    a.b.c.d
    a.b.c
    a.b
    a

    When four parts are specified, each is interpreted as a byte of data and
    assigned, from left to right, to the four bytes of an Internet address.

    When a three part address is specified, the last part is interpreted as a
    16-bit quantity and placed in the right-most two bytes of the network
    address. This makes the three part address format convenient for
    specifying Class B network addresses as 128.net.host.

    When a two part address is supplied, the last part is interpreted as a 24-
    bit quantity and placed in the right most three bytes of the network
    address. This makes the two part address format convenient for specifying
    Class A network addresses as net.host.

    When only one part is given, the value is stored directly in the network
    address without any byte rearrangement.

    All numbers supplied as parts in a . notation can be decimal, octal, or
    hexadecimal, as specified in the C language. That is, a leading 0x or 0X
    implies hexadecimal; otherwise, a leading 0 implies octal; otherwise, the
    number is interpreted as decimal.

  RREETTUURRNN VVAALLUUEESS

    The constant INADDR_NONE is returned by _ii_nn_ee_tt____aa_dd_dd_rr(3) and _ii_nn_ee_tt____nn_ee_tt_ww_oo_rr_kk(3)
    for malformed requests.

  NNOOTTEESS

    The value INADDR_NONE (0xffffffff) is a valid broadcast address, but
    _ii_nn_ee_tt____aa_dd_dd_rr(3) cannot return that value without indicating failure. The
    newer _ii_nn_ee_tt____aa_tt_oo_nn(3) function does not share this problem. The problem of
    host byte ordering compared to network byte ordering is confusing. The
    string returned by _ii_nn_ee_tt____nn_tt_oo_aa(3) resides in a static memory area.

    Inet_addr should return a ssttrruucctt iinn__aaddddrr.

  SSEEEE AALLSSOO

    _g_e_t_h_o_s_t_b_y_n_a_m_e(2)

  UUSSAAGGEE NNOOTTEESS

    The following functions are thread safe: iinneett__aaddddrr,, iinneett__aattoonn,, iinneett__llnnaaooff,,
    iinneett__mmaakkeeaaddddrr,, iinneett__nneettooff,, iinneett__nneettwwoorrkk. The iinneett__nnttooaa function is not
    thread safe.

    None of these functions are async-signal safe.

