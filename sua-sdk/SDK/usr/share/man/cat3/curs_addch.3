curs_addch(3)                                             curs_addch(3)

  ccuurrss__aaddddcchh(())

  NNAAMMEE

    addch(), waddch(), mvaddch(), mvwaddch(), echochar(), wechochar() - add a
    character with attributes to a curses window then advance the cursor

  SSYYNNOOPPSSIISS

    #include <curses.h>

    int addch(const chtype ch);
    int waddch(WINDOW *win, const chtype ch);
    int mvaddch(int y, int x, const chtype ch);
    int mvwaddch(WINDOW *win, int y, int x, const chtype ch);
    int echochar(const chtype ch);
    int wechochar(WINDOW *win, const chtype ch);

  DDEESSCCRRIIPPTTIIOONN

    The _aa_dd_dd_cc_hh(3), _ww_aa_dd_dd_cc_hh(3), _mm_vv_aa_dd_dd_cc_hh(3) and _mm_vv_ww_aa_dd_dd_cc_hh(3) routines put the
    character ch into the given window at its current window position, which
    is then advanced. They are analogous to _pp_uu_tt_cc_hh_aa_rr(3) in the stdio package.

    If the advance is at the right margin, the cursor automatically wraps to
    the beginning of the next line. At the bottom of the current scrolling
    region, if ssccrroollllookk is enabled, the scrolling region is scrolled up one
    line.

    If ch is a tab, newline, or backspace, the cursor is moved appropriately
    within the window. Backspace moves the cursor one character left; at the
    left edge of a window it does nothing. Newline does a _cc_ll_rr_tt_oo_ee_oo_ll(3), then
    moves the cursor to the window left margin on the next line, scrolling the
    window if on the last line). Tabs are considered to be at every eighth
    column.

    If ch is any control character other than tab, newline, or backspace, it
    is drawn in ^X notation. Calling _ww_ii_nn_cc_hh(3) after adding a control character
    does not return the character itself, but instead returns the ^-
    representation of the control character. (To emit control characters
    literally, use _ee_cc_hh_oo_cc_hh_aa_rr(3).)

    Video attributes can be combined with a character argument passed to
    _aa_dd_dd_cc_hh(3) or related functions by logical-ORing them into the character.
    (Thus, text, including attributes, can be copied from one place to another
    using _ii_nn_cc_hh(3) and _aa_dd_dd_cc_hh(3).) See the _cc_uu_rr_ss____aa_tt_tt_rr(3) page for values of
    predefined video attribute constants that can be usefully ORed into
    characters.

    The _ee_cc_hh_oo_cc_hh_aa_rr(3) and _ww_ee_cc_hh_oo_cc_hh_aa_rr(3) routines are equivalent to a call to
    _aa_dd_dd_cc_hh(3) followed by a call to _rr_ee_ff_rr_ee_ss_hh(3), or a call to _ww_aa_dd_dd_cc_hh(3) followed
    by a call to _ww_rr_ee_ff_rr_ee_ss_hh(3). The knowledge that only a single character is
    being output is used and, for non-control characters, a considerable
    performance gain may be seen by using these routines instead of their
    equivalents.

  LLiinnee GGrraapphhiiccss

    The following variables may be used to add line drawing characters to the
    screen with routines of the addch family. The default character listed
    below is used if the ACSC capability doesn't define a terminal-specific
    replacement for it (but see the EXTENSIONS section below). The names are
    taken from VT100 nomenclature.

    NNaammee             DDeeffaauulltt     DDeessccrriippttiioonn

    ACS_ULCORNER     +           upper left-hand corner

    ACS_LLCORNER     +           lower left-hand corner

    ACS_URCORNER     +           upper right-hand corner

    ACS_LRCORNER     +           lower right-hand corner

    ACS_RTEE         +           right tee

    ACS_LTEE         +           left tee

    ACS_BTEE         +           bottom tee

    ACS_TTEE         +           top tee

    ACS_HLINE        -           horizontal line

    ACS_VLINE        |           vertical line

    ACS_PLUS         +           plus

    ACS_S1           -           scan line 1

    ACS_S9           _           scan line 9

    ACS_DIAMOND      +           diamond

    ACS_CKBOARD      :           checker board (stipple)

    ACS_DEGREE       '           degree symbol

    ACS_PLMINUS      #           plus/minus

    ACS_BULLET       o           bullet

    ACS_LARROW       <           arrow pointing left

    ACS_RARROW       >           arrow pointing right

    ACS_DARROW       v           arrow pointing down

    ACS_UARROW       ^           arrow pointing up

    ACS_BOARD        #           board of squares

    ACS_LANTERN      #           lantern symbol

    ACS_BLOCK        #           solid square block

    ACS_S3           -           scan line 3

    ACS_S7           -           scan line 7

    ACS_LEQUAL       <           less-than-or-equal-to

    ACS_GEQUAL       >           greater-than-or-equal-to

    ACS_PI           *           greek pi

    ACS_NEQUAL       !           not-equal

    ACS_STERLING     f           pound-sterling symbol

  RREETTUURRNN VVAALLUUEE

    All routines return the integer ERR upon failure and OK on success (the
    SVr4 manuals specify only "an integer value other than ERR") upon
    successful completion, unless otherwise noted in the preceding routine
    descriptions.

  NNOOTTEESS

    Note that _aa_dd_dd_cc_hh(3), _mm_vv_aa_dd_dd_cc_hh(3), _mm_vv_ww_aa_dd_dd_cc_hh(3), and _ee_cc_hh_oo_cc_hh_aa_rr(3) may be
    macros.

  EEXXTTEENNSSIIOONNSS

    The following extended _cc_uu_rr_ss_ee_ss(3) features are available only on PC-clone
    consoles and compatible terminals obeying the ANSI.SYS de-facto standard
    for terminal control sequences. They are not part of XSI curses.

    *     The attribute A_ALTCHARSET actually forces literal display of PC ROM
          characters including the high-half graphics. Your console driver may
          still capture or translate a few (such as ESC) but this feature
          should give you access to the card-suit characters, up and down-
          arrow, and most others in the range 0-32. (In a terminfo entry
          designed for use with _nn_cc_uu_rr_ss_ee_ss(3), the high-half characters are
          obtained using this attribute with an ACSC string in which the
          second of each pair is a high-half character.)
    *     Giving _ww_ee_cc_hh_oo_cc_hh_aa_rr(3) an argument with its high bit set will produce
          the corresponding high-half ASCII graphic (SVr4 curses also has this
          feature but does not document it). A control-character argument,
          however, will not typically produce the corresponding graphic;
          characters such as CR, NL, FF and TAB are typically interpreted by
          the console driver itself, and ESC will be interpreted as the leader
          of a control sequence.

  PPOORRTTAABBIILLIITTYY

    All these functions are described in the XSI Curses standard, Issue 4. The
    defaults specified for forms-drawing characters apply in the POSIX locale.

    The seven ACS symbols starting with ACS_S3 were not documented in any
    publicly released System V. However, many publicly available terminfos
    include ACSC strings in which their key characters (pryz{|}) are embedded,
    and a second-hand list of their character descriptions has come to light.
    The ACS-prefixed names for them were invented for nnccuurrsseess

  SSEEEE AALLSSOO

    _c_u_r_s_e_s(3)

    _c_u_r_s___a_t_t_r(3)

    _c_u_r_s___c_l_e_a_r(3)

    _c_u_r_s___i_n_c_h(3)

    _c_u_r_s___o_u_t_o_p_t_s(3)

    _c_u_r_s___r_e_f_r_e_s_h(3)

    _p_u_t_c(3)

