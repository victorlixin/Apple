t_rcvconnect(3)                                         t_rcvconnect(3)

  tt__rrccvvccoonnnneecctt(())

  NNAAMMEE

    t_rcvconnect - receive the confirmation from a connection request

  SSYYNNOOPPSSIISS

    #include <xti.h>

    int t_rcvconnect(
        int fd,
        struct t_call *call)

  DDEESSCCRRIIPPTTIIOONN

    This function enables a calling transport user to determine the status of
    a previously sent connection request and is used in conjunction with
    _tt____cc_oo_nn_nn_ee_cc_tt(3) to establish a connection in asynchronous mode, and to
    complete a synchronous _tt____cc_oo_nn_nn_ee_cc_tt(3) call that was interrupted by a signal.
    The connection will be established on successful completion of this
    function.

    PPaarraammeetteerrss     BBeeffoorree ccaallll      AAfftteerr ccaallll

    fd             x                /

    call->         addr.maxlen      x

    call->         addr.len         /

    call->         addr.buf         ?

    call->         opt.maxlen       x

    call->         opt.len          /

    call->         opt.buf          ?

    call->         udata.maxlen     x

    call->         udata.len        /

    call->         udata.buf        ?

    call->         sequence         =

    The argument fd identifies the local transport endpoint where
    communication will be established, and call contains information
    associated with the newly established connection. The argument call points
    to a t_call structure which contains the following members:

    struct netbuf addr;
    struct netbuf opt;
    struct netbuf udata;
    int sequence;

    In call, addr returns the protocol address associated with the responding
    transport endpoint, opt presents any options associated with the
    connection, udata points to optional user data that may be returned by the
    destination transport user during connection establishment, and sequence
    has no meaning for this function.

    The maxlen field of each argument must be set before issuing this function
    to indicate the maximum size of the buffer for each. However, maxlen can
    be set to zero, in which case no information to this specific argument is
    given to the user on the return from tt__rrccvvccoonnnneecctt(). If call is set to
    NULL, no information at all is returned. By default, tt__rrccvvccoonnnneecctt()
    executes in synchronous mode and waits for the connection to be
    established before returning. On return, the addr, opt and udata fields
    reflect values associated with the connection.

    If O_NONBLOCK is set (through _tt____oo_pp_ee_nn(3) or _ff_cc_nn_tt_ll(2)), tt__rrccvvccoonnnneecctt()
    executes in asynchronous mode, and reduces to a poll for existing
    connection confirmations. If none are available, tt__rrccvvccoonnnneecctt() fails and
    returns immediately without waiting for the connection to be established.
    (See [TNODATA] below.) In this case, tt__rrccvvccoonnnneecctt() must be called again
    to complete the connection establishment phase and retrieve the
    information returned in call.

  VVAALLIIDD SSTTAATTEESS

    T_OUTCON

  EERRRROORRSS

    On failure, t_errno is set to one of the following:

    [TBADF]
        The specified file descriptor does not refer to a transport endpoint.

    [TBUFOVFLW]
        The number of bytes allocated for an incoming argument (maxlen) is
        greater than 0 but not sufficient to store the value of that argument,
        and the connection information to be returned in call will be
        discarded. The provider's state, as seen by the user, will be changed
        to T_DATAXFER.

    [TLOOK]
        An asynchronous event has occurred on this transport connection and
        requires immediate attention.

    [TNODATA]
        O_NONBLOCK was set, but a connection confirmation has not yet arrived.

    [TNOTSUPPORT]
        This function is not supported by the underlying transport provider.

    [TOUTSTATE]
        The communications endpoint referenced by fd is not in one of the
        states in which a call to this function is valid.

    [TPROTO]
        This error indicates that a communication problem has been detected
        between XTI and the transport provider for which there is no other
        suitable XTI error (t_errno).

    [TSYSERR]
        A system error has occurred during execution of this function.

  RREETTUURRNN VVAALLUUEE

    Upon successful completion, a value of 0 is returned. Otherwise, a value
    of -1 is returned and t_errno is set to indicate an error.

  SSEEEE AALLSSOO

    _tt____aa_cc_cc_ee_pp_tt(3)

    _tt____aa_ll_ll_oo_cc(3)

    _tt____bb_ii_nn_dd(3)

    _tt____cc_oo_nn_nn_ee_cc_tt(3)

    _tt____ll_ii_ss_tt_ee_nn(3)

    _tt____oo_pp_ee_nn(3)

    _tt____oo_pp_tt_mm_gg_mm_tt(3)

  UUSSAAGGEE NNOOTTEESS

    The tt__rrccvvccoonnnneecctt function is not thread safe.

    The tt__rrccvvccoonnnneecctt function is not async-signal safe.

