t_connect(3)                                               t_connect(3)

  tt__ccoonnnneecctt(())

  NNAAMMEE

    t_connect - establish a connection with another transport user

  SSYYNNOOPPSSIISS

    #include <xti.h>

    int t_connect(
        int fd,
        const struct t_call *sndcall,
        struct t_call *rcvcall

  DDEESSCCRRIIPPTTIIOONN

    The tt__ccoonnnneecctt(3) function enables a transport user to request a connection
    to a specified destination transport user. This function can only be
    issued in the T_IDLE state.

    PPaarraammeetteerrss     BBeeffoorree ccaallll      AAfftteerr ccaallll

    fd             x                /

    sndcall->      addr.maxlen      =

    sndcall->      addr.len         x

    sndcall->      addr.buf         x (x)

    sndcall->      opt.maxlen       =

    sndcall->      opt.len          x

    sndcall->      opt.buf          x (x)

    sndcall->      udata.maxlen     =

    sndcall->      udata.len        x

    sndcall->      udata.buf        ? (?)

    sndcall->      sequence         =

    rcvcall->      addr.maxlen      x

    rcvcall->      addr.len         /

    rcvcall->      addr.buf         ?

    rcvcall->      opt.maxlen       x

    rcvcall->      opt.len          /

    rcvcall->      opt.buf          ?

    rcvcall->      udata.maxlen     x

    rcvcall->      udata.len        /

    rcvcall->      udata.buf        ?

    rcvcall->      sequence         =

    The fd parameter identifies the local transport endpoint where
    communication will be established; sndcall and rcvcall point to a t_call
    structure which contains the following members:

    struct netbuf addr;
    struct netbuf opt;
    struct netbuf udata;
    int sequence;

    The parameter sndcall specifies information needed by the transport
    provider to establish a connection and rcvcall specifies information that
    is associated with the newly established connection.

    In sndcall, addr specifies the protocol address of the destination
    transport user, opt presents any protocol-specific information that might
    be needed by the transport provider, udata points to optional user data
    that may be passed to the destination transport user during connection
    establishment, and sequence has no meaning for this function.

    On return, in rcvcall, addr contains the protocol address associated with
    the responding transport endpoint, opt represents any protocol-specific
    information associated with the connection, udata points to optional user
    data that may be returned by the destination transport user during
    connection establishment, and sequence has no meaning for this function.

    The opt argument permits users to define the options that may be passed to
    the transport provider. These options are specific to underlying protocol
    of the transport provider or XTI interface and are described in (for the
    XTI interface) and other protocol-specific appendices which are part of
    this specification. The user may choose not to negotiate protocol options
    by setting the len field of opt to zero. In this case, the provider uses
    the option values currently set for the communications endpoint.

    If used, sndcall->opt.buf must point to a buffer with the corresponding
    options, and sndcall->opt.len must specify its length. The maxlen and buf
    fields of the netbuf structure pointed by rcvcall->addr and rcvcall->opt
    must be set before the call.

    The udata argument enables the caller to pass user data to the destination
    transport user and receive user data from the destination user during
    connection establishment. However, the amount of user data must not exceed
    the limits supported by the transport provider as returned in the connect
    field of the info argument of _tt____oo_pp_ee_nn(3) or _tt____gg_ee_tt_ii_nn_ff_oo(3). If the len of
    udata is zero in sndcall, no data will be sent to the destination
    transport user.

    On return, the addr, opt and udata fields of rcvcall will be updated to
    reflect values associated with the connection. Thus, the maxlen field of
    each argument must be set before issuing this function to indicate the
    maximum size of the buffer for each. However, maxlen can be set to zero,
    in which case no information to this specific argument is given to the
    user on the return from tt__ccoonnnneecctt(3). If maxlen is greater than zero and
    less than the length of the value, tt__ccoonnnneecctt(3) fails with t_errno set to
    [TBUFOVFLW]. If rcvcall is set to NULL, no information at all is returned.

    By default, tt__ccoonnnneecctt(3) executes in synchronous mode, and will wait for
    the destination user's response before returning control to the local
    user. A successful return (that is, return value of zero) indicates that
    the requested connection has been established. However, if O_NONBLOCK is
    set (using _tt____oo_pp_ee_nn(3) or _ff_cc_nn_tt_ll(2)), tt__ccoonnnneecctt(3) executes in asynchronous
    mode. In this case, the call will not wait for the remote user's response,
    but will return control immediately to the local user and return -1 with
    t_errno set to [TNODATA] to indicate that the connection has not yet been
    established. In this way, the function simply initiates the connection
    establishment procedure by sending a connection request to the destination
    transport user. The _tt____rr_cc_vv_cc_oo_nn_nn_ee_cc_tt(3) function is used in conjunction with
    tt__ccoonnnneecctt(3) to determine the status of the requested connection.

    When a synchronous tt__ccoonnnneecctt(3) call is interrupted by the arrival of a
    signal, the state of the corresponding transport endpoint is T_OUTCON,
    allowing a further call to either _tt____rr_cc_vv_cc_oo_nn_nn_ee_cc_tt(3) , _tt____rr_cc_vv_dd_ii_ss(3) or
    _tt____ss_nn_dd_dd_ii_ss(3). When an asynchronous tt__ccoonnnneecctt(3) call is interrupted by the
    arrival of a signal, the state of the corresponding transport endpoint is
    T_IDLE.

  VVAALLIIDD SSTTAATTEESS

    T_IDLE

  EERRRROORRSS

    On failure, t_errno is set to one of the following values:

    [TACCES]
        The user does not have permission to use the specified address or
        options.

    [TADDRBUSY]
        This transport provider does not support multiple connections with the
        same local and remote addresses. This error indicates that a
        connection already exists.

    [TBADADDR]
        The specified protocol address was in an incorrect format or contained
        illegal information.

    [TBADDATA]
        The amount of user data specified was not within the bounds allowed by
        the transport provider.

    [TBADF]
        The specified file descriptor does not refer to a transport endpoint.

    [TBADOPT]
        The specified protocol options were in an incorrect format or
        contained illegal information.

    [TBUFOVFLW]
        The number of bytes allocated for an incoming argument (maxlen) is
        greater than 0 but not sufficient to store the value of that argument.
        If executed in synchronous mode, the provider's state, as seen by the
        user, changes to T_DATAXFER, and the information to be returned in
        rcvcall is discarded.

    [TLOOK]
        An asynchronous event has occurred on this transport endpoint and
        requires immediate attention.

    [TNODATA]
        O_NONBLOCK was set, so the function successfully initiated the
        connection establishment procedure, but did not wait for a response
        from the remote user.

    [TNOTSUPPORT]
        This function is not supported by the underlying transport provider.

    [TOUTSTATE]
        The communications endpoint referenced by fd is not in one of the
        states in which a call to this function is valid.

    [TPROTO]
        This error indicates that a communication problem has been detected
        between XTI and the transport provider for which there is no other
        suitable XTI error (t_errno).

    [TSYSERR]
        A system error has occurred during execution of this function.

  RREETTUURRNN VVAALLUUEE

    Upon successful completion, a value of 0 is returned. Otherwise, a value
    of -1 is returned and t_errno is set to indicate an error.

  SSEEEE AALLSSOO

    _tt____aa_cc_cc_ee_pp_tt(3)

    _tt____aa_ll_ll_oo_cc(3)

    _tt____gg_ee_tt_ii_nn_ff_oo(3)

    _tt____ll_ii_ss_tt_ee_nn(3)

    _tt____oo_pp_ee_nn(3)

    _tt____oo_pp_tt_mm_gg_mm_tt(3)

    _tt____rr_cc_vv_cc_oo_nn_nn_ee_cc_tt(3)

  UUSSAAGGEE NNOOTTEESS

    The tt__ccoonnnneecctt function is not thread safe.

    The tt__ccoonnnneecctt function is not async-signal safe.

