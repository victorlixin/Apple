XParseColor(3X11R6)                                 XParseColor(3X11R6)

  XXQQuueerryyCCoolloorr

  NNAAMMEE

    XQueryColor, XQueryColors, XLookupColor, XParseColor - obtain color values

  SSYYNNTTAAXX

    XQueryColor(display, colormap, def_in_out)
          Display *display;
          Colormap colormap;
          XColor *def_in_out;

    XQueryColors(display, colormap, defs_in_out, ncolors)
          Display *display;
          Colormap colormap;
          XColor defs_in_out[];
          int ncolors;

    Status XLookupColor(display, colormap, color_name, exact_def_return,
    screen_def_return)
          Display *display;
          Colormap colormap;
          char *color_name;
          XColor *exact_def_return, *screen_def_return;

    Status XParseColor(display, colormap, spec, exact_def_return)
            Display *display;
            Colormap colormap;
            char *spec;
            XColor *exact_def_return;

  AARRGGUUMMEENNTTSS

    colormap
        Specifies the colormap.

    color_name
        Specifies the color name string (for example, red) whose color
        definition structure you want returned.

    def_in_out
        Specifies and returns the RGB values for the pixel specified in the
        structure.

    defs_in_out
        Specifies and returns an array of color definition structures for the
        pixel specified in the structure.

    display
        Specifies the connection to the X server.

    exact_def_return
        Returns the exact RGB values.

    ncolors
        Specifies the number of XXCCoolloorr structures in the color definition
        array.

    screen_def_return
        Returns the closest RGB values provided by the hardware.

    spec
        Specifies the color name string; case is ignored.

    exact_def_return
        Returns the exact color value for later use and sets the DoRed,
        DoGreen, and DoBlue flags.

  DDEESSCCRRIIPPTTIIOONN

    The XXQQuueerryyCCoolloorr function returns the current RGB value for the pixel in
    the XXCCoolloorr structure and sets the DoRed, DoGreen, and DoBlue flags. The
    XXQQuueerryyCCoolloorrss function returns the RGB value for each pixel in each XXCCoolloorr
    structure and sets the DoRed, DoGreen, and DoBlue flags in each structure.

    XXQQuueerryyCCoolloorr and XXQQuueerryyCCoolloorrss can generate BadColor and BadValue errors.

    The XXLLooookkuuppCCoolloorr function looks up the string name of a color with respect
    to the screen associated with the specified colormap. It returns both the
    exact color values and the closest values provided by the screen with
    respect to the visual type of the specified colormap. If the color name is
    not in the Host Portable Character Encoding, the result is implementation-
    dependent. Use of uppercase or lowercase does not matter. XXLLooookkuuppCCoolloorr
    returns nonzero if the name is resolved; otherwise, it returns zero.

    The XXPPaarrsseeCCoolloorr function looks up the string name of a color with respect
    to the screen associated with the specified colormap. It returns the exact
    color value. If the color name is not in the Host Portable Character
    Encoding, the result is implementation-dependent. Use of uppercase or
    lowercase does not matter. XXPPaarrsseeCCoolloorr returns nonzero if the name is
    resolved; otherwise, it returns zero.

    XXLLooookkuuppCCoolloorr and XXPPaarrsseeCCoolloorr can generate BadColor error.

  CCOOLLOORR NNAAMMEESS

    An RGB Device specification is identified by the prefix "rgb:" and
    conforms to the following syntax:

    rgb:<red>/<green>/<blue>

        <red>, <green>, <blue> := h | hh | hhh | hhhh
        h := single hexadecimal digits (case insignificant)

    Note that h indicates the value scaled in 4 bits, hh the value scaled in 8
    bits, hhh the value scaled in 12 bits, and hhhh the value scaled in 16
    bits, respectively.

    For backward compatibility, an older syntax for RGB Device is supported,
    but its continued use is not encouraged. The syntax is an initial sharp
    sign character followed by a numeric specification, in one of the
    following formats:

    #RGB                (4 bits each)
    #RRGGBB             (8 bits each)
    #RRRGGGBBB          (12 bits each)
    #RRRRGGGGBBBB       (16 bits each)

    The R, G, and B represent single hexadecimal digits. When fewer than 16
    bits each are specified, they represent the most significant bits of the
    value (unlike the "rgb:" syntax, in which values are scaled). For example,
    the string "#3a7" is the same as "#3000a0007000".

    An RGB intensity specification is identified by the prefix "rgbi:" and
    conforms to the following syntax:

    rgbi:<red>/<green>/<blue>

    Note that red, green, and blue are floating-point values between 0.0 and
    1.0, inclusive. The input format for these values is an optional sign, a
    string of numbers possibly containing a decimal point, and an optional
    exponent field containing an E or e followed by a possibly signed integer
    string.

    The standard device-independent string specifications have the following
    syntax:

    CIEXYZ:<X>/<Y>/<Z>
    CIEuvY:<u>/<v>/<Y>
    CIExyY:<x>/<y>/<Y>
    CIELab:<L>/<a>/<b>
    CIELuv:<L>/<u>/<v>
    TekHVC:<H>/<V>/<C>

    All of the values (C, H, V, X, Y, Z, a, b, u, v, y, x) are floating-point
    values. The syntax for these values is an optional plus or minus sign, a
    string of digits possibly containing a decimal point, and an optional
    exponent field consisting of an "E" or "e" followed by an optional plus or
    minus followed by a string of digits.

  DDIIAAGGNNOOSSTTIICCSS

    BadColor
        A value for a Colormap argument does not name a defined Colormap.

    BadValue
        Some numeric value falls outside the range of values accepted by the
        request. Unless a specific range is specified for an argument, the
        full range defined by the argument's type is accepted. Any argument
        defined as a set of alternatives can generate this error.

  SSEEEE AALLSSOO

    _X_A_l_l_o_c_C_o_l_o_r(3X11R6)

    _X_C_r_e_a_t_e_C_o_l_o_r_m_a_p(3X11R6)

    _X_S_t_o_r_e_C_o_l_o_r_s(3X11R6)

    Xlib - C Language X Interface

