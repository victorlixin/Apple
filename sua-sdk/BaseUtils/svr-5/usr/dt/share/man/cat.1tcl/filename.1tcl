

filename(1tcl)                                     filename(1tcl)

IInnttrroodduuccttiioonn
       All  Tcl  commands and C procedures that take filenames as
       arguments expect the filenames  to  be  in  one  of  three
       forms,  depending  on the current platform.  On each plat-
       form, Tcl supports filenames in the standard forms(s)  for
       that  platform.   In  addition, on all platforms, Tcl sup-
       ports a -like syntax intended to provide a convenient  way
       of  constructing  simple filenames.  However, scripts that
       are intended to be portable should not assume a particular
       form  for  filenames.   Instead, portable scripts must use
       the file split and file join commands to manipulate  file-
       names (see the manual page for more details).

   PPaatthh ttyyppeess
       Filenames  are  grouped  into three general types based on
       the starting point for the path used to specify the  file:
       absolute,  relative,  and volume-relative.  Absolute names
       are completely qualified, giving a path to the file  rela-
       tive to a particular volume and the root directory on that
       volume.  Relative names are unqualified, giving a path  to
       the  file relative to the current working directory.  Vol-
       ume-relative names are partially qualified, either  giving
       the  path  relative  to  the root directory on the current
       volume, or relative to the current directory of the speci-
       fied  volume.   The  file  pathtype command can be used to
       determine the type of a given path.

   PPaatthh ssyynnttaaxx
       The rules for native names depend on the value reported in
       the Tcl array element tcl_platform(platform):

       mac

       On  Apple  Macintosh  systems,  Tcl  supports two forms of
       pathnames.  The normal Mac style names use colons as  path
       separators.   Paths may be relative or absolute, and file-
       names may contain any character other than colon.  A lead-
       ing  colon  causes  the rest of the path to be interpreted
       relative to the current directory.  If a path  contains  a
       colon  that  is  not  at  the  beginning, then the path is
       interpreted as an absolute path.  Sequences of two or more
       colons anywhere in the path are used to construct relative
       paths where :: refers to the parent of the current  direc-
       tory,  :::  refers  to  the  parent  of the parent, and so
       forth.

       In addition to Macintosh style names, Tcl also supports  a
       subset of -like names.  If a path contains no colons, then
       it is interpreted like a  path.  Slash is used as the path
       separator.   The  filename  . refers to the current direc-
       tory, and .. refers to the parent of  the  current  direc-
       tory.   However, some names like / or /.. have no mapping,
       and are interpreted as Macintosh names.  In general,  com-
       mands  that generate filenames will return Macintosh style

                                                                1

filename(1tcl)                                     filename(1tcl)

       names, but commands that accept filenames will  take  both
       Macintosh and -style names.

       The  following  examples illustrate various forms of path-
       names: Relative path to the current folder.  Relative path
       to  a  file  named MyFile in the current folder.  Absolute
       path to a file named MyFile on the  device  named  MyDisk.
       Relative  path  to  a  file named MyFile in a folder named
       MyDir in the current folder.   Relative  path  to  a  file
       named MyFile in the folder above the current folder.  Rel-
       ative path to a file named MyFile in the folder two levels
       above  the  current folder.  Absolute path to a file named
       MyFile on the device named MyDisk.   Relative  path  to  a
       file  named MyFile in the folder above the current folder.

       unix

       On  platforms, Tcl uses pathnames where the components are
       separated  by slashes.  Pathnames may be relative or abso-
       lute, and filenames may contain any character  other  than
       slash.   The  filenames  . and .. are special and refer to
       the current directory and the parent of the current direc-
       tory respectively.  Multiple adjacent slash characters are
       interpreted as a single separator.  The following examples
       illustrate  various  forms  of pathnames: Absolute path to
       the root directory.   Absolute  path  to  the  file  named
       passwd  in the directory etc in the root directory.  Rela-
       tive path to the current directory.  Relative path to  the
       file  foo  in the current directory.  Relative path to the
       file bar in the directory foo in  the  current  directory.
       Relative  path  to the file foo in the directory above the
       current directory.

       windows

       On Microsoft Windows platforms, Tcl supports  both  drive-
       relative and UNC style names.  Both / and \ may be used as
       directory separators in either type of name.   Drive-rela-
       tive names consist of an optional drive specifier followed
       by an absolute or relative path.   UNC  paths  follow  the
       general  form  \\servername\sharename\path\file.   In both
       forms, the filenames . and .. are special and refer to the
       current  directory and the parent of the current directory
       respectively.  The following examples  illustrate  various
       forms  of  pathnames:  Absolute  UNC path to a file called
       file in the root directory of the export  point  share  on
       the  host Host.  Volume-relative path to a file foo in the
       current directory on drive c.  Absolute path to a file foo
       in the root directory of drive c.  Relative path to a file
       bar in the foo directory in the current directory  on  the
       current volume.  Volume-relative path to a file foo in the
       root directory of the current volume.

                                                                2

filename(1tcl)                                     filename(1tcl)

   TTiillddee ssuubbssttiittuuttiioonn
       In addition to the filename  rules  described  above,  Tcl
       also supports csh-style tilde substitution.  If a filename
       starts with a tilde, then the filename will be interpreted
       as  if  the first element is replaced with the location of
       the home directory for the given user.  If  the  tilde  is
       followed  immediately by a separator, then the $HOME envi-
       ronment variable is substituted.  Otherwise the characters
       between  the  tilde  and the next separator are taken as a
       user name, which is  used  to  retrieve  the  user's  home
       directory for substitution.

       The  Macintosh  and Windows platforms do not support tilde
       substitution when a user name follows the tilde.  On these
       platforms, attempts to use a tilde followed by a user name
       will generate an error.  File  names  that  have  a  tilde
       without  a  user  name will be substituted using the $HOME
       environment variable, just like for .

   PPoorrttaabbiilliittyy iissssuueess
       Not all file systems are case sensitive, so scripts should
       avoid  code  that  depends  on the case of characters in a
       filename.  In addition, the character sets allowed on dif-
       ferent  devices may differ, so scripts should choose file-
       names  that  do  not  contain  special  characters   like:
       <>:"/\|.   The  safest approach is to use names consisting
       of alphanumeric characters only.  Also  Windows  3.1  only
       supports  file names with a root of no more than 8 charac-
       ters and an extension of no more than 3 characters.

                                                                3

