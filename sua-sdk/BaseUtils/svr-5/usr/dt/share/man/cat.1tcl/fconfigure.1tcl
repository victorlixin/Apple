

fconfigure(1tcl)                                 fconfigure(1tcl)

SSyynnooppssiiss
       fconfigure  channelId fconfigure channelId name fconfigure
       channelId name value  [name value ...]

DDeessccrriippttiioonn
       The fconfigure command  sets  and  retrieves  options  for
       channels.   channelId  identifies the channel for which to
       set or query an option.  If no name or value arguments are
       supplied,  the command returns a list containing alternat-
       ing option names and values for the channel.  If  name  is
       supplied but no value then the command returns the current
       value of the given option.  If one or more pairs  of  name
       and value are supplied, the command sets each of the named
       options to the  corresponding  value;  in  this  case  the
       return value is an empty string.

       The  options  described  below are supported for all chan-
       nels. In addition, each channel type may add options  that
       only it supports. See the manual page for the command that
       creates each type of channels for the  options  that  that
       specific  type  of  channel supports. For example, see the
       manual page for for its additional options.  The -blocking
       option  determines  whether  I/O operations on the channel
       can cause the process to block indefinitely.  The value of
       the  option  must be a proper boolean value.  Channels are
       normally in blocking mode;  if a channel  is  placed  into
       nonblocking mode it will affect the operation of the gets,
       read, puts, flush, and close commands; see the  documenta-
       tion for those commands for details.  For nonblocking mode
       to work correctly, the application must be using  the  Tcl
       event loop (e.g. by calling Tcl_DoOneEvent or invoking the
       vwait command).  If newValue is full then the  I/O  system
       will  buffer  output  until its internal buffer is full or
       until the flush command is invoked. If newValue  is  line,
       then  the  I/O  system will automatically flush output for
       the channel whenever a newline  character  is  output.  If
       newValue  is none, the I/O system will flush automatically
       after every output operation.  The default is for -buffer-
       ing  to be set to full except for channels that connect to
       terminal-like devices; for these channels the initial set-
       ting  is  line.   newSize must be an integer; its value is
       used to set the size of buffers,  in  bytes,  subsequently
       allocated  for this channel to store input or output. new-
       Size must be between ten and one million, allowing buffers
       of ten to one million bytes in size.  This option supports
       DOS file systems that use ctrl-z as an end of file marker.
       If  char  is not an empty string, then this character sig-
       nals end of file when it is encountered during input.  For
       output, the end of file character is output when the chan-
       nel is closed.  If char is the empty string, then there is
       no  special  end of file character marker.  For read-write
       channels, a two-element list specifies  the  end  of  file
       marker  for  input  and output, respectively.  As a conve-
       nience, when setting the end-of-file character for a read-

                                                                1

fconfigure(1tcl)                                 fconfigure(1tcl)

       write  channel  you  can  specify a single value that will
       apply to both reading and writing.  When querying the end-
       of-file  character  of a read-write channel, a two-element
       list will always  be  returned.   The  default  value  for
       -eofchar is the empty string in all cases except for files
       under Windows.  In that case  the  -eofchar  is  Control-z
       (\x1a)  for  reading and the empty string for writing.  In
       Tcl scripts the end of a line is always represented  using
       a single newline character (\n).  However, in actual files
       and devices the end of a line may be  represented  differ-
       ently  on  different  platforms,  or  even  for  different
       devices on the same platform.  For example, under newlines
       are   used   in  files,  whereas  carriage-return-linefeed
       sequences are normally used in  network  connections.   On
       input  (i.e., with gets and read) the Tcl I/O system auto-
       matically translates the external end-of-line  representa-
       tion  into  newline  characters.   Upon output (i.e., with
       puts), the I/O system translates newlines to the  external
       end-of-line representation.  The default translation mode,
       auto, handles all the common cases automatically, but  the
       -translation option provides explicit control over the end
       of line translations.

       The value associated with -translation is  a  single  item
       for  read-only  and  write-only  channels.  The value is a
       two-element list for read-write channels; the read  trans-
       lation  mode  is  the  first  element of the list, and the
       write translation mode is the second element.  As a conve-
       nience, when setting the translation mode for a read-write
       channel you can specify a single value that will apply  to
       both  reading  and writing.  When querying the translation
       mode of a read-write  channel,  a  two-element  list  will
       always  be  returned.   The following values are currently
       supported: As the input translation mode, auto treats  any
       of  newline (lf), carriage return (cr), or carriage return
       followed by a newline (crlf) as the end of line  represen-
       tation.   The  end  of line representation can even change
       from line-to-line, and all cases are translated to a  new-
       line.   As  the  output  translation  mode, auto chooses a
       platform specific representation; for sockets on all plat-
       forms  Tcl  chooses crlf, for all Unix flavors, it chooses
       lf, for the Macintosh platform it chooses cr and  for  the
       various  flavors  of Windows it chooses crlf.  The default
       setting for -translation is auto for both input  and  out-
       put.   No end-of-line translations are performed.  This is
       nearly identical to  lf  mode,  except  that  in  addition
       binary  mode  also  sets  the end of file character to the
       empty string, which disables it.  See the  description  of
       -eofchar  for  more information.  The end of a line in the
       underlying file or device is represented by a single  car-
       riage return character.  As the input translation mode, cr
       mode converts carriage returns to newline characters.   As
       the  output  translation  mode, cr mode translates newline
       characters to carriage returns.  This  mode  is  typically

                                                                2

fconfigure(1tcl)                                 fconfigure(1tcl)

       used  on  Macintosh  platforms.   The end of a line in the
       underlying file or device is  represented  by  a  carriage
       return character followed by a linefeed character.  As the
       input  translation  mode,  crlf  mode  converts  carriage-
       return-linefeed  sequences  to newline characters.  As the
       output translation  mode,  crlf  mode  translates  newline
       characters  to  carriage-return-linefeed  sequences.  This
       mode is typically used on Windows platforms and  for  net-
       work  connections.   The  end  of a line in the underlying
       file or device is represented by a single  newline  (line-
       feed)  character.  In this mode no translations occur dur-
       ing either input or output.  This mode is  typically  used
       on  platforms.

RReeffeerreenncceess

                                                                3

