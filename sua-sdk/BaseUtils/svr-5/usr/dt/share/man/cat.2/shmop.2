

shmop(2)                                                 shmop(2)

SSyynnooppssiiss
       #include   <sys/types.h>   #include  <sys/ipc.h>  #include
       <sys/shm.h>

       void *shmat(int shmid, const void *shmaddr, int shmflg);

       int shmdt(const void *shmaddr);

DDeessccrriippttiioonn
       shmat attaches the shared memory segment  associated  with
       the  shared  memory  identifier  specified by shmid to the
       data segment of  the  calling  process.   The  segment  is
       attached  at the address specified by one of the following
       criteria: If shmaddr is equal to (void *) 0,  the  segment
       is  attached at the first available address as selected by
       the system.  If shmaddr is not equal to  (void  *)  0  and
       (shmflg&SHM_RND)  is  true, the segment is attached at the
       address given by (shmaddr - (shmaddr modulus SHMLBA)).  If
       shmaddr is not equal to (void *) 0 and (shmflg&SHM_RND) is
       false, the segment is attached at  the  address  given  by
       shmaddr.

       shmdt detaches from the calling process's data segment the
       shared memory segment located at the address specified  by
       shmaddr.

       The segment is attached for reading if (shmflg&SHM_RDONLY)
       is true {READ}, otherwise it is attached for  reading  and
       writing {READ/WRITE}.

   RReettuurrnn vvaalluueess
       On  success:  shmat returns the data segment start address
       of the attached shared memory segment.  shmdt returns 0.

       On failure, shmat and shmdt return -1  and  set  errno  to
       identify the error.

   EErrrroorrss
       In  the  following  conditions, shmat fails and sets errno
       to: shmid is not a valid shared memory identifier.  Opera-
       tion  permission is denied to the calling process [see The
       available data space is not large  enough  to  accommodate
       the  shared memory segment.  shmaddr is not equal to zero,
       and the value of (shmaddr - (shmaddr modulus  SHMLBA))  is
       an  illegal  address.  shmaddr is not equal to zero, (shm-
       flg&SHM_RND) is false, and the  value  of  shmaddr  is  an
       illegal  address.   The  number  of shared memory segments
       attached to the calling process would exceed  the  system-
       imposed limit.

       In  the  following  conditions, shmdt fails and sets errno
       to: shmaddr is not the data segment  start  address  of  a
       shared memory segment.

                                                                1

shmop(2)                                                 shmop(2)

RReeffeerreenncceess
NNoottiicceess
       The  user  must  explicitly  remove shared memory segments
       after the last reference to them has been removed.

                                                                2

