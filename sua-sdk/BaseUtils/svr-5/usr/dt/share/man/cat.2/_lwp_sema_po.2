

_lwp_sema_post(2)                               _lwp_sema_post(2)

SSyynnooppssiiss
       #include <synch.h>

       int _lwp_sema_post(_lwp_sema_t *sema);

   PPaarraammeetteerrss
       pointer to the semaphore to increment

DDeessccrriippttiioonn
       _lwp_sema_post  releases  a  resource  under the semaphore
       pointed to by sema acquired by a previous call  to  either
       _lwp_sema_wait  or _lwp_sema_trywait, and if the new count
       value is less than or equal to zero, the next  lightweight
       process  (LWP)  waiting  at  the  semaphore  will  be made
       runnable.

       If more than one LWP is waiting, release from the  blocked
       group is scheduling policy specific.

   sseemmaa ppaarraammeetteerr
       sema  must  previously  have  been  initialized, either by
       _lwp_sema_init or statically (see _lwp_sema_init).

   RReettuurrnn vvaalluueess
       _lwp_sema_post returns zero on success and an error number
       for failure, as described below.

   EErrrroorrss
       If   any   of   the   following  conditions  is  detected,
       _lwp_sema_post fails and returns the corresponding  value:
       The  sema  parameter  points to an illegal address.  (This
       error may not be detected; a SIGSEGV signal may be  posted
       to the faulting LWP if an illegal address is used.)

RReeffeerreenncceess
NNoottiicceess
       Lightweight  processes  (LWPs) are internal interfaces and
       are subject to change.  Their use should be avoided.

                                                                1

