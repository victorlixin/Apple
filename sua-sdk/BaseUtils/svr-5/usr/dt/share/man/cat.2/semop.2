

semop(2)                                                 semop(2)

SSyynnooppssiiss
       #include   <sys/types.h>   #include  <sys/ipc.h>  #include
       <sys/sem.h>

       int semop(int semid, struct sembuf *sops, size_t nsops);

DDeessccrriippttiioonn
       semop is used to perform atomically an array of  semaphore
       operations  on  the  set of semaphores associated with the
       semaphore  identifier  specified  by  semid.   sops  is  a
       pointer  to  the  array of semaphore-operation structures.
       nsops is the number of such structures in the array.   The
       contents of each structure includes the following members:
       short     sem_num;  /*      semaphore      number       */
       short     sem_op;   /*      semaphore     operation     */
       short     sem_flg;  /* operation flags */

       Each semaphore operation specified by sem_op is  performed
       on  the  corresponding  semaphore  specified  by semid and
       sem_num.

       sem_op specifies one of three semaphore operations as fol-
       lows,  depending  on  whether its value is negative, posi-
       tive, or zero:

       If sem_op is a negative  integer,  one  of  the  following
       occurs: {ALTER} If semval [see is greater than or equal to
       the absolute value of sem_op, the absolute value of sem_op
       is subtracted from semval.  Also, if (sem_flg&SEM_UNDO) is
       true, the absolute value of sem_op is added to the calling
       process's  semadj  value [see for the specified semaphore.
       If semval is less than the absolute value  of  sem_op  and
       (sem_flg&IPC_NOWAIT)  is  true, semop returns immediately.
       If semval is less than the absolute value  of  sem_op  and
       (sem_flg&IPC_NOWAIT)  is  false, semop increments the sem-
       ncnt associated with the specified semaphore and  suspends
       execution  of the calling process until one of the follow-
       ing conditions occur.   semval  becomes  greater  than  or
       equal  to the absolute value of sem_op.  When this occurs,
       the  value  of  semncnt  associated  with  the   specified
       semaphore  is decremented, the absolute value of sem_op is
       subtracted from semval and, if (sem_flg&SEM_UNDO) is true,
       the  absolute value of sem_op is added to the calling pro-
       cess's semadj value  for  the  specified  semaphore.   The
       semid  for which the calling process is awaiting action is
       removed from the system [see When this  occurs,  errno  is
       set  equal  to  EIDRM, and a value of -1 is returned.  The
       calling process receives a signal that is  to  be  caught.
       When this occurs, the value of semncnt associated with the
       specified semaphore is decremented, and the  calling  pro-
       cess resumes execution in the manner prescribed in

       If  sem_op  is  a positive integer, the value of sem_op is
       added to semval and, if (sem_flg&SEM_UNDO)  is  true,  the

                                                                1

semop(2)                                                 semop(2)

       value  of  sem_op is subtracted from the calling process's
       semadj value for the specified semaphore.  {ALTER}

       If sem_op is zero, one of the following occurs: {READ}  If
       semval  is  zero, semop returns immediately.  If semval is
       not equal to zero and (sem_flg&IPC_NOWAIT) is true,  semop
       returns  immediately.   If semval is not equal to zero and
       (sem_flg&IPC_NOWAIT)  is  false,  semop   increments   the
       semzcnt  associated  with the specified semaphore and sus-
       pends execution of the calling process until  one  of  the
       following  occurs:  semval becomes zero, at which time the
       value of semzcnt associated with the  specified  semaphore
       is  decremented.   The semid for which the calling process
       is awaiting action is removed from the system.  When  this
       occurs,  errno is set equal to EIDRM, and a value of -1 is
       returned.  The calling process receives a signal  that  is
       to  be  caught.   When  this  occurs, the value of semzcnt
       associated with the specified  semaphore  is  decremented,
       and  the  calling  process resumes execution in the manner
       prescribed in

   RReettuurrnn vvaalluueess
       On success, semop returns 0, and the value of  sempid  for
       each  semaphore  specified in the array pointed to by sops
       is set equal to the process ID of the calling process.

       On failure, semop returns -1 and sets  errno  to  identify
       the error.

   EErrrroorrss
       In  the  following  conditions, semop fails and sets errno
       to: semop returned due to  receipt  of  a  signal.   semop
       returned  due  to  the  removal  of semid from the system.
       sem_num is less than zero or greater than or equal to  the
       number  of  semaphores  in  the set associated with semid.
       The signal SIGXFSZ is always generated by this error  con-
       dition.  nsops is greater than the system-imposed maximum.
       Operation permission is denied to the calling process [see
       The  operation  would  result in suspension of the calling
       process but (sem_flg&IPC_NOWAIT) is true.   The  limit  on
       the  number of individual processes requesting an SEM_UNDO
       would be exceeded.  semid is not a valid semaphore identi-
       fier.   The  number of individual semaphores for which the
       calling process  requests  a  SEM_UNDO  would  exceed  the
       limit.   An operation would cause a semval to overflow the
       system-imposed limit.  An operation would cause  a  semadj
       value  to  overflow the system-imposed limit.  sops points
       to an illegal address.

RReeffeerreenncceess
NNoottiicceess
   CCoonnssiiddeerraattiioonnss ffoorr tthhrreeaaddss pprrooggrraammmmiinngg
       While one thread is blocked, siblings might still be  exe-
       cuting.

                                                                2

semop(2)                                                 semop(2)

       The  Threads  Library provides two other semaphore facili-
       ties for the synchronization  of  multithreaded  programs.
       See and for details.  Both facilities can also be used for
       synchronization between processes.

                                                                3

