

link(2)                                                   link(2)

SSyynnooppssiiss
       #include <unistd.h>

       int link(const char *path1, const char *path2);

DDeessccrriippttiioonn
       link  creates  a  new  link  (directory entry) for a file.
       path1 points to a pathname naming an existing file.  path2
       points  to a pathname naming the new directory entry to be
       created.  link creates a new link for  the  existing  file
       and increments its link count by one.

       For security reasons, if the sticky bit (see is set on the
       directory in which the link is being created,  either  the
       directory or the object being linked from must be owned by
       the calling user ID.

RReettuurrnn vvaalluueess
       On success, link  returns  0  and  marks  for  update  the
       st_ctime  field  of  the  file.   Also,  the  st_ctime and
       st_mtime fields of the directory  that  contains  the  new
       entry are marked for update.  On failure, link returns -1,
       sets errno to identify the error, and no link is  created.

       In the following conditions, link fails and sets errno to:
       Search permission is denied on a component of one  of  the
       path  prefixes.   Write permission is denied on the direc-
       tory in which the link is to be created.  The file pointed
       to  by  path1 has discrete privileges and write permission
       is denied.  The link named by path2 exists.   path  points
       outside  the  allocated  address  space of the process.  A
       signal was caught during the link system call.   Too  many
       symbolic  links were encountered in translating path.  The
       maximum number of links to a file would be exceeded.  Com-
       ponents   of  path  require  hopping  to  multiple  remote
       machines and file system type  does  not  allow  it.   The
       length  of the path1 or path2 argument exceeds {PATH_MAX},
       or the length  of  a  path1  or  path2  component  exceeds
       {NAME_MAX}  while  _POSIX_NO_TRUNC is in effect.  A compo-
       nent of either path prefix is not a directory.   path1  or
       path2 is a null pathname.  A component of either path pre-
       fix does not exist.  The file  named  by  path1  does  not
       exist.   path  points  to a remote machine and the link to
       that machine is no  longer  active.   The  directory  that
       would contain the link cannot be extended.  The file named
       by path1 is a directory;  hard  links  may  not  refer  to
       directories.   The sticky bit (see is set on the directory
       in which the link  is  being  created,  and  neither  that
       directory  nor  the  object named in path1 is owned by the
       calling user ID.  The P_OWNER  privilege  is  required  to
       override  this  restriction.   The requested link requires
       writing in a directory on a read-only  file  system.   The
       link  named  by  path2  and the file named by path1 are on
       different logical devices (file systems).

                                                                1

link(2)                                                   link(2)

RReeffeerreenncceess

                                                                2

