

_lwp_sema_wait(2)                               _lwp_sema_wait(2)

SSyynnooppssiiss
       #include <synch.h>

       int _lwp_sema_wait(_lwp_sema_t *sema);

   PPaarraammeetteerrss
       pointer to the semaphore to acquire

DDeessccrriippttiioonn
       _lwp_sema_wait  attempts  to acquire the semaphore pointed
       to by sema by decrementing the semaphore  value.   If  the
       resulting  value  is  greater  than  or  equal to zero, it
       returns to the caller  having  successfully  acquired  the
       lock.   If  the  semaphore  count is zero or negative upon
       entry, _lwp_sema_wait suspends execution  of  the  calling
       lightweight process (LWP) and places it on a queue associ-
       ated with that semaphore where it remains until  the  lock
       becomes   available   to   the   caller,  at  which  point
       _lwp_sema_wait returns with the lock held.

       If an LWP waiting on a semaphore is interrupted by a  sig-
       nal,  the  signal  handler will run, but _lwp_sema_wait is
       always restarted so the semaphore is acquired on return.

   sseemmaa ppaarraammeetteerr
       sema must previously  have  been  initialized,  either  by
       _lwp_sema_init or statically (see _lwp_sema_init).

   RReettuurrnn vvaalluueess
       _lwp_sema_wait  returns zero for success and an error num-
       ber for failure, as described below.

   EErrrroorrss
       If  any  of  the   following   conditions   is   detected,
       _lwp_sema_wait  fails and returns the corresponding value:
       The sema parameter points to an  illegal  address.   (This
       error  may not be detected; a SIGSEGV signal may be posted
       to the faulting LWP if an illegal address  is  used.)   If
       any  of  the  following  conditions occurs, _lwp_sema_wait
       fails and returns the corresponding value:  The  operation
       was interrupted by a signal or a fork operation.

UUssaaggee
       In  general,  this  operation is used to block wait for an
       event, when a critical section is long.

RReeffeerreenncceess
NNoottiicceess
       Lightweight processes (LWPs) are internal  interfaces  and
       are subject to change.  Their use should be avoided.

                                                                1

