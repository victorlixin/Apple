

plock(2)                                                 plock(2)

SSyynnooppssiiss
       #include <sys/lock.h>

       int plock(int op);

DDeessccrriippttiioonn
       plock  allows  the  calling process to lock into memory or
       unlock its text segment  (text  lock),  its  data  segment
       (data  lock),  or both its text and data segments (process
       lock).  Locked segments are immune to  all  routine  swap-
       ping.   plock  also  allows these segments to be unlocked.
       The effective user id of the calling process must have the
       P_PLOCK privilege to use this call.

       plock performs the function specified by op: Lock text and
       data segments into memory (process lock).  Lock text  seg-
       ment into memory (text lock).  Lock data segment into mem-
       ory (data lock).  Remove locks.

   RReettuurrnn vvaalluueess
       On success, plock returns 0.  On failure, plock returns -1
       and sets errno to identify the error.

   EErrrroorrss
       In  the  following  conditions, plock fails and sets errno
       to: The effective user id of the calling process does  not
       have  the P_PLOCK privilege.  The segment to be locked has
       been aborted (e.g. by a file truncate operation), or pages
       following  the end of an object are not allocated.  An I/O
       error occurred when attempting to read  the  page  from  a
       device  or  a network.  op is equal to PROCLOCK and a pro-
       cess lock, a text lock, or a data lock already  exists  on
       the  calling  process.   op is equal to TXTLOCK and a text
       lock, or a process lock already exists on the calling pro-
       cess.   op  is equal to DATLOCK and a data lock, or a pro-
       cess lock already exists on the calling  process.   op  is
       equal to UNLOCK and no lock exists on the calling process.
       Not enough memory, or there is insufficient resources.

RReeffeerreenncceess
NNoottiicceess
       memcntl is the preferred interface to memory locking.

   CCoonnssiiddeerraattiioonnss ffoorr tthhrreeaaddss pprrooggrraammmmiinngg
       Sibling threads share (by  definition)  the  same  address
       space;  modifications  to  the address space by one can be
       perceived by the others.

                                                                1

