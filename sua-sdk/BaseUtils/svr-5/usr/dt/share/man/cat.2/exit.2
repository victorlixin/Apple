

exit(2)                                                   exit(2)

SSyynnooppssiiss
       #include <stdlib.h>

       void exit(int status);

       #include <unistd.h>

       void _exit(int status);

       #include <unistd.h>

       void _Exit(int status);

DDeessccrriippttiioonn
       _exit  and  _Exit  terminate  the calling process with the
       following  consequences:  All  of  the  file  descriptors,
       directory  streams  and message catalogue descriptors open
       in the calling process are closed.  A  SIGCHLD  signal  is
       sent to the calling process's parent process.  If the par-
       ent process of the calling process has not  specified  the
       SA_NOCLDWAIT  flag [see the calling process is transformed
       into a ``zombie process.''  A zombie process is a  process
       that  only  occupies an entry in the process list.  It has
       no other space allocated either in user or  kernel  space.
       The process table slot that it occupies is partially over-
       laid with time accounting information  [see  <sys/proc.h>]
       to  be  used by the times system call.  The parent process
       ID of all of the calling  process's  existing  child  pro-
       cesses  and  zombie processes is set to 1.  This means the
       initialization process [see inherits each  of  these  pro-
       cesses.   Each  attached shared memory segment is detached
       and the value of shm_nattach in the data structure associ-
       ated  with  its shared memory identifier is decremented by
       1.  For each semaphore for which the calling  process  has
       set  a semadj value [see that semadj value is added to the
       semval of the specified semaphore.  If the process  has  a
       process,  text,  or data lock, an unlock is performed [see
       An accounting record is written on the accounting file  if
       the  system's  accounting  routine  is enabled [see If the
       process is a controlling process, SIGHUP is  sent  to  the
       foreground  process  group of its controlling terminal and
       its controlling terminal is deallocated.  If  the  calling
       process  has any stopped children whose process group will
       be orphaned when the calling  process  exits,  or  if  the
       calling  process  is a member of a process group that will
       be orphaned when the calling process exits,  that  process
       group will be sent SIGHUP and SIGCONT signals.

       The C function exit calls any functions registered through
       the atexit function in the reverse order of  their  regis-
       tration.   The  _exit  and  _Exit functions circumvent all
       such functions and cleanup. (Note also that if  a  process
       receives  a signal that has an action of Exit or Core, the
       functions registered with atexit are not called.  See

                                                                1

exit(2)                                                   exit(2)

       The symbols EXIT_SUCCESS and EXIT_FAILURE are  defined  in
       stdlib.h  and  may be used as the value of status to indi-
       cate successful or unsuccessful termination, respectively.
       The  low-order  8 bits of status is available through (and
       similar functions).

RReeffeerreenncceess
NNoottiicceess
   CCoonnssiiddeerraattiioonnss ffoorr tthhrreeaaddss pprrooggrraammmmiinngg
       The _exit and _Exit system calls terminate the  containing
       process. This implies the termination of all threads.

   CCoonnssiiddeerraattiioonnss ffoorr lliigghhttwweeiigghhtt pprroocceesssseess
       The  termination  of the process also implies the termina-
       tion of all LWPs contained by that process.

                                                                2

