

utime(2)                                                 utime(2)

SSyynnooppssiiss
       #include <sys/types.h> #include <utime.h>

       int utime(const char *path, const struct utimbuf *times);

DDeessccrriippttiioonn
       utime  sets  the access and modification times of the file
       named by path.  path points to a path name naming a  file.

       If times is NULL, the access and modification times of the
       file are set to the current time.  The effective  user  ID
       of the calling process must be the owner ID of the file or
       must have write permission on the  file,  or  the  calling
       process  must  have the P_OWNER privilege, to set the file
       times this way.

       If times is not NULL, times is interpreted as a pointer to
       a  utimbuf  structure  (defined in utime.h) and the access
       and modification times are set to the values contained  in
       the  designated  structure.   The effective user ID of the
       calling process must be the owner ID of the  file  or  the
       calling process must have the P_OWNER privilege to set the
       file times this way.

       The times in the following structure are measured in  sec-
       onds     since     00:00:00    UTC,    Jan.    1,    1970:
            time_t    actime;   /*      access      time       */
            time_t    modtime;  /* modification time */

       utime  also causes the time of the last file status change
       (st_ctime) to be updated.

RReettuurrnn vvaalluueess
       On success, utime returns 0.  On failure, utime returns -1
       and sets errno to identify the error.

       In  the  following  conditions, utime fails and sets errno
       to: Search permission is denied by a component of the path
       prefix.   Write  permission  on  the file named by path is
       denied.  The effective user ID is not  the  owner  of  the
       file, times is NULL, and write access is denied.  times is
       not  NULL  and  points  outside  the  process's  allocated
       address  space.   path  points outside the process's allo-
       cated address space.  A signal was caught during the utime
       system  call.  Too many symbolic links were encountered in
       translating path.  Components of path require  hopping  to
       multiple  remote  machines  and  the  file system does not
       allow  it.   The  length  of  the  path  argument  exceeds
       {PATH_MAX},  or  the  length  of  a path component exceeds
       {NAME_MAX} while _POSIX_NO_TRUNC is in effect.  The  named
       file does not exist or is a null pathname.  path points to
       a remote machine and the link to that machine is no longer
       active.   A  component  of the path prefix is not a direc-
       tory.  times is not NULL, the effective  user  ID  of  the

                                                                1

utime(2)                                                 utime(2)

       calling  process  is  not  the  owner of the file, and the
       calling process  does  not  have  the  P_OWNER  privilege.
       times  is  NULL, the effective user ID of the calling pro-
       cess is not the owner of the file, write permission on the
       file named by path is denied, and the calling process does
       not have the P_OWNER privilege.  The file system  contain-
       ing the file is mounted read-only.

RReeffeerreenncceess

                                                                2

