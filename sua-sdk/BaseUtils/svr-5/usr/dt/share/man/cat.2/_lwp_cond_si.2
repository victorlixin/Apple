

_lwp_cond_signal(2)                           _lwp_cond_signal(2)

SSyynnooppssiiss
       #include <synch.h>

       int _lwp_cond_signal(lwp_cond_t *cond);

   PPaarraammeetteerrss
       pointer to condition variable to be signaled

DDeessccrriippttiioonn
       _lwp_cond_signal  wakes  up  a  single lightweight process
       (LWP), if one exists, waiting on the condition cond.

       If more than one  LWP  is  waiting  on  a  condition,  the
       scheduling policy determines which LWP is awakened.

       _lwp_cond_signal  has no effect if there are no LWPs wait-
       ing on the indicated condition.

   ccoonndd ppaarraammeetteerr
       The condition variable denoted  by  cond  must  previously
       have been statically initialized (zero-filled).

   RReettuurrnn vvaalluueess
       _lwp_cond_signal  returns  zero  for  success and an error
       number for failure, as described below.

   EErrrroorrss
       If  any  of  the   following   conditions   is   detected,
       _lwp_cond_signal  returns the corresponding value: Invalid
       argument specified.  The cond parameter points to an ille-
       gal  address.   (This error may not be detected; a SIGSEGV
       signal may be posted to the faulting  LWP  if  an  illegal
       address is used.)

UUssaaggee
       See  the  description  of  how  to use condition variables
       under USAGE on

RReeffeerreenncceess
NNoottiicceess
       Lightweight processes (LWPs) are internal  interfaces  and
       are subject to change.  Their use should be avoided.

                                                                1

