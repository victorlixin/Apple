

alarm(2)                                                 alarm(2)

SSyynnooppssiiss
       #include <unistd.h>

       unsigned alarm(unsigned sec);

DDeessccrriippttiioonn
       alarm instructs the alarm clock of the process to send the
       signal SIGALRM to the process after  the  number  of  real
       time seconds specified by sec have elapsed [see

       Alarm requests are not stacked; successive calls reset the
       alarm clock of the calling process.

       If sec is 0, any previously made  alarm  request  is  can-
       celed.

       A newly created process has no pending alarm; they are not
       inherited.  Any pending alarm is preserved across calls to
       any of the exec family of routines.

   RReettuurrnn vvaalluueess
       alarm  returns  the amount of time previously remaining in
       the alarm clock of the calling process.

RReeffeerreenncceess
NNoottiicceess
   CCoonnssiiddeerraattiioonnss ffoorr tthhrreeaaddss pprrooggrraammmmiinngg
       In multithreaded applications, the alarm signal is  deliv-
       ered to only the requesting thread, no other.

       A  thread cannot respond to a signal until it is scheduled
       for execution.  For multiplexed threads, there  may  be  a
       time lag between delivery of the signal and the time it is
       scheduled to run.  For improved response,  consider  using
       bound threads.

   CCoonnssiiddeerraattiioonnss ffoorr lliigghhttwweeiigghhtt pprroocceesssseess
       Internally,  alarms  are  maintained per LWP.  The Threads
       Library arranges for the signal to  be  delivered  to  the
       requesting  thread,  even if the thread has been picked up
       by another LWP between the time of request and the time of
       response.

       Only the pending alarm (if any) of the calling LWP is pre-
       served across the system call.

                                                                1

