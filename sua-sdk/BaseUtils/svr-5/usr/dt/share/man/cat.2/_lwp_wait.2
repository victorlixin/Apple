

_lwp_wait(2)                                         _lwp_wait(2)

SSyynnooppssiiss
       #include <sys/types.h> #include <sys/lwp.h>

       int _lwp_wait(lwpid_t wait_for, lwpid_t *departed_lwp);

   PPaarraammeetteerrss
       LWP  ID  of the sibling LWP to wait for pointer to the LWP
       ID of the terminated sibling LWP

DDeessccrriippttiioonn
       _lwp_wait waits for termination of a  sibling  lightweight
       process   (LWP).    and,  if  the  value  of  the  pointer
       departed_lwp is  non-NULL,  _lwp_wait  sets  the  location
       pointed to by departed_lwp to the identifier of the termi-
       nated sibling LWP.

       Only LWPs created without the  LWP_DETACHED  flag  can  be
       _lwp_waited for.

   wwaaiitt__ffoorr ppaarraammeetteerr
        wait_for  is the LWP ID of a sibling LWP.  If wait_for is
       equal to the identifier of a  currently  existing  sibling
       LWP, the function waits until that LWP terminates.

       If  wait_for is equal to (lwpid_t)0, _lwp_wait will return
       when any sibling LWP exits and this LWP was successful  in
       waiting for it.

       If  wait_for  has  already  terminated,  _lwp_wait returns
       immediately.

       If wait_for has already been _lwp_waited for, or otherwise
       is not known by the implementation, an error indication is
       returned.

   ddeeppaarrtteedd__llwwpp ppaarraammeetteerr
       If the value of the pointer departed_lwp is non-NULL,  the
       location  pointed to by departed_lwp is set to the identi-
       fier of the terminated sibling LWP.

       At most one LWP can successfully return from an  _lwp_wait
       due  to  the termination of a given departed_lwp.  If more
       than one LWP is waiting for a specific  departed_lwp,  one
       is successful and the others return ESRCH.

   RReettuurrnn vvaalluueess
       _lwp_wait returns zero on success, and if the value of the
       pointer departed_lwp is non-NULL sets the location pointed
       to  by  departed_lwp  to  the identifier of the terminated
       sibling LWP.  On failure, _lwp_wait returns an error  num-
       ber, as described below.

   EErrrroorrss
       If  any of the following conditions is detected, _lwp_wait

                                                                1

_lwp_wait(2)                                         _lwp_wait(2)

       returns the corresponding value: The _lwp_wait was  inter-
       rupted by a signal.

       If  any  of  the  following  conditions  occur,  _lwp_wait
       returns the appropriate value: No LWP can be found in  the
       current process with identity wait_for, or there is an LWP
       with  identity  wait_for  but  it  was  created  with  the
       LWP_DETACHED  flag  set.  The calling LWP is attempting to
       _lwp_wait for itself.  The calling LWP is waiting for  any
       LWP and there is only one LWP in the process.

RReeffeerreenncceess
NNoottiicceess
       Lightweight  processes  (LWPs) are internal interfaces and
       are subject to change.  Their use should be avoided.

                                                                2

