

lseek(2)                                                 lseek(2)

SSyynnooppssiiss
       #include <sys/types.h> #include <unistd.h>

       off_t lseek(int fildes, off_t offset, int whence);

       off64_t lseek64(int fildes, off64_t offset, int whence);

DDeessccrriippttiioonn
       lseek  moves  a read/write file pointer.  fildes is a file
       descriptor returned from a or system call.  lseek sets the
       file  pointer associated with fildes as follows: If whence
       is SEEK_SET, the pointer  is  set  to  offset  bytes.   If
       whence  is  SEEK_CUR,  the  pointer  is set to its current
       location plus offset.  If whence is SEEK_END, the  pointer
       is set to the size of the file plus offset.

       On  success, lseek returns the resulting pointer location,
       as measured in bytes from the beginning of the file.

       lseek allows the file pointer to be set beyond the  exist-
       ing  data  in  the file.  If data is later written at this
       point, subsequent reads in the gap  between  the  previous
       end  of  data  and  the newly written data return bytes of
       value 0 until data is written into the gap.

   RReettuurrnn vvaalluueess
       On success, lseek and lseek64 return a non-negative  inte-
       ger  indicating the file pointer value.  On failure, lseek
       and lseek64 return -1, set errno to  identify  the  error,
       and the file pointer remains unchanged.

       Some  devices  are incapable of seeking.  The value of the
       file pointer associated with such a device is undefined.

   EErrrroorrss
       In the following conditions, lseek fails  and  sets  errno
       to:  The resulting file offset would be a value which can-
       not be represented correctly in an object of  type  off_t.
       The file pointer is not moved.

       In  the  following  conditions, lseek and lseek64 fail and
       set errno to: fildes  is  not  an  open  file  descriptor.
       fildes  is  associated  with  a pipe, fifo or socket.  The
       resulting file pointer would be negative.

       fildes is a remote file descriptor accessed using NFS, the
       Network  File System, and the resulting file pointer would
       be negative.  The device for fstype does not support lseek
       or lseek64.

RReeffeerreenncceess
NNoottiicceess
   CCoonnssiiddeerraattiioonnss ffoorr tthhrreeaaddss pprrooggrraammmmiinngg
       Open file descriptors are a process resource and available

                                                                1

lseek(2)                                                 lseek(2)

       to any sibling thread; if used  concurrently,  actions  by
       one  thread  can  interfere  with those of a sibling.  For
       example, the position of the file  pointer  is  maintained
       per file descriptor, not per thread.

       The and system calls combine positioning and I/O in a sin-
       gle operation.

   CCoonnssiiddeerraattiioonnss ffoorr LLaarrggee FFiillee SSuuppppoorrtt
       lseek64 supports large files, but is  otherwise  identical
       to lseek.  For details on programming for large file capa-
       ble applications, see on intro(2).

                                                                2

