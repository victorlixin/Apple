

mkdir(2)                                                 mkdir(2)

SSyynnooppssiiss
       #include <sys/types.h> #include <sys/stat.h>

       int mkdir(const char *path, mode_t mode);

DDeessccrriippttiioonn
       mkdir  creates  a  new  directory  named  by  the pathname
       pointed to by path.  The mode of the new directory is ini-
       tialized from mode (see for the values of mode).

       The  protection  part  of the mode argument is modified by
       the process's file create mask.  (See

       The directory's owner ID is set to the process's effective
       user ID.  The directory's group ID is set to the process's
       effective group ID, or if the S_ISGID bit is  set  in  the
       parent  directory,  then  the group ID of the directory is
       inherited from the parent.  The S_ISGID  bit  of  the  new
       directory is inherited from the parent directory.

       If path is a symbolic link, it is not followed.

       The newly created directory is empty with the exception of
       entries for itself (.)  and its parent directory (..).

RReettuurrnn vvaalluueess
       On success, mkdir returns  0  and  marks  for  update  the
       st_atime,  st_ctime  and st_mtime fields of the directory.
       Also, the st_ctime and st_mtime fields  of  the  directory
       that contains the new entry are marked for update.

       On  failure,  mkdir  returns -1 and sets errno to identify
       the error.

       In the following conditions, mkdir fails  and  sets  errno
       to: Search permission is denied on a component of the path
       prefix.  Write permission is denied on the  parent  direc-
       tory  in  which the directory is to be created.  The named
       file already exists.  path points  outside  the  allocated
       address  space  of the process.  An I/O error has occurred
       while accessing the file system.  Too many symbolic  links
       were  encountered in translating path.  The maximum number
       of links to the parent directory would be exceeded.   Com-
       ponents   of  path  require  hopping  to  multiple  remote
       machines and the file system type does not allow it.   The
       length  of  the  path  argument exceeds {PATH_MAX}, or the
       length  of  a  path  component  exceeds  {NAME_MAX}  while
       _POSIX_NO_TRUNC  is  in  effect.   A component of the path
       prefix does not exist or is a null pathname.  path  points
       to  a  remote  machine  and the link to that machine is no
       longer active.  No free space is available on  the  device
       containing  the directory.  A component of the path prefix
       is not a directory.  The path prefix resides  on  a  read-
       only file system.

                                                                1

mkdir(2)                                                 mkdir(2)

RReeffeerreenncceess

                                                                2

