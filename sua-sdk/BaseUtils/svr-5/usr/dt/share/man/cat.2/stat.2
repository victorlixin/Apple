

stat(2)                                                   stat(2)

SSyynnooppssiiss
       #include <sys/types.h> #include <sys/stat.h>

       int stat(const char *path, struct stat *buf);

       int stat64(const char *path, struct stat64 *buf);

       int lstat(const char *path, struct stat *buf);

       int lstat64(const char *path, struct stat64 *buf);

       int fstat(int fildes, struct stat *buf);

       int fstat64(int fildes, struct stat64 *buf);

DDeessccrriippttiioonn
       The  stat system calls get information about a file.  path
       points to a pathname naming a file.  Read, write, or  exe-
       cute permission of the named file is not required, but all
       directories listed in the pathname  leading  to  the  file
       must be searchable.

       If  the  Enhanced  Security Utilities are installed and an
       Access Control List (ACL) exists for the file,  the  value
       of  the file mode may not reflect the entire set of access
       permissions for the file [see acl].

       lstat obtains file attributes similar to stat, except when
       the  named  file  is  a  symbolic link; in that case lstat
       returns information about the  link,  while  stat  returns
       information about the file the link references.

       fstat  obtains information about an open file known by the
       file descriptor fildes, obtained from a successful  creat,
       open, dup, fcntl, pipe, or ioctl system call.

       buf  is  a pointer to a stat structure into which informa-
       tion is placed concerning the file.

       For details on the stat  and stat64 structures see

RReettuurrnn vvaalluueess
       On success,  stat,  lstat,  fstat,  stat64,  lstat64,  and
       fstat64  return  0.   On  failure,  they return -1 and set
       errno to identify the error.

       In the following conditions, stat, lstat  and  fstat  fail
       and set errno to: A component is too large to store in the
       structure pointed to by buf.  The  file  size,  in  bytes,
       cannot  be  represented correctly in the structure pointed
       to by buf.

       In the following  conditions,  stat,  stat64,  lstat,  and
       lstat64 fail and set errno to: Search permission is denied

                                                                1

stat(2)                                                   stat(2)

       for a component of the path prefix.   Read  permission  is
       denied  on  the  named  file.   buf  or  path points to an
       invalid address.  A signal was  caught  during  the  stat,
       stat64,  lstat, or lstat64 system call.  Too many symbolic
       links were encountered in translating path.  Components of
       path  require  hopping to multiple remote machines and the
       file system does not allow it.  The  length  of  the  path
       argument  exceeds {PATH_MAX}, or the length of a path com-
       ponent exceeds  {NAME_MAX}  while  _POSIX_NO_TRUNC  is  in
       effect.   The  named  file  does  not exist or is the null
       pathname.  A component of the path prefix is not a  direc-
       tory.   path  points  to  a remote machine and the link to
       that machine is no longer active.

       In the following conditions, fstat and fstat64,  fail  and
       set  errno to: fildes is not a valid open file descriptor.
       buf points to an invalid address.   A  signal  was  caught
       during the fstat or fstat64 system call.  fildes points to
       a remote machine and the link to that machine is no longer
       active.

RReeffeerreenncceess
NNoottiicceess
   CCoonnssiiddeerraattiioonnss ffoorr llaarrggee ffiillee ssuuppppoorrtt
       stat64, lstat64, and fstat64 support large files, but oth-
       erwise are identical to stat, lstat,  and  fstat,  respec-
       tively.  For details on programming for large file capable
       applications, see on intro(2).

                                                                2

