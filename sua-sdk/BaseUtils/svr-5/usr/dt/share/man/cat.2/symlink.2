

symlink(2)                                             symlink(2)

SSyynnooppssiiss
       #include <unistd.h>

       int symlink(const char *name1, const char *name2);

DDeessccrriippttiioonn
       symlink  creates  a symbolic link name2 to the file name1.
       Either name may be an arbitrary pathname, the  files  need
       not  be on the same file system, and name1 may be nonexis-
       tent.

       The file to which the symbolic link points is used when an
       operation  is performed on the link.  A on a symbolic link
       returns the linked-to file, while an lstat returns  infor-
       mation about the link itself.  This can lead to surprising
       results when a symbolic link is made to a  directory.   To
       avoid  confusion in programs, the call can be used to read
       the contents of a symbolic link.

       If the file named by name2 does not exist, it is  created.
       The permission mode of name2 is 777 [see

       For  security  reasons,  if  the  sticky bit is set on the
       directory in which the link is being created,  the  direc-
       tory must be owned by the calling user ID.

   RReettuurrnn vvaalluueess
       On  success,  symlink  returns  0.   On  failure,  symlink
       returns -1 and sets errno to identify the error.

   EErrrroorrss
       In the following conditions, symlink fails and sets  errno
       to:  Search  permission  is  denied for a component of the
       path prefix of name2.   Write  access  is  denied  on  the
       directory  in  which  the  new file is to be created.  The
       level of the new file is  not  within  the  file  system's
       level  range, and the calling process does not have appro-
       priate privilege (P_FSYSRANGE).  The  directory  in  which
       the entry for the new symbolic link is being placed cannot
       be extended because the user's quota of disk blocks on the
       file  system  containing the directory has been exhausted.
       The new symbolic link cannot be created because the user's
       quota of disk blocks on the file system which will contain
       the link has been exhausted.  The user's quota  of  inodes
       on  the file system on which the file is being created has
       been exhausted.  The file referred  to  by  name2  already
       exists.   name1  or  name2  points  outside  the allocated
       address space for the process.  An I/O error occurs  while
       reading from or writing to the file system.  Too many sym-
       bolic links are encountered  in  translating  name2.   The
       length  of the name1 or name2 argument exceeds {PATH_MAX},
       or the length  of  a  name1  or  name2  component  exceeds
       {NAME_MAX} while (_POSIX_NO_TRUNC) is in effect.  A compo-
       nent of the path prefix of  name2  does  not  exist.   The

                                                                1

symlink(2)                                             symlink(2)

       directory  in which the entry for the new symbolic link is
       being placed cannot be extended because no space  is  left
       on the file system containing the directory.  The new sym-
       bolic link cannot be created because no space is  left  on
       the file system which will contain the link.  There are no
       free inodes on the file system on which the file is  being
       created.   The file system does not support symbolic links
       A component of the path prefix of name2 is  not  a  direc-
       tory.  The sticky bit is set on the directory in which the
       link is being created and the directory is  not  owned  by
       the calling user ID.  The P_OWNER privilege is required to
       override this restriction.  The file name2 would reside on
       a read-only file system.

RReeffeerreenncceess

                                                                2

