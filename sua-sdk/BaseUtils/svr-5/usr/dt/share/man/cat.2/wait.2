

wait(2)                                                   wait(2)

SSyynnooppssiiss
       #include <sys/types.h> #include <sys/wait.h>

       pid_t wait(int *stat_loc);

DDeessccrriippttiioonn
       wait suspends the calling process until one of its immedi-
       ate children terminates or until a  child  that  is  being
       traced  stops  because it has received a signal.  The wait
       system  call  will  return  prematurely  if  a  signal  is
       received.   If  all  child processes stopped or terminated
       prior to the call on wait, return is immediate.

       If wait returns because the status of a child  process  is
       available, it returns the process ID of the child process.
       If the calling process had specified a non-zero value  for
       stat_loc,  the  status of the child process will be stored
       in the location pointed to by stat_loc.  It may be  evalu-
       ated with the macros described on In the following, status
       is the object pointed to by stat_loc: If the child process
       stopped,  the high order 8 bits of status will contain the
       number of the signal that caused the process to  stop  and
       the  low  order  8 bits will be set equal to WSTOPFLG.  If
       the child process terminated due to an exit call, the  low
       order 8 bits of status will be 0 and the high order 8 bits
       will contain the low order 8 bits of the argument that the
       child  process  passed to exit.  [see If the child process
       terminated due to a signal, the high order 8 bits of  sta-
       tus  will  be  0 and the low order 8 bits will contain the
       number of the signal that caused the termination. In addi-
       tion,  if WCOREFLG is set, a ``core image'' will have been
       produced.  [see

       If wait returns because the status of a child  process  is
       available,  then  that  status  may  be evaluated with the
       macros defined by wstat.

       If a parent process terminates  without  waiting  for  its
       child  processes  to  terminate,  the parent process ID of
       each child process is set to 1.  This means  the  initial-
       ization process inherits the child processes.  [see

   FFiilleess
       Message catalog:  uxcore.abi

   RReettuurrnn vvaalluueess
       If  wait returns due to a stopped or terminated child pro-
       cess, the process ID of the child is returned to the call-
       ing process.  Otherwise, wait returns -1 and sets errno to
       identify the error.

   EErrrroorrss
       In the following conditions, wait fails and sets errno to:
       The  calling  process  has  no existing unwaited-for child

                                                                1

wait(2)                                                   wait(2)

       processes.  The function was interrupted by a signal.

RReeffeerreenncceess
NNoottiicceess
       See NOTICES in

       If SIGCLD is held, then wait does not recognize death of
       children.

   CCoonnssiiddeerraattiioonnss ffoorr tthhrreeaaddss pprrooggrraammmmiinngg
       While one thread is blocked, siblings might still be exe-
       cuting.

                                                                2

