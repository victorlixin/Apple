

mknod(2)                                                 mknod(2)

SSyynnooppssiiss
       #include <sys/types.h> #include <sys/stat.h>

       int mknod(const char *path, mode_t mode, dev_t dev);

DDeessccrriippttiioonn
       mknod creates a new file named by the path name pointed to
       by path.  The file type and permissions of  the  new  file
       are initialized from mode.

       The  file  type  is  specified in mode by the S_IFMT bits,
       which must be set to one of the following values:

       ----------------------------
       S_IFIFO   fifo special
       S_IFCHR   character special
       S_IFDIR   directory
       S_IFBLK   block special
       S_IFREG   ordinary file

       For all file types other than S_IFIFO, the calling process
       must have the P_FILESYS privilege.

       The  file  access permissions are specified in mode by the
       0007777 bits, and may be constructed by an OR of the  fol-
       lowing values:
       -----------------------------------------------------------------------------
       S_ISUID   04000   Set user ID on execution.
       S_ISGID   020#0   Set group ID on execution if # is 7, 5, 3, or 1
                         Enable mandatory file/record locking if # is 6, 4, 2, or 0
       S_ISVTX   01000   Save text image after execution.
       S_IRWXU   00700   Read, write, execute by owner.
       S_IRUSR   00400   Read by owner.
       S_IWUSR   00200   Write by owner.
       S_IXUSR   00100   Execute (search if a directory) by owner.
       S_IRWXG   00070   Read, write, execute by group.
       S_IRGRP   00040   Read by group.
       S_IWGRP   00020   Write by group.
       S_IXGRP   00010   Execute by group.
       S_IRWXO   00007   Read, write, execute (search) by others.
       S_IROTH   00004   Read by others.
       S_IWOTH   00002   Write by others
       S_IXOTH   00001   Execute by others.

       The  owner  ID of the file is set to the effective user ID
       of the process.  The group ID of the file is  set  to  the
       effective  group  ID  of  the  process.   However,  if the
       S_ISGID bit is set in the parent directory, then the group
       ID of the file is inherited from the parent.  If the group
       ID of the new file does not match the effective  group  ID
       or  one of the supplementary group IDs, the S_ISGID bit is
       cleared.

       The access permission bits of mode  are  modified  by  the

                                                                1

mknod(2)                                                 mknod(2)

       process's  file  mode  creation  mask: all bits set in the
       process's file mode creation mask are cleared (see If mode
       indicates a block or character special file, dev is a con-
       figuration-dependent specification of a character or block
       I/O  device.  If mode does not indicate a block special or
       character special device, dev is ignored.  See

       mknod checks to see if the driver has been  installed  and
       whether  or  not it is an old-style driver.  If the driver
       is installed and it is an old-style driver, the minor num-
       ber  is  limited to 255.  If it's not an old-style driver,
       then it must be a new-style driver or uninstalled, and the
       minor number is limited to the current value of the MAXMI-
       NOR tunable.  Of course, this tunable is  set  to  255  by
       default.   If the range check fails, mknod fails with EIN-
       VAL.

       If path is a symbolic link, it is not followed.

RReettuurrnn vvaalluueess
       If mknod succeeds, it  returns  0.   If  mknod  fails,  it
       returns -1 and sets errno to identify the error.

       mknod  fails and creates no new file if one or more of the
       following  are  true:  The  named  file  exists.   dev  is
       invalid.   path points outside the allocated address space
       of the process.  Too many symbolic links were  encountered
       in  translating  path.  Components of path require hopping
       to multiple remote machines and the file system type  does
       not  allow  it.   The  length of the path argument exceeds
       {PATH_MAX}, or the length  of  a  path  component  exceeds
       {NAME_MAX}  while  _POSIX_NO_TRUNC is in effect.  A compo-
       nent of the path prefix is not a directory.   A  component
       of  the  path prefix does not exist or is a null pathname.
       The calling process does not have the P_FILESYS privilege.
       The  directory  in  which  the  file  is  to be created is
       located on a read-only file system.  No  space  is  avail-
       able.   A  signal was caught during the mknod system call.
       path points to a remote  machine  and  the  link  to  that
       machine is no longer active.

RReeffeerreenncceess

                                                                2

