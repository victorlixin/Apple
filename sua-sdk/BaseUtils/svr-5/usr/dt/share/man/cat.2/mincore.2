

mincore(2)                                             mincore(2)

SSyynnooppssiiss
       #include  <unistd.h> int mincore(caddr_t addr, size_t len,
       char *vec);

DDeessccrriippttiioonn
       mincore returns the primary  memory  residency  status  of
       pages  in  the  address  space  covered by mappings in the
       range [addr, addr + len).  The status  is  returned  as  a
       character-per-page  in  the  character array referenced by
       *vec (which the system  assumes  to  be  large  enough  to
       encompass  all the pages in the address range).  The least
       significant bit of each character is set to 1 to  indicate
       that  the referenced page is in primary memory, 0 if it is
       not.  The settings of other bits  in  each  character  are
       undefined  and  may  contain  other  information in future
       implementations.

       mincore returns residency information that is accurate  at
       an  instant  in  time.   Because the system may frequently
       adjust the set of pages in memory,  this  information  may
       quickly  be outdated.  Only locked pages are guaranteed to
       remain in memory; see

   RReettuurrnn vvaalluueess
       On  success,  mincore  returns  0.   On  failure,  mincore
       returns -1 and sets errno to identify the error.

   EErrrroorrss
       In the following conditions, link fails and sets errno to:
       *vec includes an out-of-range  or  otherwise  inaccessible
       address.   addr  is  not  a  multiple  of the page size as
       returned by The argument len has  a  value  less  than  or
       equal to 0.  Addresses in the range [addr, addr + len) are
       invalid for the address space of a process, or specify one
       or more pages which are not mapped.

RReeffeerreenncceess
NNoottiicceess
   CCoonnssiiddeerraattiioonnss ffoorr tthhrreeaaddss pprrooggrraammmmiinngg
       Sibling  threads  share  (by  definition) the same address
       space.

                                                                1

