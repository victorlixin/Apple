

sigsuspend(2)                                       sigsuspend(2)

SSyynnooppssiiss
       #include <signal.h>

       int sigsuspend(const sigset_t *set);

DDeessccrriippttiioonn
       sigsuspend replaces the process's signal mask with the set
       of signals pointed to by the argument set  and  then  sus-
       pends  the process until delivery of a signal whose action
       is either to execute a signal catching function or to ter-
       minate the process.

       If the action is to terminate the process, sigsuspend does
       not return.  If the action is to execute a signal catching
       function,  sigsuspend  returns  after  the signal catching
       function returns.  On return, the signal mask is  restored
       to the set that existed before the call to sigsuspend.

       It  is  not possible to block those signals that cannot be
       ignored [see this restriction is silently imposed  by  the
       system.

   RReettuurrnn vvaalluueess
       Because  sigsuspend  suspends  process  execution  indefi-
       nitely, there is no successful return value.  On  failure,
       sigsuspend  returns  -1  and  sets  errno  to identify the
       error.

   EErrrroorrss
       In the following conditions,  sigsuspend  fails  and  sets
       errno  to:  A  signal is caught by the calling process and
       control is returned from  the  signal  catching  function.
       The  set  argument  points outside the process's allocated
       address space.

RReeffeerreenncceess
NNoottiicceess
   CCoonnssiiddeerraattiioonnss ffoorr tthhrreeaaddss pprrooggrraammmmiinngg
       In multithreaded programs, signal masks  are  defined  per
       thread.  See for further details.

       While  one thread is blocked, siblings might still be exe-
       cuting.

   CCoonnssiiddeerraattiioonnss ffoorr lliigghhttwweeiigghhtt pprroocceesssseess
       Internally, there is one signal  mask  is  per  LWP.   The
       Threads  Library  has  a  wrapper function for this system
       call to give every thread a signal mask.

                                                                1

