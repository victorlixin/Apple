

Intro(3dba)                                           Intro(3dba)

SSyynnooppssiiss
       #include <eelsdba.h>

DDeessccrriippttiioonn
       The  Database Access API is used by Enhanced Event Logging
       System (EELS) log analysis applications to query  the  log
       database.   This API provides a database-independent means
       of accessing the log database. If the underlying  database
       changes,  the  log analysis applications do not have to be
       re-written.  If a database is substituted for  the  refer-
       ence  database  that  is  supplied, a dynamically loadable
       library  must  be  provided  to   be   used   instead   of
       /usr/lib/libeelsdba.so.  This  library must substitute all
       database access routines that are described in this manual
       page section.

DDaattaa ssttrruuccttuurreess
       The  data  structures  used by the Database Access API are
       dependent  on  the  underlying  database.   The   database
       abstraction  layer  maps  the  underlying  database's data
       structures  onto  the  structures  used  by  the   various
       Database  Access API routines.  Because of this no assump-
       tions should be made about the format of the  data  struc-
       tures used by the API.

   DDBBRReeccoorrddHHeeaaddeerr__tt
       The   structure  DBRecordHeader_t  represents  the  record
       header format used by the Database  Access  API  routines.
       struct   EELSTimeInfo_t   {        U64_t          TimeOff;
            U32_t          TimeUncInt;       U32_t          Time-
       UncInd;                            EELSBuffer_t   TimeSrc;
            EELSBuffer_t   TimeZone;      };

       struct EELSOrigInfo_t {       EELSBuffer_t   OrigHostName;
            EELSBuffer_t   OrigServName;
            EELSBuffer_t   OrigLocAddr;
            EELSBuffer_t   OrigServType;
            EELSBuffer_t   OrigPrinName;
            EELSBufer_t    OrigPrinID;      };

       struct  EELSInitInfo_t {      EELSBuffer_t   InitAuthAuth;
            EELSBuffer_t   InitDomSpecName;
            EELSBuffer_t   InitDomSpecID;      };

       struct  EELSTargInfo_t  {      EELSBuffer_t   TargLocName;
            EELSBuffer_t   TargLocAddr;
            EELSBuffer_t   TargServType;
               EELSBuffer_t                         TargAuthAuth;
            EELSBuffer_t   TargPrinname;
            EELSBuffer_t   TargPrinID;      };

       struct  DBRecordheader_t  {       U64_t          UniqEven-
       tID;      U32_t          SeqNum;       pid_t          Pro-
       cID;                               EELSBuffer_t   GroupID;

                                                                1

Intro(3dba)                                           Intro(3dba)

            lwpid_t        LWPID;       EELSBuffer_t   LogSysSrc;
            U32_t          Len;             U32_t          VerID;
            U32_t          EventNum;        EELSBuffer_t   Event-
       NumStr;                            U32_t          Outcome;
            EELSBuffer_t   PtrToSrcDom;
            EELSBuffer_t   EventSpecInfo;
            EELSBuffer_t   SrcSpecInfo;      EELSTimeInfo_t Time-
       Info;                             EELSOrigInfo_t OrigInfo;
            EELSInitInfo_t InitInfo;
            EELSTargInfo_t TargInfo;      };

   DDBBRReessuulltt
       The  structure  DBResult represents the result format used
       for  queries  made  by  and  typedef  struct  _DBResult  {
            DBConn           * Conn;      char          * TBName;
            DBRow         * TBSchema;      void        *  DBSpec;
            } DBResult;

   DDBBCCoonnnn
       The structure DBConn is used to store the database connec-
       tion ID which returns.  The  connection  ID  may  then  be
       passed  to  other database access routines to identify the
       database connection.  typedef struct _DBConn {      EELSI-
       Handle     *   EELSIHandle;        char         *  DBName;
            char        *  TBName;       char        *  TBSchema;
            int              DBFlags;       void        * DBSpec;
            } DBConn;

   DDBBRRooww
       The structure DBRow is used with to access the data  value
       at  a  row  and column located within a database.  typedef
       struct    _DBRow    {         short          DBNumColumns;
            DBColumn      * DBColumns;      } DBRow;

       typedef   struct   _DBColumn   {        int       DBCType;
            char         *   DBValue;         int       DBLength;
            char          * DBName;      int             DBIndex;
            } DBColumn;

RReeffeerreenncceess

                                                                2

