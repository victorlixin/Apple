

FWClassOperations(3sadm)                 FWClassOperations(3sadm)

SSyynnooppssiiss
       CC ... -lsysadm -lvtcl -ltclx -ltcl -lsocket -lgen -lm

       #include  <scoadmin/basicIncl.h>  #include <scoadmin/call-
       Back.h> #include <scoadmin/statusLst.h>  #include  <scoad-
       min/CAPI.h>

       void  FWObjectCreate(     bmipSubmission_cl   *bmipSubmis-
       sionPtr,
                           objectInstance_pt   objectInstance,
                           objectInstance_pt   referenceObject,
                           char              **attributes,
                           char              **values,
                           errStatus_cl           *errStatusPtr);
       void   FWObjectDelete(     bmipSubmission_cl  *bmipSubmis-
       sionPtr,
                           objectInstance_pt  objectInstance,
                           errStatus_cl      *errStatusPtr); void
       FWObjectAdd(   bmipSubmission_cl  *bmipSubmissionPtr,
                      objectInstance_pt   objectInstance,
                      char              **attributes,
                      char              **values,
                      errStatus_cl         *errStatusPtr);   void
       FWObjectRemove(     bmipSubmission_cl  *bmipSubmissionPtr,
                           objectInstance_pt   objectInstance,
                           char              **attributes,
                           char              **values,
                           errStatus_cl           *errStatusPtr);
       void    FWObjectReplace(bmipSubmission_cl     *bmipSubmis-
       sionPtr,
                       objectInstance_pt   objectInstance,
                       char              **attributes,
                       char              **values,
                       errStatus_cl         *errStatusPtr);  void
       FWObjectReplaceWithDefault              (bmipSubmission_cl
       *bmipSubmissionPtr,
                       objectInstance_pt   objectInstance,
                       char              **attributes,
                       errStatus_cl       *errStatusPtr);

       actionInfo_pt FWObjectAction(     bmipSubmission_cl *bmip-
       SubmissionPtr,
                           objectInstance_pt  objectInstance,
                           actionType_pt      actionType,
                           actionInfo_pt      actionInfo,
                           errStatus_cl      *errStatusPtr);

       attributeList_pt FWObjectGet(   bmipSubmission_cl   *bmip-
       SubmissionPtr,
                      objectInstance_pt   objectInstance,
                      char              **attributes,
                      errStatus_cl       *errStatusPtr);

                                                                1

FWClassOperations(3sadm)                 FWClassOperations(3sadm)

DDeessccrriippttiioonn
       These   functions   perform  operations  on  admin  object
       classes.  All calls to these functions must  be  proceeded
       by  calls  to FWInitializeFrameWork() and FWInitObjectSub-
       mission().   Unless  an  error  stack  is  placed  in  the
       errorStatus_cl  errStatusPtr  parameter, the operation can
       be assumed to have been sent to the named object class and
       operated on.

       In  the cases of FWObjectGet() the framework will return a
       Tcl keyed list of attribute-value pairs.

       In the case of FWObjectAction() the framework will  return
       the  named  action  information.  In cases where more than
       one Response is to be returned to the caller,  the  caller
       will need to use the FWExamineNextObject*() routines.

       When  the user no longer needs the named object class they
       should clean up with  FWShutdownObjectSubmission().   When
       the  user  no longer needs the framework they should clean
       up with FWShutdownFrameWork().

   AArrgguummeennttss
       object class specific data pointer obtained from  a  prior
       call  to A single object instance that represents the ref-
       erence object for use in the create operation.  For  exam-
       ple,  a  printer  reference object might be used as a tem-
       plate for the creation of new printers.  This  allows  the
       "cloning" of existing object instances.  Reference objects
       are not supported  by  all  object  classes.   A  list  of
       attributes  to  be  operated  on,  or retrieved. These are
       named in a NULL terminated array  of  type  char  *.  Once
       given  to  the routine the memory allocated to this array,
       and the values it points to, can be freed.  A list of val-
       ues,  to  be  assigned  to  the  attributes  given  by the
       attributes argument. These values are named in a NULL ter-
       minated  array  of  type char *.  Once given to this func-
       tion, the memory allocated to this array, and  the  values
       it  points  to,  can  be  freed.  An object class-specific
       action type.  This is a text string identifying  the  type
       of action to take on an object class.  A text string, con-
       taining object class-specific information associated  with
       a specific action type.  A pointer to the error stack data
       structure. If an error occurs the appropriate  error  will
       be  placed in the error stack. This data can be referenced
       using the library functions defined in

EExxaammpplleess
       /* Example 1 - Obtain the  information  about  all  CD-ROM
       devices on the system */

       #include  <scoadmin/basicIncl.h>  #include <scoadmin/call-
       Back.h> #include <scoadmin/statusLst.h>  #include  <scoad-
       min/CAPI.h>

                                                                2

FWClassOperations(3sadm)                 FWClassOperations(3sadm)

       main() {
           frameWorkCClientData_cl   *clientDataPtr;
           bmipSubmission_cl         *bmipSubmissionPtr;

           /* Set scoping and filtering parameters for later use.
       */
           scopeParameter_pt         scope ="1";
           filterParameter_pt   filter="type eq cdrom";

           /*
            * Since we are looking at all of the  devices,  there
       is no specific
            * instance.
            */
           objectInstance_pt         instance="NULL";

           /*   Specifically   look   at  the  desc  and  mountpt
       attributes. */
           char                             **attributes={"desc",
       "mountpt", "\0"};

           /* Initialize the admin error stack. */
           errStatus_cl         *errStatusPtr=ErrorNew();

           /*  Variable used for the return value of ObjectGet().
       */
           attributeList_pt          *attributeList;

           /* Initialize general admin data structure. */
           clientDataPtr=FWInitializeFrameWork();

           /* Initialize class-specific admin data structures. */

           /*  Initialize  communications  to  the  "sco devices"
       class. */

           bmipSubmissionPtr=FWInitObjectSubmission(clientDat-
       aPtr, "sco devices");

           /* Identify this as a scoped request */
           FWSetScope(bmipSubmissionPtr, scope);

           /*  Filter  against the "type" attribute.  Search only
       for type "cdrom". */
           FWSetFilter(bmipSubmissionPtr, filter);

           /* Actually get information from the  object  classes.
       */
           attributeList=ObjectGet(bmipSubmis-
       sionPtr,instance,attributes,errStatusPtr);
           if(  !  ErrorIsOk(errStatusPtr)  )  {        ErrorOut-
       put(errStatusPtr, stderr, 0, argv[0]);      exit(1);
           }

                                                                3

FWClassOperations(3sadm)                 FWClassOperations(3sadm)

           /* Unset filter parameters. */
           FWUnSetScope(bmipSubmissionPtr);
           FWUnSetFilter(bmipSubmissionPtr);

           /* Cleanup */
           FWShutdownObjectSubmission(bmipSubmissionPtr);
           FWShutdownFrameWork(clientDataPtr); }

       /*  Example 2 - Change the home directory of user test1 to
       "/tmp/test1". */

       #include <scoadmin/basicIncl.h>  #include  <scoadmin/call-
       Back.h>  #include  <scoadmin/statusLst.h> #include <scoad-
       min/CAPI.h>

       main() {
           frameWorkCClientData_cl   *clientDataPtr;
           bmipSubmission_cl         *bmipSubmissionPtr;

           objectInstance_pt         instance  =  "test1";
           char                       **attributes=    {"pw_dir",
       "\0"};
           char                              **values           =
       {"/tmp/test1", "\0"};

           errStatus_cl           *errStatusPtr=ErrorNew();

           /* Initialize general admin data structure */
           clientDataPtr=FWInitializeFrameWork();

           /* Initialize class-specific admin data structures */
           /* Initialize communications to the "sco user"  class.
       */
           bmipSubmissionPtr=FWInitObjectSubmission(clientDat-
       aPtr, "sco user");

           /* Actually replace the home directory information. */
           ObjectReplace(bmipSubmis-
       sionPtr,instance,attributes,values,errStatusPtr);

           /* Handle errors */
           if( ! ErrorIsOk(errStatusPtr) ) {  ErrorOutput(errSta-
       tusPtr, stderr, 0, argv[0]); exit(1);

           }

           /* Cleanup */
           FWShutdownObjectSubmission(bmipSubmissionPtr);
           FWShutdownFrameWork(clientDataPtr); }

RReeffeerreenncceess

                                                                4

