

siginfo(5)                                             siginfo(5)

SSyynnooppssiiss
       #include <siginfo.h>

DDeessccrriippttiioonn
       If a process is catching a signal, it may request informa-
       tion that tells why the system generated that signal  [see
       If  a  process  is monitoring its children, it may receive
       information that tells why a child changed state  [see  In
       either  case,  the  system  returns  the  information in a
       structure of type siginfo_t, which includes the  following
       information:   int  si_signo   /*  signal  number  */  int
       si_errno   /* error number  */  int  si_code    /*  signal
       code */

       si_signo  contains  the  system-generated  signal  number.
       (For the function, si_signo is always SIGCHLD.)

       If si_errno is non-zero, it contains an error number asso-
       ciated with this signal, as defined in errno.h.

       si_code  contains a code identifying the cause of the sig-
       nal.  If the value of si_code is less than or equal to  0,
       then  the  signal was generated by a user process [see and
       and the siginfo structure  contains  the  following  addi-
       tional  information:  pid_t si_pid   /* sending process ID
       */ uid_t si_uid   /* sending user ID */

       Otherwise, si_code contains a signal-specific  reason  why
       the signal was generated, as follows:

       ----------------------------------------------------------------
       Signal    Code            Reason
       ----------------------------------------------------------------
       _SS_II_GG_II_LL_LL    _II_LL_LL____II_LL_LL_OO_PP_CC      illegal opcode
                 _II_LL_LL____II_LL_LL_OO_PP_NN      illegal operand
                 _II_LL_LL____II_LL_LL_AA_DD_RR      illegal addressing mode
                 _II_LL_LL____II_LL_LL_TT_RR_PP      illegal trap
                 _II_LL_LL____PP_RR_VV_OO_PP_CC      privileged opcode
                 _II_LL_LL____PP_RR_VV_RR_EE_GG      privileged register
                 _II_LL_LL____CC_OO_PP_RR_OO_CC      co-processor error
                 _II_LL_LL____BB_AA_DD_SS_TT_KK      internal stack error

              ----------------------------------------------------------------
              _SS_II_GG_FF_PP_EE    _FF_PP_EE____II_NN_TT_DD_II_VV      integer divide by zero
                 _FF_PP_EE____II_NN_TT_OO_VV_FF      integer overflow
                 _FF_PP_EE____FF_LL_TT_DD_II_VV      floating point divide by zero
                 _FF_PP_EE____FF_LL_TT_OO_VV_FF      floating point overflow
                 _FF_PP_EE____FF_LL_TT_UU_NN_DD      floating point underflow
                 _FF_PP_EE____FF_LL_TT_RR_EE_SS      floating point inexact result
                 _FF_PP_EE____FF_LL_TT_II_NN_VV      invalid floating point operation
                 _FF_PP_EE____FF_LL_TT_SS_UU_BB      subscript out of range

              _SS_II_GG_SS_EE_GG_VV   _SS_EE_GG_VV____MM_AA_PP_EE_RR_RR     address not mapped to object

                                                                1

()                                                             ()

                 _SS_EE_GG_VV____AA_CC_CC_EE_RR_RR     invalid permissions for mapped object

              ----------------------------------------------------------------
              _SS_II_GG_BB_UU_SS    _BB_UU_SS____AA_DD_RR_AA_LL_NN      invalid address alignment
                 _BB_UU_SS____AA_DD_RR_EE_RR_RR      non-existent physical address
                 _BB_UU_SS____OO_BB_JJ_EE_RR_RR      object specific hardware error

              ----------------------------------------------------------------
              _SS_II_GG_TT_RR_AA_PP   _TT_RR_AA_PP____BB_RR_KK_PP_TT      process breakpoint
                 _TT_RR_AA_PP____TT_RR_AA_CC_EE      process trace trap

              ----------------------------------------------------------------
              _SS_II_GG_CC_HH_LL_DD   _CC_LL_DD____EE_XX_II_TT_EE_DD      child has exited
                 _CC_LL_DD____KK_II_LL_LL_EE_DD      child was killed
                 _CC_LL_DD____DD_UU_MM_PP_EE_DD      child terminated abnormally
                 _CC_LL_DD____TT_RR_AA_PP_PP_EE_DD     traced child has trapped
                 _CC_LL_DD____SS_TT_OO_PP_PP_EE_DD     child has stopped
                 _CC_LL_DD____CC_OO_NN_TT_II_NN_UU_EE_DD   stopped child had continued

              ----------------------------------------------------------------
              _SS_II_GG_PP_OO_LL_LL   _PP_OO_LL_LL____II_NN         data input available
                 _PP_OO_LL_LL____OO_UU_TT        output buffers available
                 _PP_OO_LL_LL____MM_SS_GG        input message available
                 _PP_OO_LL_LL____EE_RR_RR        I/O error
                 _PP_OO_LL_LL____PP_RR_II        high priority input available
                 _PP_OO_LL_LL____HH_UU_PP        device disconnected

       In addition, the following signal-dependent information is
       available for kernel-generated signals:

       -----------------------------------------------------------------
       Signal    Field             Value
       -----------------------------------------------------------------
       SIGILL    caddr_t si_addr   address of faulting instruction
       SIGFPE
       -----------------------------------------------------------------
       SIGSEGV   caddr_t si_addr   address of faulting memory reference
       SIGBUS
       -----------------------------------------------------------------
       SIGCHLD   pid_t si_pid      child process ID
                 int si_status     exit value or signal
       -----------------------------------------------------------------
       SIGPOLL   long si_band      band event for POLL_IN, POLL_OUT, or
                                   POLL_MSG

RReeffeerreenncceess
NNoottiicceess
       For  SIGCHLD  signals,  if si_code is equal to CLD_EXITED,
       then si_status is equal to the exit value of the  process;
       otherwise,  it is equal to the signal that caused the pro-
       cess to change state.  For some implementations, the exact
       value  of  si_addr  may  not  be  available; in that case,
       si_addr is guaranteed to be on the same page as the fault-
       ing instruction or memory reference.

                                                                2

