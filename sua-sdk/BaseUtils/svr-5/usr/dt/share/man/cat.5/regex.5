

regex(5)                                                 regex(5)

SSyynnooppssiiss
       #include <regex.h>

DDeessccrriippttiioonn
       The  regex.h  header  defines  the structures and symbolic
       constants used by regcomp, regexec, regerror and  regfree.

       The structure type regex_t contains at least the following
       member:
       ----------------
       size_t  re_nsub

       The type regoff_t is defined as a signed  arithmetic  type
       that  can  hold  the  largest  value that can be stored in
       either a type of off_t or  ssize_t.   The  structure  type
       regmatch_t contains at least the following members:
       ----------------
       regoff_t  rm_so
       regoff_t  rm_eo

       Values  for cflags passed to regcomp: use extended regular
       expression.  ignore case in match.  report only success or
       fail in regexec.  change the handling of newline.

       Values  for eflags passed to regexec: The circumflex char-
       acter (^), when taken as a  special  character,  will  not
       match  the beginning of string.  The dollar sign ($), when
       taken as a special character, will not match  the  end  of
       string.

       The  following  constants are defined as error return val-
       ues:

       regexec failed  to  match.   invalid  regular  expression.
       invalid  collating  element referenced.  invalid character
       class type referenced.  Trailing \ in pattern.  Number  in
       \digit  invalid  or  in  error.  [] imbalance.  \(\) or ()
       imbalance.  \{\} imbalance.  Content of \{\} invalid:  not
       a  number,  number too large, more than two numbers, first
       larger than second.  Invalid endpoint in range expression.
       Out  of  memory.   ?, * or + not preceded by valid regular
       expression.  The implementation does not support the func-
       tion

       The  following  are  declared as functions and may also be
       declared as  macros:  extern  int  regcomp(regex_t  *preg,
       const char *pattern, int cflags); extern int regexec(const
       regex_t *preg, const char *string,
               size_t nmatch, regmatch_t  *pmatch,  int  eflags);
       extern size_t regerror(int errcode, const regex_t *preg,
               char  *errbuf,  size_t  errbuf_size);  extern void
       regfree(regex_t *preg);

                                                                1

regex(5)                                                 regex(5)

RReeffeerreenncceess

                                                                2

