

wchar(5)                                                 wchar(5)

SSyynnooppssiiss
       #include <wchar.h>

DDeessccrriippttiioonn
       The  wchar.h  header  defines  the  following  data  types
       through As described in stddef.h.  An integral type  capa-
       ble  of  storing  any  valid  value of wchar_t or WEOF.  A
       scalar type of a data object that can  hold  values  which
       represent  locale-specific  character  classification.  An
       object type other than an array type  that  can  hold  the
       conversion  state information necessary to convert between
       sequences of (possibly  multibyte)  characters  and  wide-
       characters.   If  a  codeset  is  being  used such that an
       mbstate_t needs to preserve more than 2 levels of reserved
       state,  the  results  are  unspecified.   As  described in
       stdio.h.  As described in stddef.h.

       The wchar.h header declares the following as functions and
       may  also define them as macros.  Function prototypes must
       be provided for  use  with  an  ISO  C  compiler.   wint_t
       btowc(int);   int                 fwprintf(FILE  *,  const
       wchar_t *, ...); int               fwscanf(FILE  *,  const
       wchar_t  *,  ...); int               iswalnum(wint_t); int
       iswalpha(wint_t); int               iswcntrl(wint_t);  int
       iswdigit(wint_t);  int               iswgraph(wint_t); int
       iswlower(wint_t); int               iswprint(wint_t);  int
       iswpunct(wint_t);  int               iswspace(wint_t); int
       iswupper(wint_t); int               iswxdigit(wint_t); int
       iswctype(wint_t,  wctype_t); wint_t            fgetwc(FILE
       *); wchar_t           *fgetws(wchar_t  *,  int,  FILE  *);
       wint_t               fputwc(wchar_t,    FILE    *);    int
       fputws(const     wchar_t     *,     FILE      *);      int
       fwide(FILE   *,  int);  wint_t             getwc(FILE  *);
       wint_t                      getwchar(void);            int
       mbsinit(const mbstate_t *); size_t            mbrlen(const
       char  *,  size_t,  mbstate_t  *);  size_t             mbr-
       towc(wchar_t *, const char *, size_t,
                             mbstate_t         *);         size_t
       mbsrtowcs(wchar_t *, const char **, size_t,
                             mbstate_t         *);         wint_t
       putwc(wchar_t,           FILE          *);          wint_t
       putwchar(wchar_t); int                swprintf(wchar_t  *,
       size_t,  const  wchar_t  *,  ...);  int               sws-
       canf(const  wchar_t  *,  const  wchar_t  *,  ...);  wint_t
       towlower(wint_t);    wint_t              towupper(wint_t);
       wint_t               ungetwc(wint_t,    FILE    *);    int
       vfwprintf(FILE   *,   const   wchar_t   *,  va_list);  int
       vwprintf(const wchar_t *, va_list); int               vsw-
       printf(wchar_t *, size_t, const wchar_t *,
                             va_list);   size_t              wcr-
       tomb(char    *,    wchar_t,    mbstate_t    *);    wchar_t
       *wcscat(wchar_t    *,    const    wchar_t    *);   wchar_t
       *wcschr(const      wchar_t      *,      wchar_t);      int
       wcscmp(const    wchar_t   *,   const   wchar_t   *);   int

                                                                1

wchar(5)                                                 wchar(5)

       wcscoll(const  wchar_t  *,  const  wchar_t   *);   wchar_t
       *wcscpy(wchar_t    *,    const    wchar_t    *);    size_t
       wcscspn(const  wchar_t  *,  const   wchar_t   *);   size_t
       wcsftime(wchar_t *, size_t, const wchar_t *,
                             const    struct    tm   *);   size_t
       wcslen(const wchar_t *); wchar_t          *wcsncat(wchar_t
       *,       const      wchar_t      *,      size_t);      int
       wcsncmp(const wchar_t *, const wchar_t *, size_t); wchar_t
       *wcsncpy(wchar_t  *,  const  wchar_t  *,  size_t); wchar_t
       *wcspbrk(const  wchar_t  *,  const  wchar_t  *);   wchar_t
       *wcsrchr(const     wchar_t     *,     wchar_t);     size_t
       wcsrtombs(char *, const wchar_t **, size_t,
                             mbstate_t         *);         size_t
       wcsspn(const   wchar_t   *,   const  wchar_t  *);  wchar_t
       *wcsstr(const  wchar_t  *,  const   wchar_t   *);   double
       wcstod(const    wchar_t    *,    wchar_t    **);   wchar_t
       *wcstok(wchar_t *, const wchar_t *, wchar_t **); long  int
       wcstol(const  wchar_t  *,  wchar_t **, int); unsigned long
       int wcstoul(const wchar_t *,  wchar_t  **,  int);  wchar_t
       *wcswcs(const   wchar_t   *,   const   wchar_t   *);   int
       wcswidth(const     wchar_t     *,     size_t);      size_t
       wcsxfrm(wchar_t   *,   const   wchar_t   *,  size_t);  int
       wctob(wint_t); wctype_t          wctype(const char *); int
       wcwidth(wchar_t);  wchar_t          *wmemchr(const wchar_t
       *,  wchar_t,  size_t);   int                 wmemcmp(const
       wchar_t    *,    const   wchar_t   *,   size_t);   wchar_t
       *wmemcpy(wchar_t *,  const  wchar_t  *,  size_t);  wchar_t
       *wmemmove(wchar_t  *,  const  wchar_t  *, size_t); wchar_t
       *wmemset(wchar_t     *,     wchar_t,     size_t);      int
       wprintf(const       wchar_t       *,       ...);       int
       wscanf(const wchar_t *, ...);

       wchar.h defines the following  macro  names:  The  maximum
       value  representable  by  an  object of type wchar_t.  The
       minimum value representable by an object of type  wchar_t.
       Constant  expression  of  type  wint_t that is returned by
       several  WP  functions  to   indicate   end-of-file.    As
       described in stddef.h.

       The  tag  tm is declared as naming an incomplete structure
       type, the contents of which are described  in  the  header
       time.h.

RReeffeerreenncceess

                                                                2

