

localedef(4)                                         localedef(4)

DDeessccrriippttiioonn
       This  manual  page  describes  the format of a source file
       used as input to the localedef command.  This file (called
       a  file  in  this manual page) defines information about a
       locale.  The localedef command uses the localization spec-
       ifications in the source file to create data files used by
       the localization system to map  system  input  and  output
       into a local format.

       A  locale  defines  your execution environment in terms of
       language and cultural conventions.  It consists of one  or
       more  categories  corresponding to these environment vari-
       able names: Collation order used by commands such as  sort
       and  uniq.   Character classification and case conversion.
       Formats of informative and diagnostic messages and  inter-
       active responses.  Monetary formatting.  Numeric, non-mon-
       etary formatting.  Date and time formats.

       When you run the localedef command, only those  categories
       defined  in  the  file  used  as  input to the command are
       defined for the locale created.

   CCaatteeggoorryy ssoouurrccee ddeeffiinniittiioonn
       The file consists of one or more category  source  defini-
       tions.   A  category source definition consists of a cate-
       gory header (one of the strings listed above),  the  cate-
       gory  body  (consisting of one or more lines of text), and
       the string END.

       A category body contains lines of text. Each line contains
       an  identifier  and (optionally) operands. Identifiers are
       keywords (identifying a locale element) or collating  ele-
       ments.  Operands may be characters, strings of characters,
       or collating elements. (Strings  are  enclosed  in  double
       quotes; literal double quotes in strings should be escaped
       by a preceding backslash.)

       Comments are allowed in the file.  By default, the comment
       character  is a pound sign (#); blank lines and lines con-
       taining a # in the first position are ignored. The comment
       character  can  be changed if the first category header in
       the file is preceded by a line modifying the comment char-
       acter.  The  line  should  have the following format: com-
       ment_char # where # is the alternative  comment  character
       to use.

       Lines  can  be continued by placing a backslash at the end
       of the line; the backslash and subsequent newline  charac-
       ter are ignored. Comment lines are not treated in this way
       (the backslash is ignored, because it is read as  part  of
       the comment).

       Individual  characters, characters in strings, and collat-
       ing  elements,  are   represented   by   symbolic   names.

                                                                1

localedef(4)                                         localedef(4)

       Alternatively,  characters  can  be  represented  by them-
       selves, or as octal, hexadecimal, or decimal values. Octal
       numbers  are two or three digits, preceded by a backslash;
       hexadecimal numbers are two digits,  preceded  by  \x  and
       decimal numbers are two or more digits, preceded by \d.

       Symbolic  values are enclosed in angle brackets (< and >).
       The symbolic name (including angle brackets) must match  a
       symbolic  name  defined  in  the charmap file specified by
       localedef -f.

   LLCC__CCTTYYPPEE
       This category section  defines  character  classification,
       case  conversion, and other character attributes. In addi-
       tion, a series of characters within a single character set
       can be represented by three adjacent periods ``...'', rep-
       resenting an ellipsis.

       The following keywords are recognized: Defines  characters
       classified as uppercase.  Defines characters classified as
       lowercase.   Defines  characters  classified  as   letters
       (upper-  or  lowercase).  Defines characters classified as
       digits.   Defines  characters  classified  as  whitespace.
       Defines   characters  classified  as  control  characters.
       Defines characters  classified  as  punctuation.   Defines
       characters classified as printable characters, not includ-
       ing the space character.  Defines characters classified as
       printable   characters,  including  the  space  character.
       Defines  characters  classified  as  hexadecimal   digits.
       (Note  that  both upper and lowercase versions of the let-
       ters "A" to "F" are included in  the  POSIX  locale;  this
       practice  is  recommended.)  Defines characters classified
       as blank characters.  Defines  the  mapping  of  lowercase
       letters  to  uppercase  letters.  (The operand consists of
       character pairs separated by semicolons; the characters in
       each  pair are separated by a comma and enclosed in paren-
       theses. The first character is lowercase,  the  second  is
       its  uppercase equivalent.)  Defines the mapping of upper-
       case letters to lowercase  letters.  (Same  format  as  in
       toupper,  except  that the first character in each pair is
       uppercase and the second is lowercase.)  Specify an exist-
       ing  locale to be used in the definition of this category.
       If this keyword is specified, no other keyword is allowed.

       Note that some of the above categories are mutually exclu-
       sive or automatically inclusive. For example,  it  is  not
       possible  for  a character to be alpha and digit.  See the
       X/Open Interface Definitions, Version 4 Issue 2  for  fur-
       ther details.

   LLCC__CCOOLLLLAATTEE
       This  category  section  provides a collation sequence for
       utilities that rely on sorting (such as  sort,  uniq,  and
       awk, regular expression matching, and some system calls.

                                                                2

localedef(4)                                         localedef(4)

       A  collation  sequence defines the order between collating
       elements (characters and multibyte collating sequences) in
       the locale. The following keywords are recognized: Defines
       a collating-element symbol representing  a  multicharacter
       collating  element.  Defines a collating symbol for use in
       collation order statements.  Define collation rules.  This
       statement  is  followed  by  one  or  more collation order
       statements, that assign  character  collation  values  and
       weights   to   collating   elements.  The  syntax  of  the
       order_start        command         is:         order_start
       <sort_rules>;<sort_rules> ... ;

       The  following  sort_rules  collating weights are allowed:
       Specifies that comparison operations for the weight  level
       proceed  from  the end of the string towards the beginning
       of the string.  Specifies that comparison  operations  for
       the  weight level proceed from start of string towards the
       end of the string.  Specifies that  comparison  operations
       for  the  weight level will consider the relative position
       of elements in the strings not subject to IGNORE.  Defines
       the  end  of  collation  order  statements.   Specifies an
       existing locale to copy the collating sequence  from.  (If
       used, no other keyword is permitted.)

       See  the  X/Open  Interface Definitions, Version 4 Issue 2
       for further details.

   LLCC__MMOONNEETTAARRYY
       This category section defines the rules and  symbols  used
       to  format  monetary  numeric  information.  The following
       items are defined in this section: Specifies the  interna-
       tional  currency  symbol. This is a four-character string;
       the first three characters contain the alphabetic interna-
       tional currency symbol (in accordance with ISO 4217:1987),
       while the fourth character is the separator  used  between
       the  currency symbol and the monetary quantity.  Specifies
       the string used as the local currency  symbol.   Specifies
       the  symbol used as the decimal delimiter in monetary for-
       matted quantities.  Specifies the symbol used as a separa-
       tor  for  groups of digits to the left of a decimal delim-
       iter in monetary formatted quantities.  Specifies the size
       of  each group of digits in formatted monetary quantities.
       Requires as an operand a sequence of integers separated by
       semicolons. Each integer specifies the number of digits in
       each group, with the initial integer defining the size  of
       the group immediately preceding the decimal delimiter, and
       the following integers defining the groups before that. If
       the  last integer is not -1, then the size of the previous
       group will be repeatedly used for  the  remainder  of  the
       digits.  If the last integer is -1, then no further group-
       ing is performed.  Specifies the sign used to  indicate  a
       non-negative  formatted  monetary quantity.  Specifies the
       sign used to indicate a negative formatted monetary  quan-
       tity.   Specifies  an  integer  representing the number of

                                                                3

localedef(4)                                         localedef(4)

       fractional digits to be written in  a  formatted  monetary
       quantity using int_curr_symbol.  Specifies an integer rep-
       resenting the number of fractional digits to be written in
       a   formatted  monetary  quantity  using  currency_symbol.
       Specifies that the currency_symbol or int_curr_symbol pre-
       cedes the monetary quantity (if value is 1) or follows the
       monetary quantity (if value is 0). This only  applies  for
       non-negative monetary quantities.  Specifies that no space
       separates the currency symbol from the  monetary  quantity
       (if  value  is  0), or that a space separates the currency
       symbol from the quantity (if value is 1), or that a  space
       separates  the symbol and the sign string (if value is 2).
       This only applies  to  non-negative  monetary  quantities.
       Specifies that the currency_symbol or int_curr_symbol pre-
       cedes the monetary quantity (if value is 1) or follows the
       monetary  quantity  (if value is 0). This only applies for
       negative monetary quantities.   Specifies  that  no  space
       separates  the  currency symbol from the monetary quantity
       (if value is 0), or that a space  separates  the  currency
       symbol  from the quantity (if value is 1), or that a space
       separates the symbol and the sign string (if value is  2).
       This only applies to negative monetary quantities.  Speci-
       fies the positioning of the positive_sign for a  non-nega-
       tive monetary quantity. The following values are possible:
       Parentheses enclose the quantity and the currency  symbol.
       The  sign  string  precedes  the quantity and the currency
       symbol.  The sign string follows the quantity and the cur-
       rency  symbol.  The sign string precedes the currency sym-
       bol.  The sign string follows the currency symbol.  Speci-
       fies  the  positioning of the negative_sign for a negative
       monetary   quantity.   (Accepts   the   same   values   as
       p_sign_posn.)   Specifies  the  name of an existing locale
       from which to copy the  definition  of  this  section.  If
       specified, no other keywords are allowed.

       See  the  X/Open  Interface Definitions, Version 4 Issue 2
       for further details.

   LLCC__NNUUMMEERRIICC
       This category defines the rules and symbols used to format
       non-monetary  numeric  information. The following keywords
       are recognized: Specifies the name of an  existing  locale
       to use as the definition for this category. (If specified,
       no other keywords are allowed.)  Specifies a  string  con-
       taining  the  symbol  used  as the decimal delimiter. This
       keyword cannot be omitted and cannot be set to  the  empty
       string.  Specifies the size of each group of digits to the
       left of the  decimal  point  (or  other  separator).   The
       operand is a sequence of integers separated by semicolons.
       Each integer specifies the number of digits in each group,
       in  ascending  ordinality.  If the last integer is not -1,
       the size of the last group is repeatedly  applied  to  the
       remaining  digits; if the last integer is -1, then no fur-
       ther grouping is applied.  Specifies the symbol used as  a

                                                                4

localedef(4)                                         localedef(4)

       separator  for groups of digits to the left of the decimal
       point.

       See the X/Open Interface Definitions, Version  4  Issue  2
       for further details.

   LLCC__TTIIMMEE
       This category defines the formatting of time and date val-
       ues.  The definitions imply a  Gregorian  style  calendar:
       formatting  time  strings  for  other types of calendar is
       outside the scope of the X/Open specifications.

       The following mandatory keywords are  recognized:  Specify
       the  abbreviated  weekday  names,  corresponding to the %a
       field descriptor. The operand consists of seven  semicolon
       separated  strings,  each surrounded by double quotes. The
       first string corresponds to Sunday, the second to  Monday,
       and  so on.  Specify the full weekday names, corresponding
       to the %A field descriptor. The operand consists of  seven
       semicolon  separated  strings,  each  surrounded by double
       quotes. The first string corresponds to Sunday, the second
       to  Monday,  and  so  on.   Specify  the abbreviated month
       names, corresponding  to  the  %b  field  descriptor.  The
       operand  consists  of  twelve semicolon separated strings,
       each surrounded by double quotes. The first string  corre-
       sponds  to  the  first  month (January), the second to the
       second month, and so on.  Specify the  full  month  names,
       corresponding to the %B field descriptor. The operand con-
       sists of twelve semicolon  separated  strings,  each  sur-
       rounded  by double quotes. The first string corresponds to
       the first month (January), the second to the second month,
       and so on.  Specify the date and time representation, cor-
       responding to the %c field descriptor.  The  operand  con-
       sists of a string and can contain any combination of char-
       acters and field descriptors.  In addition the string  can
       contain escape sequences (\\, \a, \b, \f, \n, \r, \t, \v).
       Specify the date representation, corresponding to  the  %x
       field  descriptor.  (Operand as for d_t_fmt.)  Specify the
       time  representation,  corresponding  to  the   %X   field
       descriptor.  (Operand  as for d_t_fmt.)  Specify the AM/PM
       representation, corresponding to the %p field  descriptor.
       The  operand  consists of two double-quoted strings, sepa-
       rated by a semicolon.  Specify the time representation  in
       the 12-hour format, corresponding to the %r field descrip-
       tor. (Operand as for d_t_fmt.)  Specifies the name  of  an
       existing  locale from which to copy the definition of this
       section. If specified, no other keywords are allowed.  The
       abbreviated  weekday  names, where x is a number from 1 to
       7.  The full weekday names, where x is a number from 1  to
       7.   The abbreviated month names, where x is a number from
       1 to 12.  The full month names, where x is a number from 1
       to 12.  The appropriate date and time representation.  The
       appropriate date  representation.   The  appropriate  time
       representation.     The   appropriate   AM   affix.    The

                                                                5

localedef(4)                                         localedef(4)

       appropriate PM affix.  The appropriate time representation
       in  the  12 hour clock format with AM_STR and PM_STR.  The
       Era description segments (specifying how years are counted
       and  displayed  for  each  era in a locale).  The era date
       format.  Specifies the  alternative  symbols  for  digits,
       corresponding to the %O conversion specification modifier.
       The operands consist of semicolon-separated  symbols.  The
       first  is  the  alternative symbol for zero, the second is
       the alternative symbol for one, and so on. (A  maximum  of
       100 alternative symbols are supported.)

       See  the  X/Open  Interface Definitions, Version 4 Issue 2
       for further details.

   LLCC__MMEESSSSAAGGEESS
       This category defines the format and values  for  affirma-
       tive  or  negative  responses.  The following keywords are
       recognized:  Specifies  an  operand  that  describes   the
       acceptable  affirmative response to a question expecting a
       yes/no response. Operand is an  extended  regular  expres-
       sion.   Specifies an operand that describes the acceptable
       negative  response  to  a  question  expecting  a   yes/no
       response.  Operand  is  an  extended  regular  expression.
       Specifies the name of an existing  locale  from  which  to
       copy  the  definition  of  this  section. If specified, no
       other keywords are allowed.

       See the X/Open System  Interface  Definitions,  Version  4
       Issue 2 for further details.

RReeffeerreenncceess
SSttaannddaarrddss ccoonnffoorrmmaannccee
       is conformant with X/Open Interface Definitions, Version 4
       Issue 2.

                                                                6

