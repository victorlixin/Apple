

pthread(4)                                             pthread(4)

SSYYNNOOPPSSIISS
       #include <pthread.h>

DDEESSCCRRIIPPTTIIOONN
       The   pthread.h  header  defines  the  following  symbols:
       PTHREAD_CANCEL_ASYNCHRONOUS          PTHREAD_CANCEL_ENABLE
       PTHREAD_CANCEL_DEFERRED             PTHREAD_CANCEL_DISABLE
       PTHREAD_CANCELED   PTHREAD_COND_INITIALIZER   PTHREAD_CRE-
       ATE_DETACHED                       PTHREAD_CREATE_JOINABLE
       PTHREAD_EXPLICIT_SCHED               PTHREAD_INHERIT_SCHED
       PTHREAD_MUTEX_DEFAULT             PTHREAD_MUTEX_ERRORCHECK
       PTHREAD_MUTEX_NORMAL             PTHREAD_MUTEX_INITIALIZER
       PTHREAD_MUTEX_RECURSIVE                  PTHREAD_ONCE_INIT
       PTHREAD_PRIO_INHERIT  PTHREAD_PRIO_NONE  PTHREAD_PRIO_PRO-
       TECT     PTHREAD_PROCESS_SHARED    PTHREAD_PROCESS_PRIVATE
       PTHREAD_RWLOCK_INITIALIZER           PTHREAD_SCOPE_PROCESS
       PTHREAD_SCOPE_SYSTEM

       The  pthread_attr_t,  pthread_cond_t,  pthread_condattr_t,
       pthread_key_t,    pthread_mutex_t,    pthread_mutexattr_t,
       pthread_once_t, pthread_rwlock_t, pthread_rwlockattr_t and
       pthread_t types are defined as described in sys/types.h.

       The following are declared as functions and  may  also  be
       declared             as            macros.             int
       pthread_attr_destroy(pthread_attr_t        *);         int
       pthread_attr_getdetachstate(const  pthread_attr_t  *,  int
       *);        int          pthread_attr_getinheritsched(const
       pthread_attr_t  *,  int  *);  int   pthread_attr_getsched-
       param(const pthread_attr_t *,
                 struct        sched_param        *);         int
       pthread_attr_getschedpolicy(const  pthread_attr_t  *,  int
       *); int    pthread_attr_getscope(const  pthread_attr_t  *,
       int      *);     int       pthread_attr_getstackaddr(const
       pthread_attr_t *, void **);  int    pthread_attr_getstack-
       size(const    pthread_attr_t    *,    size_t    *);    int
       pthread_attr_init(pthread_attr_t          *);          int
       pthread_attr_setdetachstate(pthread_attr_t  *,  int);  int
       pthread_attr_setinheritsched(pthread_attr_t *,  int);  int
       pthread_attr_setschedparam(pthread_attr_t *,
                 const     struct     sched_param     *);     int
       pthread_attr_setschedpolicy(pthread_attr_t  *,  int);  int
       pthread_attr_setscope(pthread_attr_t    *,    int);    int
       pthread_attr_setstackaddr(pthread_attr_t *, void  *);  int
       pthread_attr_setstacksize(pthread_attr_t  *,  size_t); int
       pthread_cancel(pthread_t);                            void
       pthread_cleanup_push(void*),       void      *);      void
       pthread_cleanup_pop(int);    int       pthread_cond_broad-
       cast(pthread_cond_t                 *);                int
       pthread_cond_destroy(pthread_cond_t        *);         int
       pthread_cond_init(pthread_cond_t   *,  const  pthread_con-
       dattr_t *); int    pthread_cond_signal(pthread_cond_t  *);
       int   pthread_cond_timedwait(pthread_cond_t *,
                 pthread_mutex_t *, const struct timespec *); int

                                                                1

pthread(4)                                             pthread(4)

       pthread_cond_wait(pthread_cond_t  *,  pthread_mutex_t  *);
       int    pthread_condattr_destroy(pthread_condattr_t *); int
       pthread_condattr_getpshared(const  pthread_condattr_t   *,
       int *); int   pthread_condattr_init(pthread_condattr_t *);
       int    pthread_condattr_setpshared(pthread_condattr_t   *,
       int);     int      pthread_create(pthread_t    *,    const
       pthread_attr_t *,
                 void    *(*)(void    *),    void     *);     int
       pthread_detach(pthread_t);  int   pthread_equal(pthread_t,
       pthread_t); void  pthread_exit(void *); int   pthread_get-
       concurrency(void);  int   pthread_getschedparam(pthread_t,
       int  *,  struct  sched_param  *);  void   *pthread_getspe-
       cific(pthread_key_t);  int    pthread_join(pthread_t, void
       **);  int     pthread_key_create(pthread_key_t   *,   void
       (*)(void *)); int   pthread_key_delete(pthread_key_t); int
       pthread_mutex_destroy(pthread_mutex_t       *);        int
       pthread_mutex_init(pthread_mutex_t *, const pthread_mutex-
       attr_t *);  int    pthread_mutex_lock(pthread_mutex_t  *);
       int      pthread_mutex_trylock(pthread_mutex_t   *);   int
       pthread_mutex_unlock(pthread_mutex_t        *);        int
       pthread_mutexattr_destroy(pthread_mutexattr_t *);
                 int *); int   pthread_mutexattr_getpshared(const
       pthread_mutexattr_t  *,  int  *);   int     pthread_mutex-
       attr_gettype(pthread_mutexattr_t    *,    int    *);   int
       pthread_mutexattr_init(pthread_mutexattr_t     *);     int
       pthread_mutexattr_setpshared(pthread_mutexattr_t  *, int);
       int     pthread_mutexattr_settype(pthread_mutexattr_t   *,
       int);    int      pthread_once(pthread_once_t    *,   void
       (*)(void)); int    pthread_rwlock_destroy(pthread_rwlock_t
       *); int   pthread_rwlock_init(pthread_rwlock_t *,
                 const      pthread_rwlockattr_t      *);     int
       pthread_rwlock_rdlock(pthread_rwlock_t       *);       int
       pthread_rwlock_tryrdlock(pthread_rwlock_t      *);     int
       pthread_rwlock_trywrlock(pthread_rwlock_t     *);      int
       pthread_rwlock_unlock(pthread_rwlock_t       *);       int
       pthread_rwlock_wrlock(pthread_rwlock_t       *);       int
       pthread_rwlockattr_destroy(pthread_rwlockattr_t   *);  int
       pthread_rwlockattr_getpshared(const   pthread_rwlockattr_t
       *,
                 int        *);       int         pthread_rwlock-
       attr_init(pthread_rwlockattr_t *);  int    pthread_rwlock-
       attr_setpshared(pthread_rwlockattr_t *, int); pthread_t
             pthread_self(void);     int       pthread_setcancel-
       state(int, int *);  int    pthread_setcanceltype(int,  int
       *);       int        pthread_setconcurrency(int);      int
       pthread_setschedparam(pthread_t, int ,
                 const struct sched_param *); int    pthread_set-
       specific(pthread_key_t, const void *); void  pthread_test-
       cancel(void);

       Inclusion of the pthread.h header will make  visible  sym-
       bols defined in the headers sched.h and time.h.

                                                                2

pthread(4)                                             pthread(4)

RReeffeerreenncceess

                                                                3

