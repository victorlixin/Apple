

spell(1)                                                 spell(1)

SSyynnooppssiiss
       spell [-b] [-i] [-l] [-v] [-x] [+local_file] [files]

       /usr/lib/spell/hashmake

       /usr/lib/spell/spellin n

       /usr/lib/spell/hashcheck

       /usr/share/lib/spell/compress

DDeessccrriippttiioonn
       spell  collects  words from the named files and looks them
       up in a spelling list.  Words that neither occur among nor
       are  derivable (by applying certain inflections, prefixes,
       and/or suffixes) from  words  in  the  spelling  list  are
       printed  on  the  standard output.  If no files are named,
       words are collected from the standard input.

       spell ignores most troff, tbl, and eqn constructions.   It
       also ignores punctuation marks and special characters (for
       example, _ and =).  British spelling is checked.   Besides
       preferring  centre,  colour,  programme, speciality, trav-
       elled, and so on, this option insists upon -ise  in  words
       like  standardise, Fowler and the OED (Oxford English Dic-
       tionary) to  the  contrary  notwithstanding.   Ignore  the
       troff  requests  .so  and  .nx.   By  default, spell (like
       deroff) follows chains  of  included  files.   Follow  the
       chains  of  all  included  files.  By default, spell (like
       deroff) follows chains of  included  files  (.so  and  .nx
       troff  requests),  unless the names of such included files
       begin with /usr/lib.   All  words  not  literally  in  the
       spelling  list are printed, and plausible derivations from
       the words in the spelling list are indicated.  Every plau-
       sible  stem  is  displayed, one per line, with = preceding
       each word.  Words found in  local_file  are  removed  from
       spell's output.  local_file is the name of a user-provided
       file that contains a sorted list of words, one  per  line.
       The  list  must  be  sorted with the ordering used by (for
       example, upper case preceding lower case).  If this order-
       ing  is  not  followed,  some entries in local_file may be
       ignored.  With this option, the user can specify a set  of
       words  that  are correct spellings (in addition to spell's
       own spelling list) for each job.

       The spelling list is based on many sources, and while more
       haphazard than an ordinary dictionary, is also more effec-
       tive with respect to proper names  and  popular  technical
       words.   Coverage of the specialized vocabularies of biol-
       ogy, medicine, and chemistry is light.

       Alternate auxiliary files (spelling lists, stop list, his-
       tory  file)  may be specified on the command line by using
       environment variables.  These variables and their  default

                                                                1

spell(1)                                                 spell(1)

       settings  are  shown  in the Files section.  Copies of all
       misspellings and entries that specify the login, tty,  and
       time  of  each  invocation of spell are accumulated in the
       history file.  The stop list filters out misspellings (for
       example, thier=thy-y+ier) that would otherwise pass.

       The  following  routines  help maintain and check the hash
       lists used by spell: Reads a list of words from the  stan-
       dard  input  and  writes the corresponding nine-digit hash
       code on the standard output.  This is the  first  step  in
       creating  a new spelling list or adding words to an exist-
       ing list; it must be used prior to using spellin.  Reads n
       hash  codes  (created by hashmake) from the standard input
       and writes a compressed spelling list on the standard out-
       put.   The  hash  codes  must  be  sorted  before input to
       spellin.  Use spellin to add words to an existing spelling
       list  or  create  a new spelling list.  Reads a compressed
       spelling_list and recreates the nine-digit hash codes  for
       all the words in it; it writes these codes on the standard
       output.  It takes  as  input  an  existing  spelling  list
       (hlista  or  hlistb)  or  a  list  created  or modified by
       spellin.  By using hashcheck  on  an  existing  compressed
       spelling_list  and  hashmake  on a file of selected words,
       you can compare the two output files to determine  if  the
       selected  words are present in the existing spelling_list.
       When spell is executed, the misspelled words are added  to
       a  file called spellhist.  This file may contain identical
       entries since the same word may be misspelled during  dif-
       ferent  executions of spell.  The compress program deletes
       redundant misspelled words in the spellhist file,  thereby
       reducing  the  size  of the file, making it easier to ana-
       lyze.

   FFiilleess
       hashed spelling lists, American & British hashed stop list
       history file program

RReeffeerreenncceess
NNoottiicceess
       The  spelling list's coverage is uneven; new installations
       will probably wish  to  monitor  the  output  for  several
       months  to  gather  local additions.  Typically, these are
       kept in a separate local file that is added to the  hashed
       spelling_list via spellin.

                                                                2

