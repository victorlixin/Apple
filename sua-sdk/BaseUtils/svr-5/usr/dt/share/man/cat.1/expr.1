

expr(1)                                                   expr(1)

SSyynnooppssiiss
       expr arguments

DDeessccrriippttiioonn
       The  arguments  are taken as an expression.  After evalua-
       tion, the result is written on the standard output.  Terms
       of the expression must be separated by blanks.  Characters
       special to the shell must be  escaped.   Note  that  0  is
       returned  to  indicate  a zero value, rather than the null
       string.  Strings containing blanks or other special  char-
       acters  should be quoted.  Integer-valued arguments may be
       preceded by a unary minus sign.  Internally, integers  are
       treated  as  32-bit, 2s complement numbers.  The length of
       the expression is limited to 512 characters.   Expressions
       may be grouped using (escaped) parentheses.

       The  operators  and keywords are listed below.  Characters
       that need to be escaped in the shell (see are preceded  by
       \.   The  list  is in order of increasing precedence, with
       equal precedence  operators  grouped  within  {}  symbols.
       Return  the first expr if it is neither null nor 0, other-
       wise return the second expr.  Return  the  first  expr  if
       neither expr is null or 0, otherwise return 0.  Return the
       result of an integer  comparison  if  both  arguments  are
       integers, otherwise return the result of a lexical compar-
       ison.  Add or subtract integer-valued  arguments.   Multi-
       ply,  divide, or compute remainder of integer-valued argu-
       ments.  Compare the first argument with the  second  argu-
       ment, which must be a regular expression.  Regular expres-
       sion syntax is the same as that of except  that  all  pat-
       terns are ``anchored'' (that is, begin with ^) and, there-
       fore, ^ is not a special character, in that context.  Nor-
       mally, the matching operator returns the number of charac-
       ters matched (0 on failure).  Alternatively, the \( . .  .
       \)  pattern symbols can be used to return a portion of the
       first argument.  Return the length of string.  Return  the
       portion  of  string  composed  of at most count characters
       starting at the character position of string as  expressed
       by  index (where the first character of string is index 1,
       not 0).  Return the index of the first character in string
       that  is  also  in  character_sequence or 0 to indicate no
       match.

       expr processes supplementary code set characters according
       to  the locale specified in the LC_CTYPE environment vari-
       able (see LANG on In regular expressions, pattern searches
       are  performed  on  characters, not bytes, as described on
       String comparisons are  affected  by  the  LC_COLLATE  and
       LC_CTYPE environment variables (see LANG on

   EErrrroorrss
       As  a  side  effect of expression evaluation, expr returns
       the following exit values: The expression is neither  null
       nor  0.   The  expression  is null or 0.  An expression is

                                                                1

expr(1)                                                   expr(1)

       invalid.  arithmetic attempted on a non-numeric string

FFiilleess
       language-specific message file (See LANG on

UUssaaggee
   EExxaammpplleess
       Add 1 to the shell variable a: a=`expr $a + 1`

       The following example emulates it returns the last segment
       of the path name $a.  For $a equal to either /usr/abc/file
       or just file, the example returns file.  The // characters
       eliminate any ambiguity about the division operator.  expr
       //$a : '.*/\(.*\)'

NNoottiicceess
       After argument processing by the shell, expr  cannot  tell
       the  difference  between an operator and an operand except
       by the value.  If $a is an =, the command: expr $a  =  '='
       looks like: expr = = = as the arguments are passed to expr
       (and they are all taken as the = operator).  The following
       works: expr X$a = X=

                                                                2

