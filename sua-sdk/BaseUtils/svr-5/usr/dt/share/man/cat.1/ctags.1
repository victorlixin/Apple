

ctags(1)                                                 ctags(1)

SSyynnooppssiiss
       ctags [-aBFtuvwx] [-f tagsfile] file ...

DDeessccrriippttiioonn
       ctags  makes a tags file for from the specified C, Pascal,
       FORTRAN, YACC, and LEX sources.  A  tags  file  gives  the
       locations of specified objects (in this case functions and
       typedefs) in a group of files.  Each line of the tags file
       contains the object name, the file in which it is defined,
       and an address specification for  the  object  definition.
       Functions  are  searched  with  a pattern, typedefs with a
       line number.  Specifiers are given in separate  fields  on
       the line, separated by

       or

       characters.   Using  the  tags  file,  ex can quickly find
       these objects definitions.

       Normally ctags places  the  tag  descriptions  in  a  file
       called tags; this may be overridden with the -f option.

       Files  with  names  ending in .c or .h are assumed to be C
       source files and are searched for C routine and macro def-
       initions.  Files with names ending in .y are assumed to be
       YACC source files.  Files with  names  ending  in  .l  are
       assumed to be LEX files.  Others are first examined to see
       if they contain any Pascal or FORTRAN routine definitions;
       if  not,  they  are  processed again looking for C defini-
       tions.

       The tag main is treated specially in C programs.  The  tag
       formed is created by prepending M to file, with a trailing
       .c removed, if any, and leading pathname  components  also
       removed.  This makes use of ctags practical in directories
       with more than one program.

       The following options are available: Append output  to  an
       existing  tags file.  Use backward searching patterns (? .
       . . ?).  Use forward  searching  patterns  (/  .  .  .  /)
       (default).   Create  tags for typedefs.  Update the speci-
       fied files in tags, that is, all references  to  them  are
       deleted,  and  the  new  values  are appended to the file.
       Beware: this option is  implemented  in  a  way  which  is
       rather  slow;  it  is usually faster to simply rebuild the
       tags file.  Produce on the standard output an index  list-
       ing  the function name, file name, and page number (assum-
       ing 64 line pages).  Since the output will be sorted  into
       lexicographic  order,  it may be desired to run the output
       through sort -f.  Suppress warning diagnostics.  Produce a
       list  of  object  names,  the line number and file name on
       which each is defined, as well as the text  of  that  line
       and  prints this on the standard output.  This is a simple
       index which can be printed out  as  an  off-line  readable

                                                                1

ctags(1)                                                 ctags(1)

       function index.

FFiilleess
       output tags file

RReeffeerreenncceess
NNoottiicceess
       Recognition  of  functions, subroutines and procedures for
       FORTRAN and Pascal is done in a  very  simple-minded  way.
       No  attempt  is  made to deal with block structure; if you
       have two Pascal procedures in different  blocks  with  the
       same name you lose.

       The method of deciding whether to look for C or Pascal and
       FORTRAN functions is a hack.

       ctags does not know about #ifdefs.

       ctags should know about Pascal types.  Relies on the input
       being  well  formed  to detect typedefs.  Use of -tx shows
       only the last line of typedefs.

                                                                2

