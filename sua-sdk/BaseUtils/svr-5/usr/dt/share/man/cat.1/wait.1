

wait(1)                                                   wait(1)

SSyynnooppssiiss
       /usr/bin/wait [pid . . .]

DDeessccrriippttiioonn
       This shell script executes the builtin command of the same
       name as implemented by the  /u95/bin/sh  shell.   See  for
       more information on this shell.

       Wait  for  your background processes whose process IDs are
       the values of pid and report termination status.  Any  pid
       which represents an unknown process ID is treated as if it
       were a known process ID that exited with exit status  127.

       If pid is omitted, all your shell's currently active back-
       ground processes are waited for.

       The shell itself executes wait,  without  creating  a  new
       process.

EExxiitt ssttaattuuss
       wait exits with an exit status determined as follows.

       If wait is invoked with one or more pid arguments, and the
       processes of all the given pids have terminated or are not
       known  to  the  invoking shell, and the status of the last
       pid is known, then the exit status is  that  of  the  last
       pid.

       If wait terminated abnormally due to the receipt of a sig-
       nal, the exit status is greater than 128.

       Otherwise, wait exits with one of  the  following  values:
       wait  was  invoked  with  no  operands and all process IDs
       known  by  the  invoking  shell  have  terminated.    wait
       detected an error.  The process identified by the last pid
       operand given is unknown.

FFiilleess
       language-specific message file. (See LANG on

RReeffeerreenncceess
NNoottiicceess
       If you get the error message cannot fork,  too  many  pro-
       cesses,  try using the wait command to clean up your back-
       ground processes.  If this doesn't help, the  system  pro-
       cess  table  is  probably full or you have too many active
       foreground processes.  (There is a limit to the number  of
       process  ids associated with your login, and to the number
       the system can keep track of.)

       Not all the processes of a 3- or more-stage  pipeline  are
       children of the shell, and thus cannot be waited for.

       If   pid  is  not  an  active  process  id,  wait  returns

                                                                1

wait(1)                                                   wait(1)

       immediately.

                                                                2

