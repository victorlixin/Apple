

command(1)                                             command(1)

SSyynnooppssiiss
       /usr/bin/command [-p] command_name [argument ...]

       /usr/bin/command [-v | -V] command_name

DDeessccrriippttiioonn
       This shell script executes the builtin command of the same
       name as implemented by the  /u95/bin/sh  shell.   See  for
       more information on this shell.

       The  command  command  causes the shell to treat the given
       command_name as a simple command,  suppressing  the  shell
       function lookup that is described on the manual page.

       If  the command_name is the same as the name of one of the
       shell's special built-in utilities, the special properties
       in the enumerated list at the beginning of will not occur.
       In every other respect, if command_name is not the name of
       a  shell  function, the effect of the command line will be
       the same as if the  command_name  were  specified  without
       command.

       The  command  utility also provides information concerning
       how a command name will be interpreted by the  shell;  see
       ``Flags''.

   FFllaaggss
       The  following  options are supported: Perform the command
       search using a default value for PATH that  is  guaranteed
       to  find all of the standard utilities.  Write a string to
       standard output that indicates  the  pathname  or  command
       that  will be used by the shell, in the current shell exe-
       cution environment (see to invoke command_name.

       Utilities,  regular  built-in   utilities,   command_names
       including  a  slash character, and any implementation-pro-
       vided functions that are found using  the  PATH  variable,
       will be written as absolute pathnames.

       Shell   functions,  special  built-in  utilities,  regular
       built-in utilities not associated with a PATH search,  and
       shell  reserved words will be written as just their names.

       An alias will be written as a command line that represents
       its  alias definition.  Otherwise, no output will be writ-
       ten and the exit status will reflect that the name was not
       found.   Write  a string to standard output that indicates
       how the name given in the  command_name  operand  will  be
       interpreted  by  the shell, in the current shell execution
       environment.  This string indicates in which of  the  fol-
       lowing  categories  command_name  falls  and  include  the
       information stated:

       Utilities,   regular   built-in   utilities,    and    any

                                                                1

command(1)                                             command(1)

       implementation-provided functions that are found using the
       PATH variable, will be identified as such and include  the
       absolute pathname in the string.

       Other shell functions will be identified as functions.

       Aliases  will  be  identified as aliases and their defini-
       tions will be included in the string.

       Special built-in utilities will be identified  as  special
       built-in  utilities.  Regular built-in utilities not asso-
       ciated with a PATH search will be  identified  as  regular
       built-in utilities.

       Shell reserved words will be identified as reserved words.

   OOppeerraannddss
       The following operands are supported: One of  the  strings
       treated  as  an  argument  to command_name.  The name of a
       simple command or a special built-in command.

   EEnnvviirroonnmmeenntt vvaarriiaabblleess
       The following environment variables affect  the  execution
       of command: Provide a default value for the international-
       ization variables that are unset  or  null.   If  LANG  is
       unset  or null, the corresponding value from the implemen-
       tation-specific default locale will be used.   If  any  of
       the  internationalisation  variables  contains  an invalid
       setting, the utility will behave as if none of  the  vari-
       ables  had  been  defined.   If  set to a non-empty string
       value, override the values of all the other international-
       isation variables.  Determine the locale for the interpre-
       tation of sequences of bytes of text  data  as  characters
       (for  example, single- as opposed to multi-byte characters
       in arguments).  Determine the locale that should  be  used
       to  affect  the format and contents of diagnostic messages
       written to standard error and informative messages written
       to standard output.  Determine the search path used during
       the command search,  except  as  described  under  the  -p
       option.

EExxiitt ccooddeess
       When  the -v or -V options are specified, an exit value of
       0 indicates successful completion; a return value  greater
       than  0 indicates that the command_name could not be found
       or an error occurred.

       In  all  other  cases,  the  following  exit  values   are
       returned:  The utility specified by command_name was found
       but could not be invoked.  An error occurred in  the  com-
       mand  utility  or  the  utility  specified by command_name
       could not be found.

       If there is no error  in  the  command  utility,  and  the

                                                                2

command(1)                                             command(1)

       command_name  utility is found and executed, the exit sta-
       tus of command is that of the command_name specified.

DDiiaaggnnoossttiiccss
       The and utilities use exit code 127 if an error occurs  so
       that  applications  can  distinguish  ``failure  to find a
       utility'' from ``invoked  utility  exited  with  an  error
       indication''.   The value 127 was chosen because it is not
       commonly used for other meanings; most utilities use small
       values  for  ``normal  error  conditions''  and the values
       above 128 can be confused with termination due to  receipt
       of a signal.

       The  value  126 was chosen in a similar manner to indicate
       that the utility could be found, but not invoked.

       The distinction between exit codes 126 and 127 is based on
       KornShell practice that uses 127 when all attempts to exec
       the utility fail  with  ENOENT,  and  uses  126  when  any
       attempt to exec the utility fails for any other reason.

UUssaaggee
       The  order for command search allows functions to override
       regular built-ins and path searches.  This utility is nec-
       essary  to  allow  functions  that have the same name as a
       utility to call the utility (instead of a  recursive  call
       to  the  function).   The system default path is available
       using however, since getconf may need to have the PATH set
       up  before  it  can be called itself, the following can be
       used: command -p getconf _CS_PATH There  are  some  advan-
       tages  to  suppressing the special characteristics of spe-
       cial built-ins on occasion. For example:  command  exec  >
       unwritable-file will not cause a non-interactive script to
       abort, so that the output status can  be  checked  by  the
       script.

       Since  the  -v and -V options of command produce output in
       relation to the current shell  execution  environment,  if
       command is called in a subshell or separate utility execu-
       tion environment, such as one of the following:  (PATH=foo
       command  -v) nohup command -v it will not necessarily pro-
       duce correct results.  For example, when called with nohup
       or an exec function, in a separate utility execution envi-
       ronment, most implementations will not be able to identify
       aliases, functions or special built-ins.

       Two  types  of regular built-ins could be encountered on a
       system and these are described separately by command.   If
       a  standard  utility  is implemented as a regular built-in
       (such as  true),  the  command:  command  -v  true  yields
       /bin/true  as  its  output.  Other implementation-provided
       utilities that exist only as built-ins and have  no  path-
       name  associated  with  them  produce output identified as
       (regular) built-ins.  Applications encountering these will

                                                                3

command(1)                                             command(1)

       not  be  able  to  count  on execing them, using them with
       nohup, overriding them  with  a  different  PATH,  and  so
       forth.

EExxaammpplleess
       Make  a version of cd that always prints out the new work-
       ing directory  exactly  once:  cd()  {   command  cd  "$@"
       >/dev/null  pwd }

       Start  off  a  ``secure shell script'' in which the script
       avoids being spoofed by its  parent:  #  Set  IFS  to  its
       default  value.   IFS='  ' # The preceding value should be
       <space><tab><newline>.  # Unset all possible aliases.  ias
       -a  #  Note  that unalias is escaped to prevent an alias #
       being used for unalias.  # Ensure command is  not  a  user
       function.   unset -f command # Put on a reliable PATH pre-
       fix.   PATH="$(command  -p  getconf   _CS_PATH):$PATH"   #
       Remainder  of script follows.  . . .  At this point, given
       correct permissions on the directories called by PATH, the
       script has the ability to ensure that any utility it calls
       is the intended one.  It is being very cautious because it
       assumes that implementation extensions may be present that
       would allow user functions to exist when  it  is  invoked.
       For  example,  the ENV variable precedes the invocation of
       the script with a user  startup  script.   Such  a  script
       could define functions to spoof the application.

RReeffeerreenncceess

                                                                4

