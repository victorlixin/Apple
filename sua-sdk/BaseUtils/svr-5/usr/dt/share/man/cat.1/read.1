

read(1)                                                   read(1)

SSyynnooppssiiss
       /usr/bin/read [-r] var ...

DDeessccrriippttiioonn
       This shell script executes the builtin command of the same
       name as implemented by the shell.  See for  more  informa-
       tion on this shell.

       The  read command reads a single line from standard input.
       By default, unless the -r option is  specified,  backslash
       (\)  acts  as an escape character.  If standard input is a
       terminal device and the  invoking  shell  is  interactive,
       read  will  prompt for a continuation line when: The shell
       reads an input line ending with a backslash, unless the -r
       option  is  specified.   A here-document is not terminated
       after a newline character is entered.

       The line will be split into fields as in the  shell.   The
       first  field will be assigned to the first variable (var),
       the second field to the second variable, and so forth.  If
       there  are  fewer  var  operands  specified than there are
       fields, the leftover fields and their intervening  separa-
       tors will be assigned to the last var.  If there are fewer
       fields than var operands, the remaining var operands  will
       be  set to empty strings.  The setting of variables speci-
       fied by the var operands will  affect  the  current  shell
       execution  environment.   If it is called in a subshell or
       separate utility execution environment, such as one of the
       following:  (read  foo)  nohup read ...  find . -exec read
       ... ; it will  not  affect  the  shell  variables  in  the
       caller's environment.

   FFllaaggss
       Do  not  treat  a  backslash character in any special way.
       Consider each backslash to be part of the input line.

   OOppeerraannddss
       The name of an existing or non-existing shell variable.

   IInnppuutt
       The standard input must be a text file.

   EEnnvviirroonnmmeenntt vvaarriiaabblleess
       The following environment variables affect  the  execution
       of  read:  Determine the internal field separators used to
       delimit fields. See Provide a default value for the inter-
       nationalization variables that are unset or null.  If LANG
       is unset or null, the corresponding value from the  imple-
       mentation-specific default locale will be used.  If any of
       the internationalization  variables  contains  an  invalid
       setting,  the  utility will behave as if none of the vari-
       ables had been defined.  If  set  to  a  non-empty  string
       value, override the values of all the other international-
       ization  variables.   Determine   the   locale   for   the

                                                                1

read(1)                                                   read(1)

       interpretation of sequences of bytes of text data as char-
       acters (for example,  single-  as  opposed  to  multi-byte
       characters  in  arguments).   Determine  the  locale  that
       should be used to affect the format and contents of  diag-
       nostic  messages  written  to standard error.  Provide the
       prompt string that an  interactive  shell  will  write  to
       standard error when a line ending with a backslash is read
       and the -r option was not specified, or if a here-document
       is not terminated after a newline character is entered.

   EExxiitt ccooddeess
       An  exit  code  of  0 indicates successful completion;  an
       exit code greater than 0 indicates either that the end-of-
       file was detected or an error occurred.

   DDiiaaggnnoossttiiccss
       Standard error is used for diagnostic messages and prompts
       for continued input.

UUssaaggee
       The results are undefined if an  end-of-file  is  detected
       following  a backslash at the end of a line when -r is not
       specified.

   EExxaammpplleess
       The following shell command: while read -r xx yy do printf
       "%s %s\n" "$yy" "$xx" done < input_file prints a file with
       the first field of each line moved to the end of the line.

RReeffeerreenncceess

                                                                2

