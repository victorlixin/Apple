

test(1)                                                   test(1)

SSyynnooppssiiss
       test expr
       [ expr ]

DDeessccrriippttiioonn
       test  evaluates  the  expression expr and, if its value is
       true, sets a zero (true) exit status;  otherwise,  a  non-
       zero (false) exit status is set; test also sets a non-zero
       exit status if there are no arguments.   When  permissions
       are  tested, the effective user ID of the process is used.
       test processes supplementary code set characters  in  expr
       according to the locale specified in the LC_CTYPE environ-
       ment variable [see LANG on

       All operators, flags, and brackets (brackets used as shown
       in the second Synopsis line) must be separate arguments to
       the test command; normally these items  are  separated  by
       spaces.

       The following primitives are used to construct expr.  Most
       of these primitives perform  unary  operations:  that  is,
       they  take  only  one argument.  If more than one argument
       follows any of the r, w, x, f, d, h, c, b, p, u, g, k,  s,
       t, z, or n operators, only the first argument is examined;
       the others are ignored (unless a -a or a -o is the  second
       argument).   true if file exists and is readable.  true if
       file exists and is writable.  true if file exists  and  is
       executable.   true  if  file exists and is a regular file.
       Alternatively,  if  /usr/bin/sh  users  specify   /usr/ucb
       before  /usr/bin  in their PATH environment variable, then
       test will return true if file exists and is not  a  direc-
       tory.   This  is  also the default for /usr/bin/csh users.
       true if file exists and is  a  directory.   true  if  file
       exists  and  is a symbolic link. With all other primitives
       (except -L file),  the  symbolic  links  are  followed  by
       default.   true  if file exists and is a character special
       file.  true if file exists and is a  block  special  file.
       true  if  file exists and is a named pipe (fifo).  true if
       file exists and its set-user-ID bit is set.  true if  file
       exists  and  its  set-group-ID  bit  is set.  true if file
       exists and its sticky bit is set.  true if file exists and
       has a size greater than zero.  true if the open file whose
       file descriptor number is fildes (1 by default) is associ-
       ated with a terminal device.  true if the length of string
       s1 is zero.  true if the length of the string s1  is  non-
       zero.   true  if strings s1 and s2 are identical.  true if
       strings s1 and s2 are not identical.  true if  s1  is  not
       the null string.  true if the integers n1 and n2 are alge-
       braically equal.  Any of the comparisons  -ne,  -gt,  -ge,
       -lt,  and  -le  may be used in place of -eq.  true if file
       exists and is a symbolic link. With all  other  primitives
       (except  -h  file),  the  symbolic  links  are followed by
       default.

                                                                1

test(1)                                                   test(1)

       These primaries may be combined with the following  opera-
       tors:  unary  negation  operator.   binary  and  operator.
       binary or operator (-a has  higher  precedence  than  -o).
       parentheses  for  grouping.   Notice also that parentheses
       are meaningful  to  the  shell  and,  therefore,  must  be
       quoted.

FFiilleess
       language-specific message file [See LANG on

RReeffeerreenncceess
NNoottiicceess
       The  not-a-directory  alternative  to  the  -f option is a
       transition aid for applications and may not  be  supported
       in future releases.

       The -L option is a migration aid for users of other shells
       which have similar options and may  not  be  supported  in
       future releases.

       If  you test a file you own (the -r, -w, or -x tests), but
       the permission tested does not have the owner bit  set,  a
       non-zero  (false) exit status will be returned even though
       the file may have the group or other bit set for that per-
       mission.  The correct exit status will be set if you are a
       privileged user.

       The = and != operators have a higher precedence  than  the
       -r  through -n operators, and = and != always expect argu-
       ments; therefore, = and != cannot  be  used  with  the  -r
       through -n operators.

                                                                2

