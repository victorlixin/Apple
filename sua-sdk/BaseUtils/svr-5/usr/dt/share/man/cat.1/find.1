

find(1)                                                   find(1)

SSyynnooppssiiss
       find [path-list] [predicate-list]

DDeessccrriippttiioonn
       find recursively descends the directory hierarchy for each
       pathname in the path-list (that is, one or more pathnames)
       seeking  files  that  match  a  predicate-list,  a boolean
       expression written in the primaries given below.

       The default path-list is ``.'' (the current directory).

       find processes supplementary code set characters, and rec-
       ognizes supplementary code set characters in path-list and
       as described below, according to the locale  specified  in
       the LC_CTYPE environment variable (see LANG on

       find  performs  pattern searches on characters, not bytes.
       In the descriptions, the argument n is used as  a  decimal
       integer  where  +n means more than n, -n means less than n
       and n means exactly n.  Valid expressions  in  the  predi-
       cate-list  are:  Always  true; causes find to exit immedi-
       ately with the current exit value. This  can  be  used  to
       preempt  the  default  -print expression.  True if pattern
       matches the current filename.  Normal shell filename  gen-
       eration  characters  (see may be used.  A backslash (\) is
       used as an escape character within the pattern.  The  pat-
       tern should be escaped or quoted when find is invoked from
       the shell.  pattern may  contain  supplementary  code  set
       characters.  Note: a slash (/) can be used in pattern, but
       it will not match any particular filename.   True  if  the
       file  permission flags exactly match the octal number onum
       (see If onum is prefixed by a minus  sign  (-),  only  the
       bits  that are set in onum are compared with the file per-
       mission flags, and the expression evaluates true  if  they
       match.   True if the file's Mandatory Access Control (MAC)
       level exactly matches (=), dominates (+), or is  dominated
       by  (-)  a  given  level.  The level can be specified as a
       fully qualified level, alias name, or a  level  identifier
       (LID) (see This option is valid only if the Enhanced Secu-
       rity Utilities are installed.  The mode argument  is  used
       to  represent  file  mode bits. Its format is identical to
       the chmod symbolic_mode operand and is interpreted in  the
       following manner.

       A template is assumed, with all file mode bits cleared. An
       op symbol of + sets the appropriate mode bits in the  tem-
       plate;  -  clears  the  appropriate  bits;  and = sets the
       appropriate mode bits, without regard to the  contents  of
       the  process's file mode creation mask. The op symbol of -
       can't be the first character of mode.

       If the hyphen is omitted, the primary  evaluates  as  true
       when  the  file  permission  bits  match  the value of the
       resulting template  exactly.  Otherwise,  if  mode  has  a

                                                                1

find(1)                                                   find(1)

       hyphen  prefix,  the primary evaluates as true if at least
       all the bits in the resulting template are set in the file
       permission  bits.   True if the file is n blocks long (512
       bytes per block).  If n is followed by a c, the size is in
       bytes.   True  if the file access time subtracted from the
       initialization time is n-1 to n multiples of 24 hours. The
       initialization  time is the time between the invocation of
       the find utility and the first access by  that  invocation
       to  any file file specified by its path operands.  True if
       the file modification time subtracted from the initializa-
       tion  time is n-1 to n multiples of 24 hours. The initial-
       ization time is the time between  the  invocation  of  the
       find  utility  and  the first access by that invocation to
       any file file specified by its path operands.  True if the
       time  of last change of file status information subtracted
       from the initialization time is n-1 to n multiples  of  24
       hours.   The  initialization  time is the time between the
       invocation of the find utility and  the  first  access  by
       that  invocation  to  any  file file specified by its path
       operands.  True if the executed cmd returns a  zero  value
       as  exit status.  A command argument {} is replaced by the
       current pathname.  The end of cmd must be punctuated by an
       escaped semicolon or a plus sign (+).  When a plus sign is
       used, cmd aggregates a set of pathnames  and  executes  on
       the  set;  when  a  semicolon is used, cmd executes on one
       pathname at a time.  The reason  for  preferring  +  to  a
       semicolon is vastly improved performance.  cmd may contain
       supplementary code set characters.

       You can prepend the cmd with tfadmin if you need  to  pass
       privileges  to the cmd. This assumes that an entry for you
       in the tfadmin database has been previously defined.   The
       super-user  will  execute  the  cmd  with  all privileges;
       prepending the tfadmin is  not  necessary  in  this  case.
       Like  -exec  except  that  the  generated  command line is
       printed with a question mark first.  This is a prompt  for
       confirmation.   It is executed if the response is affirma-
       tive. The form  of  the  affirmative  response  is  locale
       dependent: y in the C locale. (See LANG on cmd may contain
       supplementary code set characters.   Always  true;  causes
       the  current  pathname to be printed.  True if the current
       file has been modified more  recently  than  the  argument
       file.   Always true; causes descent of the directory hier-
       archy to be done so that all entries in  a  directory  are
       acted  on before the directory itself.  This can be useful
       when find is used with to transfer  files  that  are  con-
       tained  in  directories  without write permission.  Always
       true; restricts the search to the file  system  containing
       the  directory  specified.   True  if  the file physically
       resides on the local system.  This does not  restrict  the
       search  to only files which physically reside on the local
       system, it merely matches such files.   See  ``Examples''.
       True  if you restrict your search to the root file system.
       If you do not specify argument list, the  search  will  be

                                                                2

find(1)                                                   find(1)

       made for every file on local and remote networks.  True if
       the parenthesized expression is true.  True  if  the  file
       type corresponds to the specified type: block special file
       character special file  directory  regular  file  symbolic
       link  fifo  (named pipe) socket file Causes symbolic links
       to be followed.  When following symbolic links, find keeps
       track  of  the  directories  visited so that it can detect
       infinite loops; for example, such a loop would occur if  a
       symbolic  link  pointed  to  an ancestor.  This expression
       should not be used with the -type l expression.   True  if
       the  file  has  n  links.  True if the file belongs to the
       user uname.  If uname is numeric and does not appear as  a
       login  name in the /etc/passwd file, it is taken as a user
       ID.  True if the  file  belongs  to  a  user  not  in  the
       /etc/passwd  file.   True if the file belongs to the group
       gname.  If gname is numeric and does  not  appear  in  the
       /etc/group  file,  it is taken as a group ID.  True if the
       file belongs to a group not in the /etc/group file.   True
       if  the  file  system to which the file belongs is of type
       type.  True if the file has inode number n.  Always yields
       true.   Do  not  examine  any  directories or files in the
       directory structure below  the  expression  just  matched.
       See ``Examples''.

       The  primaries  may be combined using the following opera-
       tors (in order of decreasing precedence): The negation  of
       a  primary  (!  is the unary not operator).  Concatenation
       of primaries (the and operation is implied by the juxtapo-
       sition of two primaries).  Alternation of primaries (-o is
       the or operator).  Note that when you use find in conjunc-
       tion  with  cpio,  if you use the -L option with cpio then
       you must use the -follow expression  with  find  and  vice
       versa.  Otherwise there will be undesirable results.

       If  no  predicate-list  is  present, -print is used as the
       expression.  Otherwise, if the given expression  does  not
       contain  any  of  the primaries -exec, -ok, or -print, the
       given expression can  be  replaced  by  (given_expression)
       -print.   The  -user,  -group,  and  -newer primaries each
       evaluate their respective arguments once.

FFiilleess
       language-specific message file (See LANG on

EExxaammpplleess
       Remove all files in your home directory named a.out or *.o
       that have not been accessed for a week:

       find  $HOME  \(  -name  a.out  -o -name '*.o' \) -atime +7
       -exec rm {} \;

       Recursively print all filenames in the  current  directory
       and  below,  but  skipping  SCCS directories: find . -name
       SCCS -prune -o -print

                                                                3

find(1)                                                   find(1)

       Recursively print all filenames in the  current  directory
       and  below, skipping the contents of SCCS directories, but
       printing out the SCCS directory name: find . -print  -name
       SCCS -prune

       Match  only local files, and don't examine the contents of
       any directory found to be  remotely  mounted:  find  /   !
       -local  -prune  -o  -size  +50 -print This only works cor-
       rectly if there are no local file systems mounted  on  top
       of  remote  directories. This example will print all local
       files on the system larger than 50 blocks, without wasting
       time accessing remote files.

       To  get  the  same effect, but to check for files in local
       file systems mounted on remote directories,  use:  find  /
       -local -size +50 -print

EExxiitt ccooddeess
       If  find  encounters  any errors in accessing operands, it
       returns non-zero.

RReeffeerreenncceess
NNoottiicceess
       When using find to determine files modified within a range
       of  time,  you  must  use  the  ?time arguments before the
       -print argument, or find will return all files.

       The following option is obsolete and will not be supported
       in  future  releases.  Always true; write the current file
       on device in format (5120-byte records).

       This command has been updated to handle files greater than
       2GB.

                                                                4

