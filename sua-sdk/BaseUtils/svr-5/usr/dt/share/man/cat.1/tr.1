

tr(1)                                                       tr(1)

SSyynnooppssiiss
       tr [-cs] string1 string2

       tr -s [-c] string1

       tr -d [-c] string1

       tr -ds [-c] string1 string2

DDeessccrriippttiioonn
       The  tr  utility copies the standard input to the standard
       output with substitution or deletion of  selected  charac-
       ters.

       The options specified and the string1 and string2 operands
       control translations that occur while  copying  characters
       and  single-character  collating  elements.   Searches and
       translations are performed on characters, not bytes.

   OOppttiioonnss
       Complement the set of characters specified by string1 with
       respect  to  the  universe of characters whose ASCII codes
       are 001 through 377 octal.   See  ``Usage''.   Delete  all
       occurrences  of  input  characters  that  are specified by
       string1.  Replace  instances  of  repeated  characters  in
       string2 with a single character as described in ``Usage''.

       The following operands are supported: Translation  control
       strings.  Each string represents a set of characters to be
       converted into an array of characters used for the  trans-
       lation.  For a detailed description of how the strings are
       interpreted, see ``Usage''.

       The following environment variables affect  the  execution
       of  tr:  Provide  a default value for internationalization
       variables that are unset or null.  If  LANG  is  unset  or
       null, the corresponding value from the implementation-spe-
       cific default locale will be used.  If any of the interna-
       tionalization  variables  contains an invalid setting, the
       utility will behave as if none of the variables  had  been
       defined.  If set to a non-empty string value, override the
       values of all the  other  internationalization  variables.
       Determine the locale for the behavior of range expressions
       and equivalence classes.  Determine  the  locale  for  the
       interpretation of sequences of bytes of text data as char-
       acters (for example, single- versus multi-byte  characters
       in  arguments)  and  the  behavior  of  character classes.
       Determine the locale that should be  used  to  affect  the
       format  and  contents  of  diagnostic  messages written to
       standard error.

UUssaaggee
       The operands string1 and string2 (if specified) define two
       arrays  of  characters.   The  constructs in the following

                                                                1

tr(1)                                                       tr(1)

       list can be used to specify characters or single-character
       collating  elements.   If  any of the constructs result in
       multi-character collating elements, tr will exclude, with-
       out  a diagnostic, those multi-character elements from the
       resulting array.  Any character not described  by  one  of
       the  conventions  below  represents itself.  An octal con-
       sists of a backslash (\) followed by a  sequence  of  one,
       two, or three octal digits (that is, the numerals 0, 1, 2,
       3, 4, 5, 6, and 7).  The  sequence  causes  the  character
       whose  ASCII  encoding is represented by the one-, two- or
       three-digit octal integer to be  placed  into  the  array.
       The backslash-escape sequences \\, \a, \b, \f, \n, \r, \t,
       \v are supported.  Any other character following the back-
       slash (other than an octal digit) represents itself.  Rep-
       resents the range of collating elements between the  range
       endpoints, inclusive, as defined by the current setting of
       the LC_COLLATE locale  category.   The  starting  endpoint
       must  precede the second endpoint in the current collation
       order.  The characters or collating elements in the  range
       are  placed  in the array in ascending collation sequence.
       If either endpoint is specified as an octal sequence,  the
       range is based on the encoded values of the endpoints, not
       the current collation order.  For  example,  [a-z]  stands
       for  the  string  of characters whose ASCII codes run from
       character a to character  z,  inclusive.   Represents  all
       characters  belonging  to  the defined character class, as
       defined by the current setting of the LC_CTYPE locale cat-
       egory.   The  following  character  class  names  will  be
       accepted when specified  in  string1:  alnum  blank  digit
       lower  punct upper alpha cntrl graph print space xdigit In
       addition, character class expressions of the form [:name:]
       are recognized in those locales where the name keyword has
       been given a charclass definition in  the  LC_CTYPE  cate-
       gory.

       When  both the -d and -s options are specified, any of the
       character class names will be accepted in string2.

       Otherwise, only character class names lower or  upper  are
       valid  in string2 and then only if the corresponding char-
       acter class (upper and lower, respectively)  is  specified
       in the same relative position in string1.  Such a specifi-
       cation is interpreted as a request  for  case  conversion.
       When [:lower:] appears in string1 and [:upper:] appears in
       string2, the arrays will contain the characters  from  the
       toupper  mapping  in  the LC_CTYPE category of the current
       locale.  When [:upper:] appears in string1  and  [:lower:]
       appears in string2, the arrays will contain the characters
       from the tolower mapping in the LC_CTYPE category  of  the
       current  locale.   The  first  character from each mapping
       pair will be in the array for string1 and the second char-
       acter  from  each  mapping  pair  will be in the array for
       string2 in the same relative position.

                                                                2

tr(1)                                                       tr(1)

       Except for case conversion, the characters specified by  a
       character  class  expression  are placed in the array in a
       random order.

       If the name specified for class does not  define  a  valid
       character  class  in  the current locale, an error occurs.
       Represents all characters or collating elements  belonging
       to  the same equivalence class as equiv, as defined by the
       current setting of the  LC_COLLATE  locale  category.   An
       equivalence  class  expression is allowed only in string1,
       or in string2 when it is being used by the combined -d and
       -s  options.   The characters belonging to the equivalence
       class are placed in the array  in  an  unspecified  order.
       Represents  n  repeated  occurrences  of  the character x.
       Because this expression is used to map multiple characters
       to  one, it is only valid when it occurs in string2.  If n
       is omitted or is zero, it is interpreted as  large  enough
       to  extend the string2-based sequence to the length of the
       string1-based sequence.  If n has a leading  zero,  it  is
       interpreted  as  an  octal value.  Otherwise, it is inter-
       preted as a decimal value.

       When the -d option is not specified: Each input  character
       found in the array specified by string1 is replaced by the
       character in the same relative position in the array spec-
       ified  by string2.  When the array specified by string2 is
       shorter that  the  one  specified  by  string1,  an  error
       occurs.  If the -c option is specified, the complements of
       the characters specified by string1 (the set of all  char-
       acters  in  the  current  character set, as defined by the
       current setting of LC_CTYPE,  except  for  those  actually
       specified in the string1 operand) are placed in the array.
       Because the order in which characters specified by charac-
       ter  class expressions or equivalence class expressions is
       undefined, such expressions should only  be  used  if  the
       intent  is  to map several characters into one.  An excep-
       tion is case conversion, as described previously.

       When the -d option is specified: Input characters found in
       the  array specified by string1 will be deleted.  When the
       -c option is specified  with  -d,  all  characters  except
       those  specified by string1 will be deleted.  The contents
       of string2 will be ignored, unless the -s option  is  also
       specified.  The same string cannot be used for both the -d
       and the -s option; when both options are  specified,  both
       string1  (used for deletion) and string2 (used for squeez-
       ing) are required.

       When the -s option is specified, after  any  deletions  or
       translations  have  taken place, repeated sequences of the
       same character will be replaced by one occurrence  of  the
       same  character,  if  the  character is found in the array
       specified by the last operand.  If the last  operand  con-
       tains a character class, such as the following example: tr

                                                                3

tr(1)                                                       tr(1)

       -s '[:space:]' the last operand's array will  contain  all
       of  the characters in that character class.  However, in a
       case conversion, as described previously, such as:  tr  -s
       '[:upper:]' '[:lower:]' the last operand's array will con-
       tain only those characters defined as the  second  charac-
       ters in each of the toupper or tolower character pairs, as
       appropriate.

       An empty string  used  for  string1  or  string2  produces
       results as described under ``Warnings''.

EExxaammpplleess
       The following example creates a list of all words in file1
       one per line in file2, where a word is taken to be a maxi-
       mal  string of letters.  tr -cs "[:alpha:]" "[\n*]" <file1
       >file2 The next example translates all lower-case  charac-
       ters  in  file1  to  upper-case  and writes the results to
       standard output.  tr "[:lower:]" "[:upper:]"  <file1  This
       case  conversion  is  now  a special case that employs the
       tolower and toupper classifications, ensuring that  proper
       mapping  is  accomplished  (when  the  locale is correctly
       defined).

       This  example  uses  an  equivalence  class  to   identify
       accented  variants of the base character e in file1, which
       are stripped of diacritical marks and written to file2: tr
       "[=e=]"  e  <file1  >file2  SH  "Warnings"  If  necessary,
       string1 and string2 can be quoted to avoid pattern  match-
       ing by the shell.

       If an ordinary digit (representing itself) is to follow an
       octal sequence, the octal sequence must use the full three
       digits to avoid ambiguity.

       It  should  be noted that, despite similarities in appear-
       ance, the string operands  used  by  tr  are  not  regular
       expressions.

       Unlike some earlier versions of this command, tr correctly
       processes NULL characters in its input stream.  NULL char-
       acters  can be stripped by using: tr -d ' 00' When string2
       is shorter than string1, The command will pad string2 with
       the last character found in string2.  Thus, it is possible
       to do the following: tr 0123456789 d which would translate
       all  digits  to  the letter d.  This is different from the
       traditional System V behavior, which does not pad string2.
       A  portable application cannot rely on this padding behav-
       ior, and so it would have to code the previous example  in
       the following way: tr 0123456789 '[d*]' The tr command now
       requires the dash (-) character to be escaped with a back-
       slash.

RReeffeerreenncceess

                                                                4

