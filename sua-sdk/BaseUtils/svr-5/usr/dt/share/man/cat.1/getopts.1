

getopts(1)                                             getopts(1)

SSyynnooppssiiss
       /usr/bin/getopts optstring name [arg ...]

DDeessccrriippttiioonn
       This shell script executes the builtin command of the same
       name as implemented by the shell.  See for  more  informa-
       tion on this shell.

       The  utility  can  be used to retrieve options and option-
       arguments from a list of parameters.

       Each time it is invoked, the utility places the  value  of
       the  next  option  in  the shell variable specified by the
       name operand and the index of the next argument to be pro-
       cessed  in  the shell variable OPTIND.  Whenever the shell
       is invoked, OPTIND is initialized to 1.  When  the  option
       requires  an option-argument, the utility will place it in
       the shell variable OPTARG.  If no option was found, or  if
       the  option  that  was found does not have an option-argu-
       ment, OPTARG will be unset.  If an  option  character  not
       contained  in  the  optstring  operand  is  found where an
       option character is expected, the shell variable specified
       by  name  will  be set to the question-mark (?) character.
       In this case, if the first character  in  optstring  is  a
       colon  (:), the shell variable OPTARG is set to the option
       character found, but no output will be written to standard
       error; otherwise, the shell variable OPTARG is unset and a
       diagnostic message will  be  written  to  standard  error.
       This  condition  is  considered to be an error detected in
       the way arguments were presented to the invoking  applica-
       tion, but is not an error in processing.

       If  an  option-argument is missing: If the first character
       of optstring is a colon, the shell variable  specified  by
       name is set to the colon (:) character and the shell vari-
       able OPTARG is set to the option character found.   Other-
       wise,  the  shell variable specified by name is set to the
       question-mark character,  the  shell  variable  OPTARG  is
       unset,  and  a  diagnostic  message is written to standard
       error.  This  condition  is  considered  to  be  an  error
       detected in the way arguments were presented to the invok-
       ing application, but is not  an  error  in  processing;  a
       diagnostic message will be written as stated, but the exit
       status will be zero.

       When the end of options is encountered, the  utility  will
       exit  with  a  return  value  greater than zero; the shell
       variable OPTIND is set to the  index  of  the  first  non-
       option-argument, where the first -- argument is considered
       to be an option-argument if there are no other non-option-
       arguments  appearing before it, or the value $#+1 if there
       are no non-option-arguments; the name variable is  set  to
       the question-mark character.

                                                                1

getopts(1)                                             getopts(1)

       Any  of  the  following identifies the end of options: the
       special option -- (two dashes with no  space)  finding  an
       argument  that does not begin with a - (dash) encountering
       an error

       The shell variables OPTIND and OPTARG  are  local  to  the
       caller of and are not exported by default.

       The  shell  variable specified by the name operand, OPTIND
       and OPTARG affect the current shell execution environment;
       see

       If  the  application sets OPTIND to the value 1, a new set
       of parameters can be used: either the  current  positional
       parameters or new arg values.  Any other attempt to invoke
       multiple times in a  single  shell  execution  environment
       with  parameters  (positional  parameters or arg operands)
       that are not the same  in  all  invocations,  or  with  an
       OPTIND value modified to be a value other than 1, produces
       an error.

OOppeerraannddss
       The following operands are supported: A string  containing
       the  option  characters recognised by the utility invoking
       getopts.  If a character  is  followed  by  a  colon,  the
       option  will be expected to have an argument, which should
       be supplied as a separate argument.   Applications  should
       specify  an  option  character  and its option-argument as
       separate arguments, but getopts interprets the  characters
       following  an  option  character requiring arguments as an
       argument whether or not this is done.   An  explicit  null
       option-argument  need  not be recognised if it is not sup-
       plied as a separate argument when getopts is invoked.  The
       characters  question  mark  (?)  and colon (:) must not be
       used as option  characters  by  an  application.   If  the
       option-argument  is  not  supplied  as a separate argument
       from the option character, the value in OPTARG is stripped
       of the option character and the dash (-).  The first char-
       acter in optstring determines how getopts  behaves  if  an
       option  character  is  not  known or an option-argument is
       missing.  The name of a shell variable that will be set by
       the  getopts  utility  to  the  option  character that was
       found.  The getopts utility by default  parses  positional
       parameters passed to the invoking shell procedure.  If arg
       parameters are given, they will be parsed instead  of  the
       positional parameters.

EEnnvviirroonnmmeenntt vvaarriiaabblleess
       The  following  environment variables affect the execution
       of getopts: Provide a default value for the international-
       ization  variables  that  are  unset  or null.  If LANG is
       unset or null, the corresponding value from the  implemen-
       tation-specific  default  locale  will be used.  If any of
       the internationalisation  variables  contains  an  invalid

                                                                2

getopts(1)                                             getopts(1)

       setting,  the  utility will behave as if none of the vari-
       ables had been defined.  If  set  to  a  non-empty  string
       value, override the values of all the other international-
       ization variables.  Determine the locale for the interpre-
       tation  of  sequences  of bytes of text data as characters
       (for example, single- as opposed to multi-byte  characters
       in  arguments and input files).  Determine the locale that
       should be used to affect the format and contents of  diag-
       nostic  messages written to standard error.  This variable
       will be used by the getopts utility as the  index  of  the
       next argument to be processed.

DDiiaaggnnoossttiiccss
       Whenever  an  error is detected and the first character in
       the optstring operand is not a  colon  (:),  a  diagnostic
       message will be written to standard error with the follow-
       ing information in an  unspecified  format:  The  invoking
       program  name  will  be  identified  in  the message.  The
       invoking program name will be the value of the shell  spe-
       cial  parameter  $0  at  the  time  the getopts utility is
       invoked.  A name equivalent to: basename "$0" is used.  If
       an  option  is  found that was not specified in optstring,
       this error will be identified and the invalid option char-
       acter  is identified in the message.  If an option requir-
       ing an option-argument is found, but an option-argument is
       not found, this error is identified and the invalid option
       character is identified in the message.

UUssaaggee
       Since getopts affects the current shell execution environ-
       ment,  it  is generally provided as a shell regular built-
       in.  If it is called in a  subshell  or  separate  utility
       execution  environment,  such  as  one  of  the following:
       (getopts abc value "$@") nohup getopts ...  find  .  -exec
       getopts  ...  ;  it will not affect the shell variables in
       the caller's environment.

       Note that shell functions share OPTIND  with  the  calling
       shell  even  though the positional parameters are changed.
       Functions that want to use getopts to  parse  their  argu-
       ments  will  usually  want  to save the value of OPTIND on
       entry and restore it  before  returning.   However,  there
       will  be  cases when a function will want to change OPTIND
       for the calling shell.

EExxaammpplleess
       The following example script parses and displays its argu-
       ments: aflag= bflag= while getopts ab: name do
         case $name in
           a) aflag=1;;
           b) bflag=1
              bval="$OPTARG";;
           ?) printf "Usage: %s: [-a] [-b value] args\n" $0
              exit 2;;

                                                                3

getopts(1)                                             getopts(1)

         esac done if [ ! -z "$aflag" ]; then
         printf  "Option -a specified\n" fi if [ ! -z "$bflag" ];
       then
         printf 'Option -b "%s"  specified\n'  "$bval"  fi  shift
       $(($OPTIND  -  1))  printf "Remaining arguments are: %s\n"
       "$*"

RReeffeerreenncceess

                                                                4

