

getopt(1)                                               getopt(1)

SSyynnooppssiiss
       set -- `getopt optstring $*`

DDeessccrriippttiioonn
       The  command  supersedes getopt.  See the ``Notices'' sec-
       tion for more information.

       getopt is used to break up options in  command  lines  for
       easy  parsing  by  shell procedures and to check for valid
       options.  It recognizes supplementary code set  characters
       in the argument given to optstring according to the locale
       specified in the LC_CTYPE environment variable  (see  LANG
       on

       optstring is a string of recognized option letters; see If
       a letter is followed by a colon, the option is expected to
       have  an argument that may or may not be separated from it
       by white space.  The special option -- is used to  delimit
       the  end of the options.  If it is used explicitly, getopt
       recognizes it; otherwise, getopt generates it;  in  either
       case,  getopt  places  it  at the end of the options.  The
       positional parameters ($1 $2 . . .  )  of  the  shell  are
       reset so that each option is preceded by a - and is in its
       own positional parameter; each  option  argument  is  also
       parsed into its own positional parameter.

   FFiilleess
       language-specific message file (See LANG on

   DDiiaaggnnoossttiiccss
       getopt  prints an error message on the standard error when
       it encounters an option letter not included in  optstring.

UUssaaggee
       Reset OPTIND to 1 when rescanning the options.

       getopt  does not support the part of Rule 8 of the command
       syntax standard (see that permits groups  of  option-argu-
       ments  following  an option to be separated by white space
       and quoted.  For example, cmd -a -b -o "xxx z yy" file  is
       not  handled  correctly.   To correct this deficiency, use
       the getopts command instead of getopt.

       If an option that takes an option-argument is followed  by
       a  value that is the same as an option listed in optstring
       (referring to the earlier ``Examples'' section, but  using
       the following command line: cmd -o -a file), getopt always
       treats -a as an option-argument to -o; it never recognizes
       -a as an option.  For this case, the for loop in the exam-
       ple shifts past the file argument.

   EExxaammpplleess
       The following code fragment shows how  you  might  process
       the arguments for a command that can take the options a or

                                                                1

getopt(1)                                               getopt(1)

       b, as well as the option o that requires an argument:  set
       --  `getopt  abo:  $*`  if [$? != 0] then      echo $USAGE
            exit 2 fi for i in $* do      case $i  in       -a  |
       -b)  FLAG=$i;   shift;;        -o)  OARG=$2;   shift   2;;
            --)  shift; break;;      esac done

       This code accepts any of the following as equivalent:  cmd
       -aoarg file file cmd -a -o arg file file cmd -oarg -a file
       file cmd -a -oarg -- file file

NNoottiicceess
   FFuuttuurree ddiirreeccttiioonnss
       getopt will not be supported in the  next  major  release.
       For  this  release  a  conversion  tool has been provided,
       getoptcvt.   For  more  information  about   getopts   and
       getoptcvt, see

RReeffeerreenncceess

                                                                2

