

dc(1)                                                       dc(1)

SSyynnooppssiiss
       dc [file]

DDeessccrriippttiioonn
       dc is an arbitrary precision arithmetic package.  Ordinar-
       ily it operates on decimal integers, but one  may  specify
       an  input  base,  output  base, and a number of fractional
       digits to be maintained.  (bc is  a  preprocessor  for  dc
       that  provides  infix  notation  and  a C-like syntax that
       implements functions.  bc also provides reasonable control
       structures  for programs.  See The overall structure of dc
       is a stacking (reverse Polish) calculator.  If an argument
       is  given,  input  is  taken from that file until its end,
       then from the standard input.  The following constructions
       are  recognized:  The value of the number is pushed on the
       stack.  A number is an unbroken string of the digits  0-9.
       It  may  be preceded by an underscore (_) to input a nega-
       tive number.  Numbers may contain decimal points.  The top
       two  values  on  the  stack are added (+), subtracted (-),
       multiplied (*), divided (/), remaindered (%), or  exponen-
       tiated (^).  The two entries are popped off the stack; the
       result is pushed on the stack in their place.   Any  frac-
       tional  part  of  an  exponent is ignored.  The top of the
       stack is popped and stored into a register named x,  where
       x  may  be  any  character.  If the s is capitalized, x is
       treated as a stack and the value is  pushed  on  it.   The
       value  in register x is pushed on the stack.  The register
       x is not altered.  All registers start  with  zero  value.
       If  the l is capitalized, register x is treated as a stack
       and its top value is popped onto the main stack.  The  top
       value  on  the  stack is duplicated.  The top value on the
       stack  is  printed.   The  top  value  remains  unchanged.
       Interprets  the  top  of  the  stack  as  an ASCII string,
       removes it, and prints it.  All values on  the  stack  are
       printed.   Exits  the program.  If executing a string, the
       recursion level is popped by two.  Exits the program.  The
       top  value on the stack is popped and the string execution
       level is popped by that value.  Treats the top element  of
       the  stack  as  a  character  string  and executes it as a
       string of dc commands.  Replaces the number on the top  of
       the stack with its scale factor.  Puts the bracketed ASCII
       string onto the top of the stack.  The top two elements of
       the  stack  are popped and compared.  Register x is evalu-
       ated if they obey the stated relation.  Replaces  the  top
       element  on  the  stack  by its square root.  Any existing
       fractional part of the argument is taken into account, but
       otherwise  the  scale  factor  is ignored.  Interprets the
       rest of the line as a UNIX system command.  All values  on
       the  stack  are  popped.   The  top  value on the stack is
       popped and used as the number  radix  for  further  input.
       Pushes  the  input  base on the top of the stack.  The top
       value on the stack is popped and used as the number  radix
       for  further output.  Pushes the output base on the top of
       the stack.  The top of the stack is popped, and that value

                                                                1

dc(1)                                                       dc(1)

       is  used  as  a non-negative scale factor: the appropriate
       number of places are printed  on  output,  and  maintained
       during  multiplication, division, and exponentiation.  The
       interaction of scale factor, input base, and  output  base
       will be reasonable if all are changed together.  The stack
       level is pushed onto the stack.  Replaces  the  number  on
       the  top of the stack with its length.  A line of input is
       taken from the input source  (usually  the  terminal)  and
       executed.  are used by for array operations.

EExxaammpplleess
       This   example   prints   the  first  ten  values  of  n!:
       [la1+dsa*pla10>y]sy 0sa1 lyx

RReeffeerreenncceess
DDiiaaggnnoossttiiccss
       x is unimplemented: x is an octal number.

       stack empty: not enough elements on the stack to  do  what
       was asked.

       Out  of  space:  the free list is exhausted (too many dig-
       its).

       Out of headers: too many numbers being kept around.

       Out of pushdown: too many items on the stack.

       Nesting Depth: too many levels of nested execution.

                                                                2

