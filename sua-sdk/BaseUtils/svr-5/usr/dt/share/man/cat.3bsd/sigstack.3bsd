

sigstack(3bsd)                                     sigstack(3bsd)

SSyynnooppssiiss
       /usr/ucb/cc [flag . . . ] file . . .

       #include <signal.h>

       int sigstack (struct sigstack *ss, struct sigstack *oss);

DDeessccrriippttiioonn
       sigstack allows users to define an alternate stack, called
       the ``signal stack,'' on which  signals  are  to  be  pro-
       cessed.   When  a  signal's  action  indicates its handler
       should execute on  the  signal  stack  (specified  with  a
       call),  the  system  checks  to see if the process is cur-
       rently executing on that stack.  If  the  process  is  not
       currently  executing  on  the  signal  stack,  the  system
       arranges a switch to the signal stack for the duration  of
       the signal handler's execution.

       A signal stack is specified by a sigstack structure, which
       includes          the          following          members:
       char *ss_sp;             /*   signal   stack   pointer  */
       int  ss_onstack;         /* current status */

       ss_sp is the initial value to be  assigned  to  the  stack
       pointer when the system switches the process to the signal
       stack.  Note that, on machines where the stack grows down-
       wards  in memory, this is not the address of the beginning
       of the signal stack area.  ss_onstack  field  is  zero  or
       non-zero  depending  on  whether  the process is currently
       executing on the signal stack or not.

       If ss is not a NULL  pointer,  sigstack  sets  the  signal
       stack state to the value in the sigstack structure pointed
       to by ss.  Note: if ss_onstack  is  non-zero,  the  system
       will  think  that  the  process is executing on the signal
       stack.  If ss is a NULL pointer, the  signal  stack  state
       will be unchanged.  If oss is not a NULL pointer, the cur-
       rent signal stack state is stored in the  sigstack  struc-
       ture pointed to by oss.

RReettuurrnn vvaalluueess
       Upon  successful  completion,  a  value  of 0 is returned.
       Otherwise, a value of -1 is returned and errno is  set  to
       indicate the error.

       sigstack  will  fail  and  the  signal  stack context will
       remain unchanged if one of the following  occurs.   Either
       ss or oss points to memory that is not a valid part of the
       process address space.

RReeffeerreenncceess
NNoottiicceess
       Signal stacks are not ``grown'' automatically, as is  done
       for   the   normal   stack.    If   the   stack  overflows

                     BSD System Compatibility                   1

sigstack(3bsd)                                     sigstack(3bsd)

       unpredictable results may occur.

                     BSD System Compatibility                   2

