

signal(3bsd)                                         signal(3bsd)

SSyynnooppssiiss
       /usr/ucb/cc [flag . . . ] file . . .

       #include <signal.h>

       void (*signal(int sig, void *func))();

DDeessccrriippttiioonn
       signal  is  a  simplified  interface  to  the more general
       facility.  Programs  that  use  signal  in  preference  to
       sigvec are more likely to be portable to all systems.

       A signal is generated by some abnormal event, initiated by
       a user at a terminal (quit, interrupt, stop), by a program
       error  (bus  error, and so on), by request of another pro-
       gram (kill), or when  a  process  is  stopped  because  it
       wishes  to  access its control terminal while in the back-
       ground (see Signals are optionally generated when  a  pro-
       cess resumes after being stopped, when the status of child
       processes changes, or when input is ready at  the  control
       terminal.  Most signals cause termination of the receiving
       process if no action is taken; some signals instead  cause
       the  process  receiving  them to be stopped, or are simply
       discarded if the  process  has  not  requested  otherwise.
       Except  for  the  SIGKILL  and SIGSTOP signals, the signal
       call allows signals either to be ignored or  to  interrupt
       to  a  specified location.  The following is a list of all
       signals with names as in the include file signal.h:

       ---------------------------------
       SIGHUP          hangup
       SIGINT          interrupt
       SIGQUIT     *   quit
       SIGILL      *   illegal instruc-
                       tion
       SIGTRAP     *   trace trap
       SIGABRT     *   abort (generated
                       by routine)
       SIGEMT      *   emulator trap
       SIGFPE      *   arithmetic
                       exception
       SIGKILL         kill  (cannot be
                       caught, blocked,
                       or ignored)
       SIGBUS      *   bus error
       SIGSEGV     *   segmentation
                       violation
       SIGSYS      *   bad argument  to
                       system call
       SIGPIPE         write  on a pipe
                       or other  socket
                       with  no  one to
                       read it

                     BSD System Compatibility                   1

signal(3bsd)                                         signal(3bsd)

       SIGALRM         alarm clock
       SIGTERM         software  termi-
                       nation signal
       SIGURG      +o   urgent condition
                       present       on
                       socket
       SIGSTOP     |-   stop  (cannot be
                       caught, blocked,
                       or ignored)
       SIGTSTP     |-   stop signal gen-
                       erated from key-
                       board
       SIGCONT     +o   continue   after
                       stop (cannot  be
                       blocked)
       SIGCHLD     +o   child status has
                       changed
       SIGTTIN     |-   background  read
                       attempted   from
                       control terminal
       SIGTTOU     |-   background write
                       attempted     to
                       control terminal
       SIGIO       +o   I/O is  possible
                       on  a descriptor
                       (see
       SIGPWR      +o   power
                       fail/restart
       SIGXCPU     *   cpu  time  limit
                       exceeded (see
       SIGXFSZ     *   file size  limit
                       exceeded (see
       SIGVTALRM       virtual     time
                       alarm (see
       SIGPROF         profiling  timer
                       alarm (see
       SIGWINCH    +o   window   changed
                       (see
       SIGUSR1         user-defined
                       signal 1
       SIGUSR2         user-defined
                       signal 2

       The starred signals in the list above cause a  core  image
       if not caught or ignored.

       If  func  is SIG_DFL, the default action for signal sig is
       reinstated; this default is termination (with a core image
       for  starred  signals) except for signals marked with +o or
       |-.  Signals marked with +o are discarded if the  action  is
       SIG_DFL;  signals marked with |- cause the process to stop.
       If func is SIG_IGN the signal is subsequently ignored  and
       pending instances of the signal are discarded.  Otherwise,
       when the signal occurs further occurrences of  the  signal

                     BSD System Compatibility                   2

signal(3bsd)                                         signal(3bsd)

       are automatically blocked and func is called.

       A return from the function unblocks the handled signal and
       continues the process at the point it was interrupted.

       If a caught signal occurs  during  certain  system  calls,
       terminating  the  call  prematurely, the call is automati-
       cally restarted.  In particular this can occur during a or
       on  a slow device (such as a terminal; but not a file) and
       during a

       The value of signal is the previous (or initial) value  of
       func for the particular signal.

       After a or the child inherits all signals.  An execve (see
       resets all caught signals to the default  action;  ignored
       signals remain ignored.

RReettuurrnn vvaalluueess
       The  previous  action  is  returned  on a successful call.
       Otherwise, -1 is returned and errno is set to indicate the
       error.

       signal  will  fail and no action will take place if one of
       the following occur: sig is not a valid signal number,  or
       is SIGKILL or SIGSTOP.

RReeffeerreenncceess
NNoottiicceess
       The  handler  routine  can  be declared: void handler(sig,
       code, scp, addr) int sig, code;  struct  sigcontext  *scp;
       char *addr;

       Here sig is the signal number; code is a parameter of cer-
       tain signals that provides additional  detail;  scp  is  a
       pointer to the sigcontext structure (defined in signal.h),
       used to restore the context from before  the  signal;  and
       addr  is  additional  address  information.   See for more
       details.

                     BSD System Compatibility                   3

