

Intro(3dmi)                                           Intro(3dmi)

DDeessccrriippttiioonn
       The  Desktop  Management  Interface  (DMI) package enables
       &gemini; 7 systems  to  be  managed  locally  or  remotely
       through  the  use  of  ONC RPC.  The pages in this section
       detail the APIs that allow Service Providers  and  manage-
       ment  applications  to interact, and Service Providers and
       components to interact.

       DMI is provided in package data stream format. (  See  for
       details of how to install it.) The package consists of the
       following files.

   BBiinnaarryy oobbjjeeccttss
       These are all installed in  /usr/sbin.   DMI  2.0  Service
       Provider daemon DMI 2.0 ONC RPC Client/Server daemon

   SShhaarreedd lliibbrraarriieess
       These  are  all  installed in /usr/lib.  DMI API functions
       DMI 2.0 server interface functions DMI 2.0  utility  func-
       tions DMI 2.0 client ONC RPC functions

   IInncclluuddee ffiilleess
       These  are  all installed in /usr/include/dmi.  DMI client
       front-end interface DMI 2.0 component  interface  DMI  2.0
       type  definitions  DMI 2.0 error codes DMI 2.0 indications
       DMI 2.0 memory management definitions  DMI  2.0  operating
       system-specific  definitions  DMI 2.0 management interface
       definitions

   SSccrriippttss
       Start/stop  script.   Symbolic  link  to  /etc/init.d/dmi;
       causes DMI-SP to be started automatically on reboot.  Sym-
       bolic link to /etc/init.d/dmi; causes DMI-SP to be stopped
       automatically    on    shutdown.     Symbolic    link   to
       /etc/init.d/dmi - for starting and  stopping  DMI  daemons
       manually.

       &gemini; DMI-SP MIF file.

   DDMMII AAPPIIss
       In  the  DMI framework, there are several classes of APIs.
       These classes are: Management  application  support  func-
       tions  Management  application provider functions DMI Ser-
       vice provider functions for  management  applications  DMI
       Service   provider   functions  for  components  Component
       provider functions Memory handling functions

   MMaannaaggeemmeenntt aapppplliiccaattiioonn ssuuppppoorrtt ffuunnccttiioonnss
       These are functions implemented by the Management Applica-
       tion  client  front  end.   These  functions,  defined  in
       clidmi.h, are:

                                                                1

Intro(3dmi)                                           Intro(3dmi)

   MMaannaaggeemmeenntt aapppplliiccaattiioonn pprroovviiddeerr ffuunnccttiioonnss
       These are functions implemented by the Management Applica-
       tion  (MA) Provider that may be invoked by the DMI Service
       Provider.  These functions enable a management application
       to  receive  indications.   These  functions,  defined  in
       dmi2ind.h are:

   DDMMII SSeerrvviiccee pprroovviiddeerr ffuunnccttiioonnss ffoorr mmaannaaggeemmeenntt aapppplliiccaattiioonnss
       These  are  functions  implemented  by  the  DMI   Service
       Provider  that  can be invoked by Management Applications.
       The functions, defined in dmi2srv.h, are:

   DDMMII SSeerrvviiccee pprroovviiddeerr ffuunnccttiioonnss ffoorr ccoommppoonneennttss
       These  functions  are  implemented  by  the  DMI   Service
       Provider that may be invoked by Component Providers.

   CCoommppoonneenntt pprroovviiddeerr ffuunnccttiioonnss
       These functions are implemented by Component Providers and
       can be invoked by DMI Service Providers.  These functions,
       defined in dmi/dmi2ci.h, are:

   MMeemmoorryy hhaannddlliinngg ffuunnccttiioonnss
       The  MI  Support  Functions provide the client writer with
       convenient memory allocation routines, in  order  to  ease
       memory  handling and allocation.  DMI associates allocated
       memory to pools, being a convenient way of grouping  allo-
       cated memory.  Users may create pools, allocate memory and
       associate it to a  specific  pool  or  free  pool  memory.
       Pools  can  also  be destroyed; this would cause all allo-
       cated memory belonging to that pool to be  released.   The
       memory handling functions, defined in dmi/dmi2mem.h are:

RReettuurrnn vvaalluueess
       For a list and description of return values, see

RReeffeerreenncceess

                                                                2

