

hpsl_find_classcode(3hpsl)             hpsl_find_classcode(3hpsl)

SSyynnooppssiiss
       cc -lhpsl

       #include <hpsl.h>

       int hpsl_find_classcode(rm_key_t rmKey, uint *classCode)

DDeessccrriippttiioonn
       /*(L<hpsl_find_classcode/*(L> finds the base class and the
       sub class for the rmKey.  The pair is arranged  as  0xSCBC
       where SC is the sub class and BC is the base class.

   IInnppuutt
       Refer  to for more information.  resmgr key of the device.

   OOuuttppuutt
       class code pair.

RReettuurrnn vvaalluueess
       See

RReeffeerreenncceess
EExxaammppllee
       #define CLASSCODE_COUNT  (sizeof(classCodes)/sizeof(class-
       Codes[0]))

       struct  classCode {      int codeID;      char *codeStr; }
       classCodes[]={      {-1, "Unknown device"}, /* return this
       if there is no match */      {0x0000, "Old implementation;
       non VGA-compatible device"},      {0x0100, "Old  implemen-
       tation; VGA-compatible device"},      {0x0001, "Mass stor-
       age device; SCSI  bus  controller"},       {0x0101,  "Mass
       storage device; IDE bus controller"},           ...  }

       Label_Each_Device()  {       int  index;       HpslSocket-
       Info_t**SocketInfo;      int  classCode;      int  ix;

            ...        for  (SocketInfo=each  socket  in  system)
            {            for  (index=0;  index<SocketInfo.devCnt;
       index++)           {                 if  (hpsl_find_class-
       code(SocketInfo.devList[index].rmKey,              &class-
       Code)!=HPSL_SUCCESS)                                     {
                           LocalErrorHandler();                 }
                      /* search for class  code;  skip  over  the
       first  entry in the class code table */                for
       (ix=1;    ix<CLASSCODE_COUNT;    ix++)                   {
                           if  (classCode==classCodes[ix].codeId)
                           {                             PrintLa-
       bel(classCodes[ix].codeStr);                             }
                      }                 if  (ix>=CLASSCODE_COUNT)
                      {                          PrintLabel(call-
       Codes[0].codeStr);                 }            }        }
            ...  }

                                                                1

