

hpsl_init_cont_info(3hpsl)             hpsl_init_cont_info(3hpsl)

SSyynnooppssiiss
       cc -lhpsl

       #include <hpsl.h>

       int hpsl_init_cont_info(HpslContInto_t  **contInfo,
                 uint                *contCount);

DDeessccrriippttiioonn
       /*(L<hpsl_init_cont_info/*(L>  allocates  memory  for con-
       tInfo structures that represent all hot  plug  controllers
       in  the  system.  The fields of these structures are popu-
       lated with all the information that is available for  each
       bus/socket/device  that  is  attached to every controller.
       Refer to for more information.

   IInnppuutt
       None.

   OOuuttppuutt
       The HPSL initializes its internal data structures with the
       information  about all hot plug controllers in the system.
       It then copies the location of this  information  in  con-
       tInfo.   The  HPSL  allocates memory for all structures in
       the array.  number of structures  available  at  contInfo,
       which  corresponds  to  the  total number of hot plug con-
       trollers configured in the system.

UUssaaggee
       /*(L<hpsl_init_cont_info/*(L> is usually the first call  a
       user application makes into the HPSL.  It allocates memory
       for contInfo structures.  The contInfo  argument  actually
       points  to  an internal HPSL data structure and so must be
       treated as read-only by the application.  By managing  the
       core  hot plug data structure in the HPSL, the user appli-
       cation does not have to  provide  any  memory  management,
       event  synchronization, or socket and device update proce-
       dures.

RReettuurrnn vvaalluueess
       See

RReeffeerreenncceess
EExxaammppllee
       The  following  pseudo-code   illustrates   the   use   of
       /*(L<hpsl_init_cont_info/*(L>.   /*****  Globals  set here
       and used elsewhere *****/

       uint                            hpslContCount=0;  HpslCon-
       tInfoPtr_t              hpslContInfo=NULL;

       uint                                    hpslSocketCount=0;
       HpslSocketInfo_t               **hpslSocketInfo=NULL;

                                                                1

hpsl_init_cont_info(3hpsl)             hpsl_init_cont_info(3hpsl)

       /*    Get    all    controller    information    */     if
       (hpsl_init_cont_info(&hpslContInfo,             &hpslCont-
       Count)!=HPSL_SUCCESS) {
             localErrorHandler(); }

       if hpslContCount==0 || hpslContInfo == NULL) {
             localDisplayHandler("No controllers"); }

       /* Build hot plug socket list */ for (all controllers)
             {
                   for (all buses)
                   {
                         for (all sockets)
                         {
                               if   ((hpslSocketInfo=(HpslSocket-
       Info_t **) realloc(hpslSocketInfo,
                               sizeof(HpslSocket-
       InfoPtr_t)*(hpslSocketCount+1)))==NULL)
                               {
                                     localDisplayHandler("No mem-
       ory");
                                     exit(1);
                               }
                               hpslSocketInfo[hpslSocket-
       Count++]=&thisSocket;
                         }
                   }
             }

                                                                2

