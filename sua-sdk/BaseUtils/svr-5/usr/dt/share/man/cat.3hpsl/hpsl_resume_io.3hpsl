

hpsl_resume_io(3hpsl)                       hpsl_resume_io(3hpsl)

SSyynnooppssiiss
       cc -lhpsl

       #include <hpsl.h>

       int hpsl_resume_io(HpslSocketInfoPtr_t    socketInfo,
                          rm_key_t               rmKeyNew,
                          rm_key_t               rmKeyOld);

DDeessccrriippttiioonn
       /*(L<hpsl_resume_io/*(L>  resumes  I/O  on a device repre-
       sented by rmKeyNew that was suspended on a  device  repre-
       sented  by rmKeyOld as a result of a call to the function.
       Refer to for more information.

   IInnppuutt
       socket identifier for device on  which  I/O  will  resume.
       resource  manager  key  for  the  device on which I/O will
       resume.  resource manager key for the device on which  I/O
       was suspended.

   OOuuttppuutt
       None.

UUssaaggee
       The   /*(L<hpsl_resume_io/*(L>   function   activates  the
       CFG_RESUME subfunction of the driver's  entry  point  rou-
       tine.

       The  device  represented  by  rmKeyNew  must  not have any
       driver bindings prior to this  function  call.   Both  the
       rmKeyNew  and  rmKeyOld  devices  must use the same driver
       name; in other words, the drvName member  in  the  DevInfo
       structure  for both the new and the old device should have
       the same entry.

       After the resume operation is  successful,  the  Hot  Plug
       Controller Interface (HPCI) adds the driver name entry for
       the device represented by rmKeyNew and removes the  driver
       name entry for the device represented by rmKeyOld from the

RReettuurrnn vvaalluueess
       See

RReeffeerreenncceess
EExxaammppllee
       extern HpslSocketInfo_t **hpslSocketInfo;

       rm_key_t  rmKeyOld=-1;  rm_key_t  rmKeyNew=getResmgrKey();
       int socketIx=getSocketIndex();

       if  (getSuspDrvCount()>0) {      rmKeyOld=getValidSuspKey-
       ToResume();

                                                                1

hpsl_resume_io(3hpsl)                       hpsl_resume_io(3hpsl)

               if  (isSocketIndexValid(socketIx)   &&   isKeyCon-
       nected(socketIx,             rmKeyNew))                  {
                 if(hpsl_resume_io(hpslSocketInfo[socketIx],
       rmKeyNew, rmKeyOld)!=HPSL_SUCCESS)           {
                           localErrorHandler();
                 }       }  else  {       localDisplayHandler("No
       suspended instances.  Nothing to resume."); }

                                                                2

