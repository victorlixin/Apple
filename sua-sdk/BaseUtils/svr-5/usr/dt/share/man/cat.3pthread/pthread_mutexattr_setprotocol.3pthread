

pthread_mutexattr_setprotocpotlh(r3epatdh_rmeuatde)xattr_setprotocol(3pthread)

SSyynnooppssiiss
       cc [options] -Kthread file

       #include <pthread.h>

       int      pthread_mutexattr_setprotocol(pthread_mutexattr_t
       *attr,      int protocol); int pthread_mutexattr_getproto-
       col(const pthread_mutexattr_t *attr),      int *protocol);

DDeessccrriippttiioonn
       pthread_mutexattr_setprotocol  and  pthread_mutexattr_set-
       protocol, respectively, set and get the protocol attribute
       of a mutex attribute object pointed to by attr.

       The attr parameter is  a  pointer  to  a  mutex  attribute
       object previously created by pthread_mutexattr_init.

       *protocol defines the protocol to be followed in utilizing
       mutexes.  Valid values for protocol  are  defined  in  the
       header  <pthread.h>, and may be one of the following: When
       a thread owns a mutex with the PTHREAD_PRIO_NONE  protocol
       attribute, its priority and scheduling are not affected by
       its mutex ownership.  When a  thread  is  blocking  higher
       priority  threads  because  of  owning one or more mutexes
       with the PTHREAD_PRIO_INHERIT protocol attribute, it  exe-
       cutes at the higher of its priority or the priority of the
       highest priority thread waiting  on  any  of  the  mutexes
       owned  by  this thread and initialized with this protocol.
       When a thread owns one or more  mutexes  initialized  with
       the  PTHREAD_PRIO_PROTECT  protocol,  it  executes  at the
       higher of its priority or  the  highest  of  the  priority
       ceilings  of all the mutexes owned by this thread and ini-
       tialized with this attribute, regardless of whether  other
       threads are blocked on any of these mutexes or not.

       While  a thread is holding a mutex which has been initial-
       ized  with  the  PRIO_INHERIT  or  PRIO_PROTECT   protocol
       attributes,  it  will not be subject to being moved to the
       tail of the scheduling queue at its priority in the  event
       that  its  original priority is changed, such as by a call
       to sched_setparam.  Likewise,  when  a  thread  unlocks  a
       mutex  that  has been initialized with the PRIO_INHERIT or
       PRIO_PROTECT protocol attributes, it will not  be  subject
       to  being moved to the tail of the scheduling queue at its
       priority in  the  event  that  its  original  priority  is
       changed.

       If  a  thread simultaneously owns several mutexes initial-
       ized with different protocols,  it  will  execute  at  the
       highest  of  the priorities that it would have obtained by
       each of these protocols.

       When a thread makes a call to pthread_mutex_lock,  if  the
       symbol _POSIX_THREAD_PRIO_INHERIT is defined and the mutex

                                                                1

pthread_mutexattr_setprotocpotlh(r3epatdh_rmeuatde)xattr_setprotocol(3pthread)

       was initialized with the  protocol  attribute  having  the
       value  PTHREAD_PRIO_INHERIT,  when  the calling  thread is
       blocked because the mutex is owned by another thread, that
       owner  thread will inherit the priority level of the call-
       ing thread as long as it continues to own the mutex.   The
       implementation updates its execution priority to the maxi-
       mum of its assigned priority and all its inherited priori-
       ties.   Furthermore,  if  this owner thread itself becomes
       blocked on another mutex, the  same  priority  inheritance
       effect will be propagated to this other owner thread, in a
       recursive manner.

RReettuurrnn vvaalluueess
       pthread_mutexattr_setprotocol  and  pthread_mutexattr_get-
       protocol return zero on success.  Otherwise, an error num-
       ber is returned.

DDiiaaggnnoossttiiccss
       pthread_mutexattr_setprotocol  and  pthread_mutexattr_get-
       protocol  return  the following value if the corresponding
       condition is detected: The value specified by attr or pro-
       tocol    is    invalid.     Neither    of    the   options
       _POSIX_THREAD_PRIO_PROTECT and  _POSIX_THREAD_PRIO_INHERIT
       is  defined  and  the  implementation does not support the
       function.  The value specified by protocol  is  an  unsup-
       ported  value.   The caller does not have the privilege to
       perform the operation.

SSttaannddaarrddss CCoommpplliiaannccee
       The Single UNIX Specification, Version 2; The Open  Group.

RReeffeerreenncceess

                                                                2

