

sem_wait(3pthread)                             sem_wait(3pthread)

SSyynnooppssiiss
       cc [options] -Kthread file

       #include <semaphore.h>

       int sem_wait(sem_t *sem); int sem_trywait(sem_t *sem);

DDeessccrriippttiioonn
       sem_wait  acquires the semaphore pointed to by sem In gen-
       eral, sem_wait is used to block wait for an event, or when
       a  critical section is long.  Semaphores are asynchronous-
       safe, and can be used to communicate between  signal  han-
       dlers and base level code.

       If  the  semaphore is available (that is, if the semaphore
       value is  greater  than  zero),  sem_wait  decrements  the
       semaphore value and returns to the caller.

       If  the  semaphore  is unavailable (that is, the semaphore
       value is zero or less), sem_wait decrements the  semaphore
       value  and  suspends execution of the calling thread until
       the semaphore becomes available to the caller or the  call
       is interrupted by a signal.

       If  a  thread  waiting  on a semaphore is interrupted by a
       signal, sem_wait returns EINTR.

       sem_trywait  makes  a  single  attempt  to   acquire   the
       semaphore  pointed  to by sem.  If the semaphore is avail-
       able,  sem_trywait  decrements  the  semaphore  value  and
       returns  to  the  caller.   sem_trywait  is  used when the
       caller does not want to block if the semaphore is unavail-
       able.   If  sem_trywait  cannot  immediately  acquire  the
       semaphore, it returns EAGAIN to the caller,  it  does  not
       block  the  caller  to wait for the semaphore or decrement
       the semaphore value.

       sem is a pointer to the semaphore to acquire,  which  must
       previously have been initialized by sem_init.

RReettuurrnn vvaalluueess
       sem_wait  and sem_trywait return zero for success.  If the
       call was unsuccessful,  the  state  of  the  semaphore  is
       unchanged, and the function returns a value of -1 and sets
       errno to indicate the error.

DDiiaaggnnoossttiiccss
       sem_wait and sem_trywait return -1 and set  errno  to  the
       following   value   if   the  corresponding  condition  is
       detected: sem does not refer to a valid semaphore.

       sem_wait returns a value of -1 and sets errno to the  fol-
       lowing value if the corresponding condition is detected: a
       signal interrupted this function.

                                                                1

sem_wait(3pthread)                             sem_wait(3pthread)

       sem_trywait returns the following value if the correspond-
       ing  condition  is  detected:  The  semaphore  was already
       locked, so it cannot be immediately locked by sem_trywait.

SSttaannddaarrddss ccoommpplliiaannccee
       The  Single UNIX Specification, Version 2; The Open Group.

RReeffeerreenncceess

                                                                2

