

pthread_mutexattr_gettype(3pthrpetahdr)ead_mutexattr_gettype(3pthread)

SSyynnooppssiiss
       cc [options] -Kthread file

       #include <pthread.h>

       int  pthread_mutexattr_gettype(pthread_mutexattr_t  *attr,
       int *type);  int  pthread_mutexattr_settype(pthread_mutex-
       attr_t,*attr, int type);

DDeessccrriippttiioonn
       pthread_mutexattr_gettype   and  pthread_mutexattr_settype
       respectively get and set the mutex type  attribute.   This
       attribute  is  set  in the type parameter, and the default
       value is PTHREAD_MUTEX_DEFAULT.

       The type of mutex is contained in the  type  attribute  of
       the  mutex attributes.  Valid mutex types include the fol-
       lowing: This type of mutex does not  detect  deadlock.   A
       thread  attempting  to  relock  this  mutex  without first
       unlocking it will deadlock.  Attempting to unlock a  mutex
       locked  by  a different thread results in undefined behav-
       ior.  Attempting to unlock an unlocked  mutex  results  in
       undefined  behavior.   This  type  of mutex provides error
       checking.  A thread attempting to relock this mutex  with-
       out  first  unlocking  it  will  return  with an error.  A
       thread attempting to unlock a mutex which  another  thread
       has locked will return with an error.  A thread attempting
       to unlock an unlocked mutex will return with an error.   A
       thread  attempting  to  relock  this  mutex  without first
       unlocking it will  succeed  in  locking  the  mutex.   The
       relocking  deadlock  which  can occur with mutexes of type
       PTHREAD_MUTEX_NORMAL cannot occur with this type of mutex.
       Multiple  locks  of  this mutex require the same number of
       unlocks to release the mutex  before  another  thread  can
       acquire  the mutex.  A thread attempting to unlock a mutex
       which another thread has locked will return with an error.
       A  thread  attempting  to  unlock  an  unlocked mutex will
       return with an error.  This type of mutex behaves  exactly
       as described for PTHREAD_MUTEX_NORMAL, above.

       An  application  should  not use a PTHREAD_MUTEX_RECURSIVE
       mutex with condition variables because the implicit unlock
       performed  for  a pthread_cond_wait or pthread_cond_timed-
       wait may not actually release the mutex (if  it  had  been
       locked  multiple times).  If this happens, no other thread
       can satisfy the condition of the predicate.

RReettuurrnn vvaalluueess
       pthread_mutexattr_settype returns zero on success.  Other-
       wise, an error number is returned.

       pthread_mutexattr_gettype  returns  zero  on  success  and
       stores the value of the type attribute of  attr  into  the
       object  referenced  by  the type parameter.  Otherwise, an

                                                                1

pthread_mutexattr_gettype(3pthrpetahdr)ead_mutexattr_gettype(3pthread)

       error number is returned.

DDiiaaggnnoossttiiccss
       pthread_gettype and pthread_settype returns the  following
       values  if  the corresponding conditions are detected: The
       value type is invalid.  The value  specified  by  attr  is
       invalid.

SSttaannddaarrddss ccoommpplliiaannccee
       The  Single UNIX Specification, Version 2; The Open Group.

RReeffeerreenncceess

                                                                2

