

memory(3C)                                             memory(3C)

SSyynnooppssiiss
       #include <string.h>

       void *memccpy (void *s1, const void *s2, int c, size_t n);

       void *memchr (const void *s, int c, size_t n);

       int memcmp (const void *s1, const void *s2, size_t n);

       void *memcpy (void *s1, const void *s2, size_t n);

       void *memmove (void *s1, const void *s2, size_t n);

       void *memset (void *s, int c, size_t n);

DDeessccrriippttiioonn
SSyynnooppssiiss
       These functions operate as efficiently as possible on mem-
       ory  areas (arrays of bytes bounded by a count, not termi-
       nated by a null character).  They do  not  check  for  the
       overflow of any receiving memory area.

       memccpy copies bytes from memory area s2 into s1, stopping
       after the first occurrence of c (converted to an  unsigned
       char)  has been copied, or after n bytes have been copied,
       whichever comes first.  It returns a pointer to  the  byte
       after  the copy of c in s1, or a null pointer if c was not
       found in the first n bytes of s2.

       memchr returns a pointer to  the  first  occurrence  of  c
       (converted to an unsigned char) in the first n bytes (each
       interpreted as an unsigned char) of memory area  s,  or  a
       null pointer if c does not occur.

       memcmp  compares  its  arguments,  looking  at the first n
       bytes (each interpreted as an unsigned char), and  returns
       an integer less than, equal to, or greater than 0, accord-
       ing as s1 is lexicographically less  than,  equal  to,  or
       greater than s2 when taken to be unsigned characters.

       memcpy  copies  n  bytes  from  memory  area s2 to s1.  It
       returns s1.

       memmove copies n bytes from memory areas s2 to s1.   Copy-
       ing  between  objects  that  overlap  will take place cor-
       rectly.  It returns s1.

       memset sets the first n bytes in  memory  area  s  to  the
       value of c (converted to an unsigned char).  It returns s.

RReeffeerreenncceess

                                                                1

