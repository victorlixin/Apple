

random(3C)                                             random(3C)

SSyynnooppssiiss
       include <stdlib.h>

       char  *initstate(unsigned  int  seed,  char *state, size_t
       size);

       long random(void);

       char *setstate(const char *state);

       void srandom(unsigned int seed);

DDeessccrriippttiioonn
       The random function uses a  non-linear  additive  feedback
       random  number generator employing a default table of size
       31 long integers to return successive  pseudo-random  num-
       bers  in  the  range  from 0 to 231-1.  The period of this
       random  number  generator  is  very  large,  approximately
       16x(231-1).

       The  size  of the state array determines the period of the
       random-number generator.  Increasing the state array  size
       increases  the  period.   With 256 bytes of state informa-
       tion, the period of the random number generator is greater
       than 269, which should be sufficient for most purposes.

       Like random produces by default a sequence of numbers that
       can be duplicated by calling srandom with 1 as  the  seed.
       The  srandom  function initialises the current state array
       using the value of seed.

       The initstate and setstate functions handle restarting and
       changing random-number generators.  The initstate function
       allows a state array, pointed to by the state argument, to
       be  initialised  for future use.  The size argument, which
       specifies the size in bytes of the state array, is used by
       initstate  to  decide what type of random-number generator
       to use; the larger the state array, the  more  random  the
       numbers.

       Values  for the amount of state information are 8, 32, 64,
       128, and 256 bytes.  Other values greater than 8 bytes are
       rounded down to the nearest one of these values.  For val-
       ues smaller than 8, random uses a simple linear  congruen-
       tial random number generator.

       The  seed argument specifies a starting point for the ran-
       dom-number sequence and provides  for  restarting  at  the
       same  point.   The initstate function returns a pointer to
       the previous state information array.   If  initstate  has
       not  been  called, then random behaves as though initstate
       had been called with a seed of 1 and size  equal  to  128.
       If  initstate is called with a size less than 8, then ran-
       dom  uses  a  simple  linear  congruential  random  number

                                                                1

random(3C)                                             random(3C)

       generator.

       Once a state has been initialised, setstate allows switch-
       ing between state arrays.  The array defined by the  state
       argument  is  used  for  further  random-number generation
       until initstate is called or  setstate  is  called  again.
       The  setstate  function  returns a pointer to the previous
       state array.

UUssaaggee
       After initialization, a state array can be restarted at  a
       different point in one of two ways: The initstate function
       can be used, with the desired seed, state array, and  size
       of  the  array.   The  setstate function, with the desired
       state, can be used, followed by srandom with  the  desired
       seed.

       Using  the  setstate/srandom  functions  has the advantage
       that the size of the state array does not have to be saved
       once it is initialized.

       random/srandom  have  almost the same calling sequence and
       initialization properties as rand/srand [see  The  differ-
       ence  is  that  rand  produces a much less random sequence
       (though it can do so in less  time  than  random/srandom).
       In fact, the low dozen bits generated by rand go through a
       cyclic pattern.  All the  bits  generated  by  random  are
       usable.  For example, random()&01

       will produce a random binary value.

       Unlike srand, srandom does not return the old seed because
       the amount of state information used is much more  than  a
       single  word.  Like rand, random will, by default, produce
       a sequence of numbers that can be  duplicated  by  calling
       srandom with 1 as the seed.

RReettuurrnn vvaalluueess
       The  random  function  returns the generated pseudo-random
       number.  The srandom function returns no value.  Upon suc-
       cessful   completion,  initstate  and  setstate  return  a
       pointer to the previous state array.   Otherwise,  a  NULL
       pointer is returned.

       Note  that the state argument to initstate and setstate is
       assumed to be aligned as if it were an array of long  (not
       char) elements.  See the example below.

EExxaammpplleess
       /* Initialize an array and pass it in to initstate. */
       static   long  state1[32]  =  {       3,       0x9a319039,
       0x32d9c024,   0x9b663182,   0x5da1f342,        0x7449e56b,
       0xbeb1dbb0,   0xab5c5918,   0x946554fd,        0x8c2e680f,
       0xeb3d799f,   0xb11ee0b7,   0x2d436b86,        0xda672e2a,

                                                                2

random(3C)                                             random(3C)

       0x1588ca88,   0xe369735d,   0x904f35f7,        0xd7158fd6,
       0x6fa6f051,   0x616e6b96,   0xac94efdc,        0xde3b81e0,
       0xdf0a6fb5,   0xf103bc02,   0x48f340fb,        0x36413f93,
       0xc622c298,   0xf5a42ab8,   0x8a88d77b,        0xf5ad9d0e,
       0x8999220b, 0x27fb47b9      };
       main() {      unsigned seed;      int n;
            seed   =   1;       n  =  sizeof(state1);       init-
       state(seed, (char *)state1, n);
            setstate((char  *)state1);        printf("%ld\n",ran-
       dom()); }

RReeffeerreenncceess
SSttaannddaarrddss ccoonnffoorrmmaannccee
       These  routines  conform  to  X/Open System Interfaces and
       Headers, Issue 4, Version 2.

                                                                3

