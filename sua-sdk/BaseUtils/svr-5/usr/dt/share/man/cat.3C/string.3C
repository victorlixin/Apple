

string(3C)                                             string(3C)

SSyynnooppssiiss
       #include <string.h>

       char *strcat(char *s1, const char *s2);

       char *strncat(char *s1, const char *s2, size_t n);

       int strcmp(const char *s1, const char *s2);

       int strncmp(const char *s1, const char *s2, size_t n);

       char *strcpy(char *s1, const char *s2);

       char *strncpy(char *s1, const char *s2, size_t n);

       char *strdup(const char *s1);

       size_t strlen(const char *s);

       char *strchr(const char *s, int c);

       char *strrchr(const char *s, int c);

       char *strpbrk(const char *s1, const char *s2);

       size_t strspn(const char *s1, const char *s2);

       size_t strcspn(const char *s1, const char *s2);

       char *strtok(char *s1, const char *s2);

       char *strtok_r(char *s1, const char *s2, char **next);

       char *strstr(const char *s1, const char *s2);

DDeessccrriippttiioonn
       The  arguments  s,  s1, and s2 point to strings (arrays of
       characters terminated by a null character).  The functions
       strcat,  strncat,  strcpy,  strncpy,  strtok, and strtok_r
       alter s1.  These functions do not check  for  overflow  of
       the array pointed to by s1.

       strcat  appends  a copy of string s2, including the termi-
       nating null character, to the end of string  s1.   strncat
       appends  at  most n characters.  Each returns a pointer to
       the null-terminated result.  The initial character  of  s2
       overrides the null character at the end of s1.

       strcmp  compares its arguments and returns an integer less
       than, equal to, or greater than 0, based upon  whether  s1
       is  lexicographically less than, equal to, or greater than
       s2.  strncmp makes the same comparison but looks at most n
       characters.  Characters following a null character are not
       compared.

                                                                1

string(3C)                                             string(3C)

       strcpy copies string s2 to s1  including  the  terminating
       null character, stopping after the null character has been
       copied.  strncpy copies exactly n  characters,  truncating
       s2  or  adding  null  characters  to s1 if necessary.  The
       result will not be null-terminated if the length of s2  is
       n or more.  Each function returns s1.

       strdup returns a pointer to a new string which is a dupli-
       cate of the string pointed to by s1.  The  space  for  the
       new  string is obtained using If the new string can not be
       created, a NULL pointer is returned.

       strlen returns the number of characters in s, not  includ-
       ing the terminating null character.

       strchr  (or strrchr) returns a pointer to the first (last)
       occurrence of c (converted to a char) in string  s,  or  a
       NULL  pointer if c does not occur in the string.  The null
       character terminating a string is considered to be part of
       the string.

       strpbrk  returns  a  pointer  to  the  first occurrence in
       string s1 of any character  from  string  s2,  or  a  NULL
       pointer if no character from s2 exists in s1.

       strspn (or strcspn) returns the length of the initial seg-
       ment of string s1 which consists  entirely  of  characters
       from (not from) string s2.

       strtok_r  considers the string s1 to consist of a sequence
       of zero or more text tokens separated by spans of  one  or
       more  characters  from the separator string s2.  The first
       call (with pointer s1 non-null) returns a pointer  to  the
       first  character  of  the first token, will have written a
       null character into s1 immediately following the  returned
       token  and  will  save  in  the  object pointed to by next
       information sufficient to  continue  tokenizing  the  same
       string  in  subsequent  calls.   To continue with the same
       string, s1 should  be  a  null  pointer,  and  the  object
       pointed  to  by next should not be modified.  In this way,
       subsequent calls will work through the string s1 until  no
       tokens  remain.   The separator string s2 may be different
       from call to call.  When no token remains in  s1,  a  NULL
       pointer is returned.

       strtok behaves just like strtok_r except that it remembers
       its own position within a single string,  s1,  instead  of
       using  a  provided  object  (as is pointed to by next with
       strtok_r).

       strstr locates the first occurrence in string  s1  of  the
       sequence  of  characters  (excluding  the terminating null
       character) in string s2.  strstr returns a pointer to  the
       located  string,  or  a  null pointer if the string is not

                                                                2

string(3C)                                             string(3C)

       found.  If s2 points to a string with  zero  length  (that
       is, the string ""), the function returns s1.

RReeffeerreenncceess
NNoottiicceess
       All  of  these  functions assume the default locale ``C.''
       For some locales, strxfrm should be applied to the strings
       before they are passed to the functions.

       The reentrant version, strtok_r, is recommended for multi-
       threaded applications.

                                                                3

