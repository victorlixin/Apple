

getitimer(3C)                                       getitimer(3C)

SSyynnooppssiiss
       #include <sys/time.h>

       int getitimer(int which, struct itimerval *value);

       int   setitimer(int   which,   struct   itimerval  *value,
            struct itimerval *ovalue);

DDeessccrriippttiioonn
       The system  provides  each  process  with  three  interval
       timers,  defined in sys/time.h.  The getitimer call stores
       the current value of the timer specified by which into the
       structure  pointed  to  by value.  The setitimer call sets
       the value of the timer specified by  which  to  the  value
       specified  in  the  structure  pointed to by value, and if
       ovalue is not NULL, stores the previous value of the timer
       in the structure pointed to by ovalue.

       A  timer  value is defined by the itimerval structure [see
       for the definition of timeval], which includes the follow-
       ing members:

       struct  timeval it_interval;   /* timer interval */ struct
       timeval it_value;      /* current value */

       If it_value is non-zero, it indicates the time to the next
       timer  expiration.   If it_interval is non-zero, it speci-
       fies a value to be used in  reloading  it_value  when  the
       timer expires.  Setting it_value to zero disables a timer,
       regardless of the value of it_interval.  Setting it_inter-
       val  to  zero  disables  a timer after its next expiration
       (assuming it_value is non-zero).

       Time values smaller than  the  resolution  of  the  system
       clock are rounded up to this resolution.

       The  three timers are: Decrements in real time.  A SIGALRM
       signal is delivered when this timer  expires.   Decrements
       in process virtual time.  It runs only when the process is
       executing.   A  SIGVTALRM  signal  is  delivered  when  it
       expires.  Decrements both in process virtual time and when
       the system is running on behalf of  the  process.   It  is
       designed  to be used by interpreters in statistically pro-
       filing the execution of interpreted programs.   Each  time
       the  ITIMER_PROF  timer  expires,  the  SIGPROF  signal is
       delivered.  Because this signal may interrupt  in-progress
       system  calls,  programs using this timer must be prepared
       to restart interrupted system calls.

   RReettuurrnn vvaalluueess
       If the calls succeed, a value of 0  is  returned.   If  an
       error  occurs, the value -1 is returned, and an error code
       is placed in the global variable errno.

                                                                1

getitimer(3C)                                       getitimer(3C)

   EErrrroorrss
       Under the following conditions,  the  functions  getitimer
       and  setitimer fail and set errno to: The specified number
       of seconds is greater  than  100,000,000,  the  number  of
       microseconds is greater than or equal to 1,000,000, or the
       which parameter is unrecognized.

RReeffeerreenncceess
NNoottiicceess
       The microseconds field should not be equal to  or  greater
       than one second.

       setitimer is independent of the alarm system call.

       Do not use setitimer with the sleep routine.  A sleep fol-
       lowing a setitimer wipes out knowledge of the user  signal
       handler.

   CCoonnssiiddeerraattiioonnss ffoorr tthhrreeaaddss pprrooggrraammmmiinngg
       There is a separate interval timer per thread and the sub-
       sequent signal is delivered to the requesting thread; how-
       ever,  only  the  real  time variant (ITIMER_REAL) is sup-
       ported.

   CCoonnssiiddeerraattiioonnss ffoorr lliigghhttwweeiigghhtt pprroocceesssseess
       The  kernel  maintains  separate  timers  per  LWP.    The
       SIGALARM, SIGVTALRM and SIGPROF are posted to the individ-
       ual LWP that set the  timers.   The  Threads  Library  has
       wrapper functions for getitimer and  setitimer that direct
       actions to the correct thread.

                                                                2

