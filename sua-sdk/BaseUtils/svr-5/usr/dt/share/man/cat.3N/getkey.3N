

getkey(3N)                                             getkey(3N)

SSyynnooppssiiss
       cc [options] file -lnsl #include <cr1.h>

       int   getkey(char  *scheme,  char  *local_principal,  char
       *remote_principal);

DDeessccrriippttiioonn
       getkey is a library function that retrieves authentication
       keys  from  a  key management daemon.  The parameters are:
       points to the name of the authentication scheme for  which
       the  keys  should  be obtained (such as cr1) points to the
       name of the  local  entity  for  which  the  corresponding
       authentication  key  should be obtained points to the name
       of the remote entity for which the corresponding authenti-
       cation  key  should  be obtained A principal name can have
       either of the  following  forms:  name@system  system!name
       where  name  is the logname of the principal for which the
       key should be obtained, and system is the name of the sys-
       tem on which the logname resides.

       Users  may  use getkey to obtain their own keys for use in
       authentication.  In addition, a privileged user may obtain
       keys  for any user.  A privileged user is the owner of the
       keys file.

       If local_principal is a NULL pointer, the  principal  name
       corresponding  to  the effective UID of the application is
       used.  The @system or system!  portion  of  the  principal
       name  is  optional  for  local_principal, and the name@ or
       !name portion is optional for remote_principal.

       Also, the name for local_principal is equivalent to  name@
       and name@local_system.  The system for remote_principal is
       equivalent to the  remote  privileged  user  indicated  by
       @system, but not to root@system.

FFiilleess
       cr1 key database

RReettuurrnn vvaalluueess
       getkey  returns  NULL if the daemon cannot be contacted or
       if the daemon rejects the request; otherwise, it returns a
       pointer  to  the key.  The pointer references static stor-
       age, which is overwritten on subsequent calls.  For multi-
       threaded  applications, information is maintained on a per
       thread basis.

RReeffeerreenncceess

                                                                1

