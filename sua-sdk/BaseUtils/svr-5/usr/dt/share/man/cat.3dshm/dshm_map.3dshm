

dshm_map(3dshm)                                   dshm_map(3dshm)

SSyynnooppssiiss
       #include <dshm.h>

       int    dshm_map(dshm_handle_t    handle,   unsigned   long
       buffer_index, const void** bufpp);

DDeessccrriippttiioonn
       dshm_map establishes  a  mapping  to  a  specified  buffer
       within  the  DSHM  segment attached by handle.  The buffer
       lies at byte offset (buffer_index  *  buffer_size)  within
       the  DSHM  object  (where buffer_size is as defined by the
       segment's  creation   by   dshm_get).    Upon   successful
       return,*bufpp  points  to the mapped buffer.  The applica-
       tion must initialize *bufpp to the value  DSHM_NULL  prior
       to its first use with dshm_map.

       The  established  mapping  can be used only by the calling
       process, except as permitted by use of

       If dshm_map returns an error, the map should be considered
       corrupt.   An  error indicates a bug, usually a DSHM usage
       bug in the application.   The  caller  should  immediately
       abort  all  processes  using the map.  The map needs to be
       destroyed and recreated in order to restart  the  applica-
       tion.

RReettuurrnn vvaalluueess
       If dshm_map returns 0, the operation succeeded.

       If  dshm_map  returns  -1,  an  error occurred and the map
       should be considered corrupt.  errno is  set  to  identify
       the error.

   EErrrroorrss
       In the following conditions, dshm_map fails and sets errno
       to: The reference count for a map slot exceeds the maximum
       concurrent  mapping count for the map.  This strongly sug-
       gests an imbalance in dshm_map and dshm_unmap  operations.
       The  reference  count  for  a  map slot is negative.  This
       strongly suggests an imbalance in dshm_map and  dshm_unmap
       operations.  Some other internal inconsistency was discov-
       ered.  For example, a system call  to  remap  a  map  slot
       might have failed.

RReeffeerreenncceess

                                                                1

