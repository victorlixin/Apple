

_spin_lock(3synch)                             _spin_lock(3synch)

SSyynnooppssiiss
       cc [options] -Kthread file

       #include <synch.h>

       void _spin_lock(spin_t *lock);

DDeessccrriippttiioonn
       _spin_lock  locks  the  spin  lock pointed to by lock.  If
       lock is locked, the  calling  thread  will  busy-wait,  or
       spin,  until  lock is available.  When _spin_lock returns,
       the caller has acquired lock.

       lock  must   previously   have   been   initialized   (see
       _spin_init(3synch)).

   PPaarraammeetteerrss
       pointer to spin lock to be locked

RReettuurrnn vvaalluueess
       _spin_lock does not return a value.

   EErrrroorrss
       None

UUssaaggee
       Because  spin  locks waste system resources, most applica-
       tions should use mutexes instead of spin locks for  mutual
       exclusion.   In  general,  _spin_lock  is  used  when  the
       resources are held exclusively for  such  short  durations
       that  the  expected  spin is less costly than blocking and
       resuming the thread.

       Spin locks should only be used when there is  a  guarantee
       that  the  thread  will  not be preempted or blocked while
       holding a spin lock.

       The locks acquired with _spin_lock should be released with
       _spin_unlock.

WWaarrnniinnggss
       Spin  locks must not be used on a single processor system.
       In the best case, a spin lock on a single processor system
       will  waste resources, slowing down the owner of the lock;
       in the worst case, it will deadlock the processor.

       Operations on spin locks are not recursive--a  thread  can
       deadlock  if  it  attempts  to  relock a spin lock that it
       already has locked.

RReeffeerreenncceess

                                                                1

