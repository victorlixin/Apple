

mutex_lock(3synch)                             mutex_lock(3synch)

SSyynnooppssiiss
       cc [options] -Kthread file

       #include <synch.h>

       int mutex_lock(mutex_t *mutex);

DDeessccrriippttiioonn
       mutex_lock locks the mutual exclusion lock (mutex) pointed
       to by mutex.  If mutex is locked, the  calling  thread  is
       blocked  until  mutex  becomes available.  When mutex_lock
       returns successfully, the caller has locked mutex.

   PPaarraammeetteerrss
       pointer to mutex to be locked

       mutex must previously have  been  initialized,  either  by
       mutex_init, or statically (see mutex_init(3synch)).

       From  the  point  of  view  of  the  caller, mutex_lock is
       atomic: even if interrupted by a signal  or  forkall  (see
       mutex_lock  will  not  return  until  it  holds the locked
       mutex.  As a consequence, if mutex_lock is interrupted, an
       error  indication  such  as EINTR is never returned to the
       caller.

UUssaaggee
       Mutexes acquired with mutex_lock should be  released  with
       mutex_unlock.

RReettuurrnn vvaalluueess
       mutex_lock  returns  zero  for success and an error number
       for failure.

   EErrrroorrss
       If the following condition is detected, mutex_lock returns
       the corresponding value: invalid argument specified

WWaarrnniinnggss
       If  a  thread  exits while holding a mutex, the mutex will
       not be unlocked, and other threads waiting for  the  mutex
       will  wait  forever.   Similarly, if a process exits while
       holding a USYNC_PROCESS  mutex,  the  mutex  will  not  be
       unlocked,  and  other processes or threads waiting for the
       mutex will wait forever.

RReeffeerreenncceess

                                                                1

