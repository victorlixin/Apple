

_spin_trylock(3synch)                       _spin_trylock(3synch)

SSyynnooppssiiss
       cc [options] -Kthread file

       #include <synch.h>

       int _spin_trylock(spin_t *lock);

DDeessccrriippttiioonn
       _spin_trylock  attempts once to lock the spin lock pointed
       to by lock.

       If lock is available, _spin_trylock will  return  success-
       fully  with  lock  locked.   If  lock  is  already locked,
       _spin_trylock immediately  returns  EBUSY  to  the  caller
       without acquiring lock or spinning.

       lock   must   previously   have   been   initialized  (see
       _spin_init).

   PPaarraammeetteerrss
       pointer to spin lock to be locked

UUssaaggee
       Because spin locks waste system resources,  most  applica-
       tions  should use mutexes instead of spin locks for mutual
       exclusion.     In     general,     _spin_trylock,     like
       _spin_lock(3synch)  is  used  when  the resources are held
       exclusively for such short  durations  that  the  expected
       spin is less costly than blocking and resuming the thread.

       Spin locks should only be used when there is  a  guarantee
       that  the  thread  will  not be preempted or blocked while
       holding a spin lock.

       The locks acquired with _spin_trylock should  be  released
       with _spin_unlock(3synch).

RReettuurrnn vvaalluueess
       _spin_trylock returns zero for success and an error number
       for failure.

   EErrrroorrss
       If the following condition occurs,  _spin_trylock  returns
       the corresponding value: lock is already locked

WWaarrnniinnggss
       Spin  locks must not be used on a single processor system.
       In the best case, a spin lock on a single processor system
       will  waste resources, slowing down the owner of the lock;
       in the worst case, it will deadlock the processor.

RReeffeerreenncceess

                                                                1

