

cond_timedwait(3synch)                     cond_timedwait(3synch)

SSyynnooppssiiss
       cc [options] -Kthread file

       #include <synch.h>

       int    cond_timedwait(cond_t    *cond,   mutex_t   *mutex,
       timestruc_t *abstime);

DDeessccrriippttiioonn
       cond_timedwait, similar to cond_wait(3synch),  blocks  the
       calling  thread  at  the  condition variable pointed to by
       cond, to wait for the occurrence of a condition.  However,
       if the absolute time denoted by abstime has passed and the
       indicated  condition  is  not   signaled,   cond_timedwait
       returns ETIME to the caller.  The calling thread must lock
       the mutual exclusion lock  (mutex)  pointed  to  by  mutex
       before  calling  cond_timedwait, otherwise the behavior is
       unpredictable.

       cond_timedwait automatically releases the mutex, and waits
       on  the  condition  variable  cond.  When the condition is
       signaled or the time  expires,  cond_timedwait  reacquires
       the mutex and returns to the caller.  The wait can also be
       interrupted by a  system signal, in which  case  mutex  is
       reacquired,  the signal handler is called, and cond_timed-
       wait returns EINTR.

       User-visible  timers  are  not  affected  by  a  call   to
       cond_timedwait.

       The calling thread can resume execution when the condition
       is signaled or broadcast, a timeout occurs, or when inter-
       rupted.   The  logical  condition  should  be  checked  on
       return, as a return might not have been caused by a change
       in the condition.

   PPaarraammeetteerrss
       pointer to the condition variable to wait for pointer to a
       locked mutex absolute time at which to time out

   ccoonndd ppaarraammeetteerr
       The condition variable denoted  by  cond  must  previously
       have been initialized (see cond_init(3synch)).

   mmuutteexx ppaarraammeetteerr
       mutex  is  a mutual exclusion variable protecting a shared
       resource associated with the condition represented by  the
       condition  variable,  cond.   The calling thread must lock
       mutex before calling cond_wait, otherwise the behavior  is
       unpredictable.

   aabbssttiimmee ppaarraammeetteerr
       abstime represents the time at which cond_timedwait should
       time out.  The time is expressed in  elapsed  seconds  and

                                                                1

cond_timedwait(3synch)                     cond_timedwait(3synch)

       nanoseconds  since  Universal Coordinated Time, January 1,
       1970.  returns  the  current  time,  but  in  seconds  and
       microseconds.   To  construct abstime, convert the current
       time to a timestruc_t, and add to that the waiting time.

UUssaaggee
       See the description of  how  to  use  condition  variables
       under USAGE on

       Because the condition can change between the time the con-
       dition is signaled and the mutex is relocked, the  calling
       thread  must always recheck the condition upon return from
       cond_timedwait.

RReettuurrnn vvaalluueess
       cond_timedwait returns zero for success and an error  num-
       ber for failure.

   EErrrroorrss
       If   any   of   the   following  conditions  is  detected,
       cond_timedwait returns the corresponding value:  the  wait
       was interrupted by a  system signal invalid argument spec-
       ified abstime is NULL time specified by abstime has passed

RReeffeerreenncceess

                                                                2

