

barrier_wait(3synch)                         barrier_wait(3synch)

SSyynnooppssiiss
       cc [options] -Kthread file

       #include <synch.h>

       int barrier_wait(barrier_t *barrier);

DDeessccrriippttiioonn
       barrier_wait  blocks the calling thread at a barrier until
       count threads have called it.   count  is  defined  during
       initialization  with  barrier_init.   A  thread is said to
       have reached the barrier when it calls barrier_wait.

       When the  last  thread  reaches  the  barrier,  all  count
       threads  are  released from the barrier and are allowed to
       resume execution.  The barrier is reset after the  waiting
       threads are released.

       barrier  must  previously  have been initialized (see bar-
       rier_init(3synch)).

       From the point of view  of  the  caller,  barrier_wait  is
       atomic:  even  if  interrupted by a signal or forkall (see
       barrier_wait will not  return  until  count  threads  have
       reached the barrier.

       The  order  in which threads are released from the barrier
       is scheduling policy specific: Bound threads have priority
       over  multiplexed  threads;  then within each category the
       choice of thread is scheduling-policy-specific.

   PPaarraammeetteerrss
       pointer to barrier at which to wait

RReettuurrnn vvaalluueess
       barrier_wait returns zero for success and an error  number
       for failure.

   EErrrroorrss
       If  following  condition is detected, barrier_wait returns
       the corresponding value: invalid argument specified

RReeffeerreenncceess

                                                                1

