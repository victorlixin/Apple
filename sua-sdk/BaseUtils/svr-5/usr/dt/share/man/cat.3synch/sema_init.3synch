

sema_init(3synch)                               sema_init(3synch)

SSyynnooppssiiss
       cc [options] -Kthread file

       #include <synch.h>

       int sema_init(sema_t *sema, int sema_count, int type, void
       *arg);

DDeessccrriippttiioonn
       sema_init initializes the semaphore sema of type  type  to
       protect   sema_count  resources.   Once  initialized,  the
       semaphore can be used any number of  times  without  being
       reinitialized.

   PPaarraammeetteerrss
       Points  to the semaphore to be initialized.  Specifies the
       initial  number  of  resources  to  be  protected  by  the
       semaphore.   sema_count  must  be greater than or equal to
       zero.  type can be set to one  of  the  following  values:
       initialize  the  semaphore  for threads within the current
       process initialize the semaphore for threads  across  pro-
       cesses  arg  should  be  set to NULL.  It is not currently
       used, but is reserved for future use.

   SSttaattiicc sseemmaapphhoorree iinniittiiaalliizzaattiioonn
       A semaphore can be initialized statically if  its  storage
       is  zero-filled.   In  this case, the semaphore is of type
       USYNC_THREAD,  its  sema_count  is  0  (that  is,  it   is
       ``locked''; no resources are available) and sema_init need
       not be called.  sema_post must be  called  to  unlock  the
       semaphore.

RReettuurrnn vvaalluueess
       sema_init returns zero for success and an error number for
       failure.

   EErrrroorrss
       If the following condition is detected, sema_init  returns
       the corresponding value: invalid argument specified

WWaarrnniinnggss
       sema_init  does  not examine the sema argument before ini-
       tializing it.  If sema_init is called more than  once  for
       the  same  semaphore,  it will overwrite its state.  It is
       the user's responsibility to ensure that sema_init is only
       called once for each semaphore.

       Operations  on  semaphores  initialized with sema_init are
       not recursive; a thread can block itself if it attempts to
       reacquire a semaphore that it has already acquired.

RReeffeerreenncceess

                                                                1

