

mutex_init(3synch)                             mutex_init(3synch)

SSyynnooppssiiss
       cc [options] -Kthread file

       #include <synch.h>

       int mutex_init(mutex_t *mutex, int type, void *arg);

DDeessccrriippttiioonn
       mutex_init  initializes  the mutual exclusion lock (mutex)
       pointed to by mutex to be of type type and in the unlocked
       state.  Once initialized, the mutex can be used any number
       of times without being reinitialized.

   PPaarraammeetteerrss
       pointer  to  mutex  to  be  initialized  USYNC_THREAD   or
       USYNC_PROCESS NULL (reserved for future use)

   mmuutteexx ppaarraammeetteerr
       mutex points to the mutex to be initialized.

   ttyyppee ppaarraammeetteerr
       type can be set to one of the following values: initialize
       the mutex for threads within the current process  initial-
       ize the mutex for threads across processes

   aarrgg ppaarraammeetteerr
       arg  should be set to NULL.  It is not currently used, but
       is reserved for future use.

   SSttaattiicc mmuutteexx iinniittiiaalliizzaattiioonn
       A mutex can be initialized statically if  its  storage  is
       zero-filled.    In   this  case,  the  mutex  is  of  type
       USYNC_THREAD, and mutex_init need not be called.

RReettuurrnn vvaalluueess
       mutex_init returns zero for success and  an  error  number
       for failure.

   EErrrroorrss
       If  the  following  condition is detected, the contents of
       mutex are unchanged and mutex_init returns the correspond-
       ing value: invalid type argument specified

WWaarrnniinnggss
       mutex_init does not examine the mutex argument before ini-
       tializing it.  If mutex_init is called more than once  for
       the  same  mutex,  it will overwrite its state.  It is the
       user's responsibility to ensure that  mutex_init  is  only
       called once for each mutex.

       Operations  on  locks  initialized with mutex_init are not
       recursive--a thread can deadlock if it attempts to  relock
       a mutex that it already has locked.

                                                                1

mutex_init(3synch)                             mutex_init(3synch)

RReeffeerreenncceess

                                                                2

