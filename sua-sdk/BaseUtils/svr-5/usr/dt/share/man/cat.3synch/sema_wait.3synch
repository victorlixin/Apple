

sema_wait(3synch)                               sema_wait(3synch)

SSyynnooppssiiss
       cc [options] -Kthread file

       #include <synch.h>

       int sema_wait(sema_t *sema);

DDeessccrriippttiioonn
       sema_wait acquires the semaphore pointed to by sema.

       If  the  semaphore is available (that is, if the semaphore
       value is greater  than  zero),  sema_wait  decrements  the
       semaphore value and returns to the caller.

       If  the  semaphore  is unavailable (that is, the semaphore
       value is zero or less), sema_wait decrements the semaphore
       value  and  suspends execution of the calling thread until
       the semaphore becomes available to the caller.

       If a thread waiting on a semaphore  is  interrupted  by  a
       signal, sema_wait returns EINTR.

   PPaarraammeetteerrss
       pointer to the semaphore to acquire

   sseemmaa ppaarraammeetteerr
       sema  must  previously  have  been  initialized, either by
       sema_init or statically (see sema_init(3synch)).

UUssaaggee
       See the description of semaphores under USAGE on

       In general, sema_wait is used to block wait for an  event,
       or  when a critical section is long.  Semaphores are asyn-
       chronous-safe, and can be used to communicate between sig-
       nal handlers and base level code.

RReettuurrnn vvaalluueess
       sema_wait returns zero for success and an error number for
       failure.

   EErrrroorrss
       If the following condition is detected, sema_wait  returns
       the   corresponding   value:  invalid  argument  specified
       semaphor waiting was interrupted by a UNIX system signal

RReeffeerreenncceess

                                                                1

