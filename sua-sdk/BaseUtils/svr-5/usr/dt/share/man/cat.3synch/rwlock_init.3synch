

rwlock_init(3synch)                           rwlock_init(3synch)

SSyynnooppssiiss
       cc [options] -Kthread file

       #include <synch.h>

       int rwlock_init(rwlock_t *rwlock, int type, void *arg);

DDeessccrriippttiioonn
       rwlock_init  initializes the reader-writer lock pointed to
       by rwlock to be of type type and in  the  unlocked  state.
       Once initialized, the lock can be used any number of times
       without being re-initialized.

   PPaarraammeetteerrss
       pointer  to   reader-writer   lock   to   be   initialized
       USYNC_THREAD  or  USYNC_PROCESS  NULL (reserved for future
       use)

   rrwwlloocckk ppaarraammeetteerr
       rwlock points to the reader-writer lock to be initialized.

   ttyyppee ppaarraammeetteerr
       type can be set to one of the following values: initialize
       the reader-writer lock for threads within the current pro-
       cess  initialize the reader-writer lock for threads across
       processes

   aarrgg ppaarraammeetteerr
       arg should be set to NULL.  It is not currently used,  but
       is reserved for future use.

   SSttaattiicc rreeaaddeerr--WWrriitteerr iinniittiiaalliizzaattiioonn
       In  this  implementation, a reader-writer lock can be ini-
       tialized statically if its  storage  is  zero-filled.   In
       this case, the reader-writer lock is of type USYNC_THREAD,
       and rwlock_init need not be called.

RReettuurrnn vvaalluueess
       rwlock_init returns zero for success and an  error  number
       for failure.

   EErrrroorrss
       If  the  following  condition is detected, the contents of
       rwlock are not changed, and rwlock_init returns the corre-
       sponding value: Invalid type argument specified.

WWaarrnniinnggss
       rwlock_init  does  not  examine the rwlock argument before
       initializing it.  If rwlock_init is called more than  once
       for  the  same  reader-writer  lock, it will overwrite its
       state.  It is the user's  responsibility  to  ensure  that
       rwlock_init  is  only  called  once for each reader-writer
       lock.

                                                                1

rwlock_init(3synch)                           rwlock_init(3synch)

       Operations on locks initialized with rwlock_init  are  not
       recursive--a  thread  can deadlock if it attempts to reac-
       quire a reader-writer lock that it already has acquired.

RReeffeerreenncceess

                                                                2

