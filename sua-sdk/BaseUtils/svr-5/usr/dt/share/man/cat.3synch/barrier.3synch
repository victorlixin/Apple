

barrier(3synch)                                   barrier(3synch)

SSyynnooppssiiss
       cc [options] -Kthread file

       #include <synch.h>

       int  barrier_init(barrier_t *barrier, int count, int type,
       void *arg);

       int barrier_wait(barrier_t *barrier);

       int barrier_destroy(barrier_t *barrier);

       int _barrier_spin_init(barrier_spin_t *barrier, int count,
       void *arg)

       int _barrier_spin(barrier_spin_t *barrier);

       int _barrier_spin_destroy(barrier_spin_t *barrier);

   PPaarraammeetteerrss
       pointer  to  barrier  to  be  initialized,  waited  at, or
       destroyed number of threads to use the  barrier  for  syn-
       chronization  USYNC_THREAD or USYNC_PROCESS NULL (reserved
       for future use)

DDeessccrriippttiioonn
       Barriers  provide  a  simple  coordination  mechanism  for
       threads.  Threads wait at a barrier until a specified num-
       ber of threads have reached the barrier, then resume  exe-
       cution.

       There  are  two  types of barriers: blocking and spinning.
       Threads waiting at a blocking barrier are put to sleep, or
       blocked,  until  the  specified  number  of  threads  have
       reached the barrier.  Threads waiting at a  spinning  bar-
       rier  busy-wait,  or  spin,  until the specified number of
       threads have reached the barrier.

       When a thread calls barrier_wait (for a blocking  barrier)
       or  _barrier_spin  (for a spinning barrier), it is said to
       have reached the barrier.

       The Threads Library provides three routines  for  blocking
       barriers  and three for spinning barriers.  These are out-
       lined below and described in  more  detail  on  individual
       manual pages.

   BBlloocckkiinngg bbaarrrriieerr rroouuttiinneess
   bbaarrrriieerr__iinniitt((33ssyynncchh))
       barrier_init  initializes  the blocking barrier pointed to
       by barrier to be of type type  and  to  synchronize  count
       threads.

       Blocking  barriers are initialized to be one of two types:

                                                                1

barrier(3synch)                                   barrier(3synch)

       USYNC_THREAD or USYNC_PROCESS.  USYNC_THREAD barriers  are
       available  only  to  threads  within  the current process.
       USYNC_PROCESS barriers can be used by threads in different
       processes.

   bbaarrrriieerr__wwaaiitt((33ssyynncchh))
       barrier_wait  blocks the calling thread at a blocking bar-
       rier until count threads reach the barrier.  When the last
       thread  reaches the barrier, all count blocked threads are
       released from the barrier and are allowed to resume execu-
       tion.   The barrier is reset after the waiting threads are
       released.

   bbaarrrriieerr__ddeessttrrooyy((33ssyynncchh))
       barrier_destroy destroys the blocking barrier  pointed  to
       by  barrier.   This  includes invalidating the barrier and
       freeing any  associated  implementation-allocated  dynamic
       resources.

   SSppiinnnniinngg bbaarrrriieerr rroouuttiinneess
   __bbaarrrriieerr__ssppiinn__iinniitt((33ssyynncchh))
       _barrier_spin_init   initializes   the   spinning  barrier
       pointed to by barrier to synchronize count threads.

   __bbaarrrriieerr__ssppiinn((33ssyynncchh))
       _barrier_spin makes the calling thread busy-wait, or spin,
       at  a  spinning barrier until count threads reach the bar-
       rier.  When the last thread reaches the barrier, all count
       spinning threads are released from the barrier and allowed
       to resume execution.  The barrier is reset after the wait-
       ing threads are released.

   __bbaarrrriieerr__ssppiinn__ddeessttrrooyy((33ssyynncchh))
       _barrier_spin_destroy  destroys  the barrier pointed to by
       barrier.  This includes invalidating the barrier and free-
       ing   any   associated   implementation-allocated  dynamic
       resources.

UUssaaggee
       Because spinning barriers waste resources,  most  applica-
       tions  should  use  blocking  barriers instead of spinning
       barriers.  Spinning barriers should only be used when  all
       participating  threads  will reach the barrier at approxi-
       mately the same time.

WWaarrnniinnggss
       Spinning barriers should never be used on a single proces-
       sor system.

RReeffeerreenncceess

                                                                2

