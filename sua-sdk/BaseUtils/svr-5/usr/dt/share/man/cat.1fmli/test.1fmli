

test(1fmli)                                           test(1fmli)

SSyynnooppssiiss
       test expr

       [expr]

DDeessccrriippttiioonn
       test  evaluates  the  expression  expr and if its value is
       true, sets a zero (TRUE) exit status;  otherwise,  a  non-
       zero (FALSE) exit status is set; test also sets a non-zero
       exit status if there are no arguments.   When  permissions
       are  tested, the effective user ID of the process is used.

       All operators, flags, and brackets (brackets used as shown
       in the second SYNOPSIS line) must be separate arguments to
       test.  Normally these items are separated by spaces.

       The following primitives are used to construct expr:  true
       if  file  exists and is readable.  true if file exists and
       is writable.  true if file exists and is executable.  true
       if file exists and is a regular file.  true if file exists
       and is a directory.  true if file exists and is a  charac-
       ter special file.  true if file exists and is a block spe-
       cial file.  true if  file  exists  and  is  a  named  pipe
       (fifo).   true  if  file exists and its set-user-ID bit is
       set.  true if file exists and its set-group-ID bit is set.
       true  if  file  exists and its sticky bit is set.  true if
       file exists and has a size greater than zero.  true if the
       open  file  whose  file  descriptor number is fildes (1 by
       default) is associated with a terminal  device.   true  if
       the  length  of  string s1 is zero.  true if the length of
       the string s1 is non-zero.  true if strings s1 and s2  are
       identical.   true  if strings s1 and s2 are not identical.
       true if s1 is not the null string.  true if  the  integers
       n1 and n2 are algebraically equal.  Any of the comparisons
       -ne, -gt, -ge, -lt, and -le may be used in place of -eq.

       These primaries may be combined with the following  opera-
       tors:  unary  negation  operator.   binary  and  operator.
       binary or operator (-a has  higher  precedence  than  -o).
       parentheses  for  grouping.   Notice also that parentheses
       are meaningful  to  the  shell  and,  therefore,  must  be
       quoted.

NNoottiicceess
       If you test a file you own (the -r, -w , or -x tests), but
       the permission tested does not have the owner bit  set,  a
       non-zero  (false) exit status will be returned even though
       the file may have the group or other bit set for that per-
       mission.   The  correct exit status will be set if you are
       super-user.

       The = and != operators have a higher precedence  than  the
       -r  through -n operators, and = and != always expect argu-
       ments; therefore, = and != cannot  be  used  with  the  -r

                                                                1

test(1fmli)                                           test(1fmli)

       through -n operators.

       If more than one argument follows the -r through -n opera-
       tors, only the first argument is examined; the others  are
       ignored, unless a -a or a -o is the second argument.

RReeffeerreenncceess

                                                                2

