

Intro(3S)                                               Intro(3S)

SSyynnooppssiiss
       #include <stdio.h>

       FILE *stdin, *stdout, *stderr;

DDeessccrriippttiioonn
       This  section  describes  the  routines  in  the  standard
       buffered input/output package provided as part of the libc
       library.   These  constitute  an efficient, user-level I/O
       buffering scheme.  The in-line macros getc and putc handle
       characters  quickly.   The macros getchar and putchar, and
       the higher-level routines fgetc,  fgets,  fprintf,  fputc,
       fputs,  fread,  fscanf,  fwrite, gets, getw, printf, puts,
       putw, and scanf all use or act as if  they  use  getc  and
       putc; they can be freely intermixed.

       A  file  with associated buffering is called a stream (see
       and is declared to be a pointer to a  defined  type  FILE.
       fopen  creates  certain  descriptive data for a stream and
       returns a pointer to designate the stream in  all  further
       transactions.  Normally, there are three open streams with
       constant pointers declared in the stdio.h header file  and
       associated  with  the  standard open files: standard input
       file standard output file standard error file

       A constant null designates a null pointer.

       An integer-constant EOF (-1) is returned at end-of-file or
       error  by  most  integer  functions that deal with streams
       (see the individual descriptions for details).

       An integer constant BUFSIZ is a suggested buffer size  for
       use in setvbuf() and the expected size for setbuf().

       An integer constant FILENAME_MAX specifies the size needed
       for an array of char large enough to hold the longest file
       name  string  that  the  implementation  guarantees can be
       opened.

       The number of open streams available to a process is  lim-
       ited  only by the maximum number of files that the process
       may open.  This limitation is dependent on  the  operating
       system.

       Any program that uses this package must include the header
       file of pertinent macro definitions, as follows:  #include
       <stdio.h>

       The  functions  and  constants mentioned in the entries of
       sub-class 3S of this manual are declared  in  that  header
       file  and  need no further declaration.  The constants and
       the following  ``functions''  are  implemented  as  macros
       (redeclaration of these names is perilous): getc, getchar,
       putc, and putchar.  There are also  function  versions  of

                                                                1

Intro(3S)                                               Intro(3S)

       getc, getchar, putc, and putchar.

       Output  streams,  except  for  the  standard  error stream
       stderr, are by default buffered if the output refers to  a
       file and line-buffered if the output refers to a terminal.
       The standard error output  stream  stderr  is  by  default
       unbuffered,  but  use  of  freopen  (see  will cause it to
       become buffered or line-buffered.  When an  output  stream
       is  unbuffered,  information  is queued for writing on the
       destination file or terminal as soon as written;  when  it
       is buffered, many characters are saved up and written as a
       block.  When it is line-buffered, each line of  output  is
       queued  for writing on the destination terminal as soon as
       the line is completed (that is,  as  soon  as  a  new-line
       character  is  written  or  terminal  input is requested).
       setbuf or setvbuf (both described in may be used to change
       the stream's buffering strategy.

   EErrrroorrss
       Invalid stream pointers usually cause grave disorder, pos-
       sibly including program termination.  Individual  function
       descriptions describe the possible error conditions.

RReeffeerreenncceess
NNoottiicceess
       The  stdio  included in &gemini; provides thread safety as
       well as improved performance and compatibility for  exist-
       ing  applications.  Applications  should not mix different
       stdio implementations.

       Applications should restrict their use of the standard I/O
       package  to  the  interfaces  documented on the Section 3S
       manual pages.  They should not depend on  individual  mem-
       bers of the internal structures found in stdio.h.

SSttaannddaarrddss ccoommpplliiaannccee
       The  following  are  comformant  with  X/Open  Portability
       Guide, Issue 4, Version 2 (95):

                                                                2

