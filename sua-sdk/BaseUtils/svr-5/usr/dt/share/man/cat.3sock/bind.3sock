

bind(3sock)                                           bind(3sock)

SSyynnooppssiiss
       cc  [options]  file  -lsocket -lnsl #include <sys/types.h>
       #include <sys/socket.h>

       int bind(int socket, const struct sockaddr  *name,  size_t
       namelen);

DDeessccrriippttiioonn
       bind  assigns  a  protocol  address  to an unnamed socket.
       When a socket is created with socket, it exists in a  name
       space  (address family) but has no assigned address.  bind
       requests that the protocol address pointed to by  name  be
       assigned  to  the socket.  namelen specifies the length of
       the sockaddr structure pointed to by name.

FFiilleess
       usr/lib/locale/locale/LC_MESSAGES/uxnsl

RReettuurrnn vvaalluueess
       If the bind is successful,  a  0  value  is  returned.   A
       return  value  of  -1 indicates an error, which is further
       specified in the global errno.

   EErrrroorrss
       The bind call will fail if: s is not a  valid  descriptor.
       s is a descriptor for a file, not a socket.  The specified
       address is not available on the local machine.  The speci-
       fied  address  is already in use.  namelen is not the size
       of a valid address for the specified address family.   The
       socket  is  already  bound to an address, and the protocol
       does not support binding to a new address, or  the  socket
       has  been  shut  down.  The requested address is protected
       and the current user has inadequate permission  to  access
       it.   There  were  insufficient  STREAMS resources for the
       operation to complete.  The specified  address  is  not  a
       valid  address  for  the  address  family of the specified
       socket.  The socket type of the specified socket does  not
       support binding to an address.  The socket is already con-
       nected.  Pathname resolution of a symbolic  link  produced
       an  intermediate  result  whose  length  exceeds PATH_MAX.
       Insufficient resources  were  available  to  complete  the
       call.

       The following errors are specific to binding names in the

       domain:  A component of the path prefix of the pathname in
       name is not a directory.  A component of the  path  prefix
       of the pathname in name does not exist, or the pathname is
       an empty string.  Search permission is denied for a compo-
       nent  of  the  path prefix of the pathname in name, or the
       requested name requires writing in a directory with a mode
       that  denies  write  permission.   Too many symbolic links
       were encountered in translating the pathname in  name.   A
       component of the pathname exceeded NAME_MAX characters, or

                                                                1

bind(3sock)                                           bind(3sock)

       an entire pathname exceeded PATH_MAX characters.   An  I/O
       error  occurred  while making the directory entry or allo-
       cating the inode.  The inode would reside on  a  read-only
       file system.  A null pathname was specified.

RReeffeerreenncceess
       RFC 2133

NNoottiicceess
       Binding a name in the

       domain  creates  a  socket in the file system that must be
       deleted by the caller when it is no longer needed (see

       The rules used in binding names vary between communication
       domains.

       The  type  of  address structure passed to bind depends on
       the address family.
        domain sockets (address family AF_UNIX) require a  struct
       sockaddr_un  as  defined in sys/un.h; Internet domain IPv4
       sockets (address family AF_INET) require  a  struct  sock-
       addr_in  as  defined in netinet/in.h; Internet domain IPv6
       sockets (address family AF_INET6) require a  struct  sock-
       addr_in6  as defined in netinet/in.h.  Other address fami-
       lies may require  other  structures.   Use  the  structure
       appropriate  to  the  address  family;  cast the structure
       address to a struct sockaddr* in the call to bind and pass
       the size of the structure in the namelen argument.

       In &geminiREL; the sockaddr structure has been modified to
       support variable length sockets. The net  result  of  this
       modification  is that the family member has been shortened
       to 8 bits and a new 8-bit member inserted before it called
       len.  For more information on the new sockaddr structures,
       see: and

                                                                2

