

regcmp(3G)                                             regcmp(3G)

SSyynnooppssiiss
       cc [flag . . . ] file . . . -lgen [library] . . .

       #include <libgen.h>

       char *regcmp (const char *string1 [, char *string2, ...],
           (char *)0);

       char *regex (const char *re, const char *subject
           [, char *ret0, ...]);

       extern char *_ _loc1;

DDeessccrriippttiioonn
       regcmp  compiles  a  regular expression (consisting of the
       concatenated arguments) and returns a pointer to the  com-
       piled  form.   is  used  to  create space for the compiled
       form.  It is the user's responsibility  to  free  unneeded
       space  so  allocated.  A NULL return from regcmp indicates
       an incorrect argument.  has been written to generally pre-
       clude the need for this routine at execution time.  regcmp
       is located in library libform.

       regex executes a  compiled  pattern  against  the  subject
       string.  Additional arguments are passed to receive values
       back.  regex returns NULL on failure or a pointer  to  the
       next  unmatched  character on success.  A global character
       pointer _ _loc1 points to where the match  began.   regcmp
       and  regex  were mostly borrowed from the editor, however,
       the syntax and semantics have been changed slightly.   The
       following  are  the valid symbols and associated meanings.
       These symbols retain their meaning in Matches the  end  of
       the  string;  \n  matches  a newline.  Within brackets the
       minus means through.  For example, [a-z] is equivalent  to
       [abcd...xyz].   The - can appear as itself only if used as
       the first or last character.  For example,  the  character
       class  expression  []-] matches the characters ] and -.  A
       regular expression followed by + means one or more  times.
       For example, [0-9]+ is equivalent to [0-9][0-9]*.  Integer
       values enclosed in {} indicate the  number  of  times  the
       preceding  regular expression is to be applied.  The value
       m is the minimum number and u is a number, less than  256,
       which  is  the  maximum.   If  only m is present (that is,
       {m}), it indicates the exact number of times  the  regular
       expression  is to be applied.  The value {m,} is analogous
       to {m,infinity}.  The plus (+) and star (*) operations are
       equivalent  to  {1,}  and {0,} respectively.  The value of
       the enclosed regular expression is to  be  returned.   The
       value will be stored in the (n+1)th argument following the
       subject argument.  At most, ten enclosed  regular  expres-
       sions  are  allowed.  regex makes its assignments uncondi-
       tionally.
       Parentheses are used for grouping.  An operator, for exam-
       ple, *, +, {}, can work on a single character or a regular

                                                                1

regcmp(3G)                                             regcmp(3G)

       expression  enclosed   in   parentheses.    For   example,
       (a*(cb+)*)$0.

       By  necessity,  all the above defined symbols are special.
       They must, therefore, be escaped with a \  (backslash)  to
       be used as themselves.

EExxaammpplleess
       The  following  example  matches  a leading newline in the
       subject  string  pointed  at  by  cursor.   char  *cursor,
       *newcursor,  *ptr;       ...   newcursor  =  regex((ptr  =
       regcmp("^\n", (char *)0)), cursor); free(ptr);

       The following example matches through the string  Testing3
       and  returns  the  address of the character after the last
       matched character (the ``4'').   The  string  Testing3  is
       copied  to  the  character array ret0.  char ret0[9]; char
       *newcursor,      *name;            ...        name       =
       regcmp("([A-Za-z][A-za-z0-9]{0,7})$0", (char *)0); newcur-
       sor = regex(name, "012Testing345", ret0);

       The  following  example  applies  a  precompiled   regular
       expression   in  file.i  [see  against  string.   #include
       "file.i" char *string, *newcursor;      ...   newcursor  =
       regex(name, string);

RReeffeerreenncceess
NNoottiicceess
       The user program may run out of memory if regcmp is called
       iteratively  without  freeing  the   vectors   no   longer
       required.

                                                                2

