

rpcgen(1tcp)                                         rpcgen(1tcp)

SSyynnooppssiiss
       rpcgen infile

       rpcgen [-Dname[=value]] [-T] [-K secs] infile

       rpcgen  -a  | -b | -c | -C | -h | -I | -l | -L | -m | -N |
       -Sc | -Ss | -Sm | -t [-o outfile] infile

       rpcgen -s nettype [-o outfile] infile

       rpcgen -n netid [-o outfile] infile

       rpcgen -i size

       rpcgen -Y path

DDeessccrriippttiioonn
       rpcgen is a tool that generates C code to implement an RPC
       protocol.  The  input to rpcgen is a language similar to C
       known as RPC Language (Remote Procedure Call Language).

   OOppttiioonnss
       rpcgen takes the following options:  Generate  all  files,
       including samples.  Backward compatibility mode (generates
       code for SunOS 4.1).  Compile into XDR routines.   ANSI  C
       mode.  Define a symbol name. Equivalent to the ``#define''
       directive in the source. If no value is  given,  value  is
       defined as 1. This option may be specified more than once.
       Compile into C data-definitions (a header  file).  The  -T
       option can be used in conjunction to produce a header file
       which supports RPC dispatch tables.  Generate inline  code
       of  size  size.  Generate code for inetd support in server
       (for SunOS 4.1).  By default, services created using  rpc-
       gen  wait  120  seconds  after  servicing a request before
       exiting. That interval can be changed using the  -K  flag.
       To create a server that exits immediately upon servicing a
       request, -K 0 can be used. To create a server  that  never
       exits, the appropriate argument is -K -1.

       When  monitoring  for  a  server, some port monitors, like
       always spawn a  new  process  in  response  to  a  service
       request.   If  it is known that a server will be used with
       such a monitor, the server should exit immediately on com-
       pletion.  For  such  servers,  rpcgen  should be used with
       -K -0.  Compile  into  client-side  stubs.   Print  server
       errors  to syslog.  Compile into server-side stubs, but do
       not generate a main() routine. This option is  useful  for
       doing  callback  routines  and for users who need to write
       their own main() routine to  do  initialization.   Compile
       into  server-side  stubs  for  the  transport specified by
       netid. There should be an entry for netid in the netconfig
       database.  This option may be specified more than once, so
       as to compile a server that  serves  multiple  transports.
       Support multiple arguments and call-by-value.  Specify the

                                                                1

rpcgen(1tcp)                                         rpcgen(1tcp)

       name of the output file. If none  is  specified,  standard
       output is used (-c, -h, -l, -m, -n, -s and -t modes only).
       Compile into server-side  stubs  for  all  the  transports
       belonging  to the class nettype. The supported classes are
       netpath, visible, circuit_n, circuit_v, datagram_n,  data-
       gram_v, tcp, and udp (see for the meanings associated with
       these classes). This option may  be  specified  more  than
       once.  Note that the transports are chosen at run time and
       not at compile time.  Generate  sample  client  code  that
       uses remote procedures.  Generate makefile template.  Gen-
       erate sample client code that defines  remote  procedures.
       Compile  into  RPC  dispatch  table.  Generate the code to
       support RPC dispatch tables.  Find cpp at path path.   The
       options  -c, -h, -l, -m, -s and -t are used exclusively to
       generate a particular type of file, while the  options  -D
       and  -T are global and can be used with the other options.

UUssaaggee
       rpcgen is normally used as in the first synopsis where  it
       takes an input file and generates up to four output files.
       If the infile is named proto.x, then rpcgen will  generate
       a  header  file  in  proto.h, XDR routines in proto_xdr.c,
       server-side stubs in proto_svc.c, and client-side stubs in
       proto_clnt.c.  With  the  -T option, it will also generate
       the RPC dispatch table in proto_tbl.i.

       The server created can be started both by the  port  moni-
       tors  (for example, inetd or listen) or by itself. When it
       is started by a port monitor, it creates servers only  for
       the  transport for which the file descriptor 0 was passed.
       The name of the transport must be specified by setting  up
       the  environment  variable  PM_TRANSPORT.  When the server
       generated by rpcgen is executed, it creates server handles
       for  all  the  transports specified in NETPATH environment
       variable, or if it is not set, it creates  server  handles
       for  all  the visible transports from /etc/netconfig file.
       Note that the transports are chosen at run time and not at
       compile  time.  When  the server is self-started, it back-
       grounds itself by default. A special  symbol,  RPC_SVC_FG,
       can be defined at compilation time to make the server pro-
       cess run in the foreground.

       The second synopsis provides special features which  allow
       for  the creation of more sophisticated RPC servers. These
       features include support for  user  provided  ``#define''s
       and  RPC  dispatch tables. The entries in the RPC dispatch
       table contain: pointers to the service routine correspond-
       ing  to  that  procedure a pointer to the input and output
       arguments the size of these routines A server can use  the
       dispatch  table to check authorization and then to execute
       the service routine; a client library may use it  to  deal
       with  the  details of storage management and XDR data con-
       version.

                                                                2

rpcgen(1tcp)                                         rpcgen(1tcp)

       The other three synopses shown above  are  used  when  one
       does not want to generate all the output files, but only a
       particular one. Some examples of their usage are described
       in  the  Example section. When rpcgen is executed with the
       -s option, it creates servers for that particular class of
       transports. When executed with the -n option, it creates a
       server for the transport specified by netid.  If infile is
       not specified, rpcgen accepts the standard input.

       The  C  preprocessor,  cc -E (see is run on the input file
       before it is actually interpreted by rpcgen. For each type
       of output file, rpcgen defines a special preprocessor sym-
       bol for use by the rpcgen programmer: defined when compil-
       ing into header files defined when compiling into XDR rou-
       tines  defined  when  compiling  into  server-side   stubs
       defined when compiling into client-side stubs defined when
       compiling into RPC dispatch tables Any line beginning with
       ``%''  is  passed  directly into the output file, uninter-
       preted by rpcgen.

       For every data type referred to in infile, rpcgen  assumes
       that  there  exists  a  routine  with  the string ``xdr_''
       prepended to the name of the data type.  If  this  routine
       does  not  exist  in  the RPC/XDR library, it must be pro-
       vided. Providing an undefined data type allows  customiza-
       tion of XDR routines.

WWaarrnniinnggss
       The  RPC  Language does not support nesting of structures.
       As a work-around, structures can be declared at  the  top-
       level,  and  their  name  used  inside other structures in
       order to achieve the same effect.

       Name clashes can occur  when  using  program  definitions,
       since  the apparent scoping does not really apply. Most of
       these can be avoided by giving unique names for  programs,
       versions, procedures and types.

       The  server  code  generated  with -n option refers to the
       transport indicated by netid and hence is very  site  spe-
       cific.

RReeffeerreenncceess
EExxaammpplleess
       The  following example: rpcgen -T prot.x generates all the
       five files: prot.h,  prot_clnt.c,  prot_svc.c,  prot_xdr.c
       and prot_tbl.i.

       The following example sends the C data-definitions (header
       file) to the standard output.  rpcgen -h  prot.x  To  send
       the  test version of the -DTEST, server side stubs for all
       the transport belonging to the class datagram_n  to  stan-
       dard  output,  use:  rpcgen -s datagram_n -DTEST prot.x To
       create the server side stubs for the  transport  indicated

                                                                3

rpcgen(1tcp)                                         rpcgen(1tcp)

       by netid tcp, use: rpcgen -n tcp -o prot_svc.c prot.x

                                                                4

