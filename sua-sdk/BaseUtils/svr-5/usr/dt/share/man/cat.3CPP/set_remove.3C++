

set_remove(3C++)                                 set_remove(3C++)

SSyynnooppssiiss
       template <class T> T* set_remove(
            const T& val,
            T*b,
            T* e ); template <class T> T* set_remove_r(
            int (*rel)(const T*,const T*),
            const T& val,
            T* b,
            T* e );

AAssssuummppttiioonnss
       (1)  For the plain version,  T::operator<  defines a total
       ordering relation on  T  and the array  is  sorted  w.r.t.
       that relation.

       (2)  For  the  relational  version,   rel  defines a total
       ordering relation on  T  and the array  is  sorted  w.r.t.
       that relation.

       (3) The input array does not contain any repetitions.

       (4) T  has  operator=.

DDeessccrriippttiioonn
       If  a sorted array with no repetitions contains an element
       equal to val,  these functions remove it  in  such  a  way
       that  the  array remains sorted.  They return a pointer to
       the cell just beyond the cell containing the last  remain-
       ing element.  template <class T> T* set_remove(
           const T& val,
           T* b,
           T* e
           );

       Uses   T::operator<  to find the element.  template <class
       T> T* set_remove_r(
           int (*rel)(const T*,const T*),
           const T& val,
           T* b,
           T* e
           );

       Uses  rel  to find the element.

CCoommpplleexxiittyy
       If  N  is the size of the array, then complexity is  O(N).
       At  most   N   assignments  and at most  lgN  tests of the
       ordering relation are done.

NNootteess
       All functions whose names begin with  set_   treat  arrays
       as sets (they share assumptions 1-3).  These all have lin-
       ear time complexity,  which  may  unacceptable  for  large
       sets.   As  an  alternative,  consider  using Set(3C++) or

                                                                1

set_remove(3C++)                                 set_remove(3C++)

       Bits(3C++) (if T is int).

       Because a Block (see Block(3C++)) can always be used wher-
       ever  an array is called for, Array Algorithms can also be
       used with Blocks.  In  fact,  these  two  components  were
       actually designed to be used together.

RReeffeerreenncceess

                                                                2

