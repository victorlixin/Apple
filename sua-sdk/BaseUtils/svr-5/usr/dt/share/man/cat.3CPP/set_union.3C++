

set_union(3C++)                                   set_union(3C++)

SSyynnooppssiiss
       template <class T> T* set_union(
            const T* b1,
            const T* e1,
            const T* b2,
            const T* e2,
            T* b3 ); template <class T> T* set_union_r(
            int (*rel)(const T*,const T*),
            const T* b1,
            const T* e1,
            const T* b2,
            const T* e2,
            T* b3 );

AAssssuummppttiioonnss
       For  the  plain  version,   T::operator<   defines a total
       ordering relation  T  and the array is sorted w.r.t.  that
       relation.   For  the  relational  version,  rel  defines a
       total ordering relation on  T  and  the  array  is  sorted
       w.r.t. that relation.  Neither of the input arrays has any
       repetitions.  The output array does not overlap either  of
       the  input  arrays.   The output array has enough cells to
       hold the result.  T  has  operator=.

DDeessccrriippttiioonn
       These functions put elements from two sorted  arrays  with
       no repetitions into a new sorted array with no repetitions
       so that for every element in the original arrays there  is
       an  element  in the result array that is equal to it.  The
       pointer to the cell following the last element of the  new
       array is returned.  template <class T> T* set_union(
           const T* b1,
           const T* e1,
           const T* b2,
           const T* e2,
           T* b3
           );

       Uses  T::operator<  to define the ordering relation.  tem-
       plate <class T> T* set_union_r(
           int (*rel)(const T*,const T*),
           const T* b1,
           const T* e1,
           const T* b2,
           const T* e2,
           T* b3
           );

       Uses  rel  to define the ordering relation.

CCoommpplleexxiittyy
       If  N  and M  are the sizes of the two arrays,  then  com-
       plexity is  O(N+M).  At most  N + M-1  tests of the order-
       ing relation and N+M  assignments are done.

                                                                1

set_union(3C++)                                   set_union(3C++)

NNootteess
       All functions whose names begin with  set_   treat  arrays
       as sets (they share assumptions 1-3).  These all have lin-
       ear time complexity,  which  may  unacceptable  for  large
       sets.   As  an  alternative,  consider using  Set(3C++) or
       Bits(3C++)  (if  T  is  int).

       Because a Block (see  Block(3C++))   can  always  be  used
       wherever an array is called for, Array Algorithms can also
       be used with Blocks.  In fact, these two  components  were
       actually designed to be used together.

RReeffeerreenncceess

                                                                2

