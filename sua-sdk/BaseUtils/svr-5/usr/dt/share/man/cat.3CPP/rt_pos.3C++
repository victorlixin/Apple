

rt_pos(3C++)                                         rt_pos(3C++)

SSyynnooppssiiss
       template <class T> const T* rt_pos(
            const T& val,
            const T* b,
            const T* e ); template <class T> const T* rt_pos_p(
            int (*pred)(const T*),
            const T* b,
            const T* e ); template <class T> const T* rt_pos_r(
            int (*rel)(const T*,const T*),
            const T& val,
            const T* b,
            const T* e );

AAssssuummppttiioonnss
       (1)  For  the  plain  version,   T::operator==  defines an
       equivalence relation on T.

       (2) For the relational version,  rel  defines  an  equiva-
       lence relation on T.

DDeessccrriippttiioonn
       These  functions return a pointer to the rightmost element
       satisfying some criterion.  If  no  such  element  can  be
       found,  they  return   0.   template  <class  T>  const T*
       rt_pos(
           const T& val,
           const T* b,
           const T* e
           );

       Uses equality with  val  as the criterion, with  T::opera-
       tor==   used  for  equality.   template <class T> const T*
       rt_pos_p(
           int (*pred)(const T),
           const T* b,
           const T* e
           );

       Uses the predicate pred as the criterion.  That is,  if  p
       is  a pointer into the array, then *p satisfies the crite-
       rion if pred(p) is true.   template  <class  T>  const  T*
       rt_pos_r(
           int (*rel)(const T*, const T),
           const T& val,
           const T* b,
           const T* e
           );

       Like   rt_pos   except  that  rel is used for the equality
       test.

CCoommpplleexxiittyy
       If  N  is the size of the array, then complexity is  O(N).
       At most N equality tests are done.

                                                                1

rt_pos(3C++)                                         rt_pos(3C++)

NNootteess
       Because  a  Block  (see   Block(3C++))  can always be used
       wherever an array is called for, Array Algorithms can also
       be  used  with Blocks.  In fact, these two components were
       actually designed to be used together.

RReeffeerreenncceess

                                                                2

