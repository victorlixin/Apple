

ins_sort(3C++)                                     ins_sort(3C++)

SSyynnooppssiiss
       template  <class  T>  void  ins_sort(T*  b,T* e); template
       <class T> void ins_sort_r(int (*rel)(const T*,const T*),
            T* b,T* e);

AAssssuummppttiioonnss
       (1) For the plain version, T::operator<  defines  a  total
       ordering relation on T.

       (2) For the relational version, rel defines a total order-
       ing relation on T.

       (3) T has operator=.

DDeessccrriippttiioonn
       These functions stably sort an array  in  place  using  an
       insertion   sort   algorithm.   template  <class  T>  void
       ins_sort(T* b,T* e);

       Uses T::operator< to define the ordering relation used  by
       the   sorting   algorithm.    template   <class   T>  void
       ins_sort_r(int (*rel)(const T*,const T*),T* b,T* e);

       Uses rel to define the ordering relation used by the sort-
       ing algorithm.

CCoommpplleexxiittyy
       If  N is the size of the array, then complexity is O(N*N).
       On average, N*N/4 tests of the ordering relation and N*N/4
       assignments are done.

NNootteess
       Insertion  sorting is the algorithm of choice when either:
       1) the size of the array is small; OR  2)  the  number  of
       elements out of order is small; OR 3) the average distance
       between the original position of an element and its  final
       destination  is small.  (By "small" we mean less than 16.)

       Because a Block (see  Block(3C++))   can  always  be  used
       wherever  an  array  is  called for,  Array Algorithms can
       also be used with Blocks.   In fact, these two  components
       were actually designed to be used together.

RReeffeerreenncceess

                                                                1

