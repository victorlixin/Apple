

mismatch(3C++)                                     mismatch(3C++)

SSyynnooppssiiss
       template <class T> const T* mismatch(
         const T* b1, const T* e1,
         const  T* b2, const T* e2 ); template <class T> const T*
       mismatch_r(
           int (*rel)(const T*,const T*),
           const T* b1, const T* e1,
           const T* b2, const T* e2 );

AAssssuummppttiioonnss
       (1) For  the  plain  version,  T::operator==   defines  an
       equivalence relation on T.

       (2)  For  the  relational version, rel  defines an equiva-
       lence relation on T.

DDeessccrriippttiioonn
       These functions return a pointer to the  leftmost  element
       within  the  first  array which is not equal to the corre-
       sponding element in the second array. Returns 0 if no mis-
       match occurs.  template <class T> const T* mismatch(
           const T* b1, const T* e1,
           const T* b2, const T* e2
           );

       Uses T::operator== to define equality.  template <class T>
       const T* mismatch_r(
           int (*rel)(const T*,const T*),
           const T* b1, const T* e1,
           const T* b2, const T* e2
           );

       Uses rel to define equality.

CCoommpplleexxiittyy
       If N and M are the sizes of the arrays,  the complexity is
       O(N+M). At most min(N,M) equality tests are done.

NNootteess
       Because  a  Block  (see  Block(3C++))   can always be used
       wherever an array is called  for,   Array  Algorithms  can
       also  be used with Blocks.   In fact, these two components
       were actually designed to be used together.

RReeffeerreenncceess

                                                                1

