

typeinfo(3C++)                                     typeinfo(3C++)

SSyynnooppssiiss
       #include <typeinfo>

       namespace std {
         class type_info;
         class bad_cast;
         class bad_typeid; }

DDeessccrriippttiioonn
       The   header  typeinfo defines a type associated with type
       information  generated  by  the  implementation.  It  also
       defines  two  types for reporting dynamic type identifica-
       tion errors.

   CCllaassss ttyyppee__iinnffoo
       namespace std {
         class type_info {
         public:
           virtual ~type_info();
           bool operator==(const type_info& rhs) const;
           bool operator!=(const type_info& rhs) const;
           bool before(const type_info& rhs) const;
           const char* name() const;
         private:
           type_info(const type_info& rhs);
           type_info& operator=(const type_info& rhs);
         }; } The class type_info describes type information gen-
       erated  by  the  implementation.   Objects  of  this class
       effectively store a pointer to a name for the type, and an
       encoded  value suitable for comparing two types for equal-
       ity or collating order.  The  names,  encoding  rule,  and
       collating  sequence  for types are all unspecified and may
       differ between programs.  Effects:  Compares  the  current
       object with rhs.
       Returns:  True  if  the two values describe the same type.
       Returns: !(*this == rhs).  Effects: Compares  the  current
       object with rhs.
       Returns:  True  if  *this  precedes rhs in the implementa-
       tion's collation order.  Returns: A  null-terminated  byte
       string containing the name of the type.
       Notes:  The  message  may  be  a null-terminated multibyte
       string, suitable for conversion and display as a  wstring.
       Effects: Copies a type_info object.
       Notes:  Since the copy constructor and assignment operator
       for type_info are private to the class,  objects  of  this
       type cannot be copied.

   CCllaassss bbaadd__ccaasstt
       namespace std {
         class bad_cast : public exception {
         public:
           bad_cast() throw();
           bad_cast(const bad_cast&) throw();
           bad_cast& operator=(const bad_cast&) throw();

                                                                1

typeinfo(3C++)                                     typeinfo(3C++)

           virtual ~bad_cast() throw();
           virtual const char* what() const throw();
         };  }  The  class  bad_cast  defines the type of objects
       thrown as exceptions by the implementation to  report  the
       execution of an invalid dynamic-cast expression.  Effects:
       Constructs an object of class bad_cast.   Effects:  Copies
       an   object   of  class  bad_cast.   Returns:  The  string
       std::bad_cast.

   CCllaassss bbaadd__ttyyppeeiidd
       namespace std {
         class bad_typeid : public exception {
         public:
           bad_typeid() throw();
           bad_typeid(const bad_typeid&) throw();
           bad_typeid& operator=(const bad_typeid&) throw();
           virtual ~bad_typeid() throw();
           virtual const char* what() const throw();
         }; } The class bad_typeid defines the  type  of  objects
       thrown  as  exceptions  by  the implementation to report a
       null pointer in a typeid expression.  Effects:  Constructs
       an  object of class bad_typeid.  Effects: Copies an object
       of class bad_typeid.  Returns: The string std::bad_typeid.

                                                                2

