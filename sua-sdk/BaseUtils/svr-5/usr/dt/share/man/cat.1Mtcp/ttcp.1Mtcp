

ttcp(1Mtcp)                                           ttcp(1Mtcp)

SSyynnooppssiiss
       ttcp  -t  [-A  align]  [-b size] [-d] [-D] [-f format] [-l
       buflen] [-n numbufs] [-O offset] [-p port] [-s] [-u]  [-v]
       dest_machine

       ttcp  -r  [-A  align]  [-b size] [-B] [-d] [-f format] [-l
       buflen] [-O offset] [-p port] [-s] [-T] [-u] [-v]

DDeessccrriippttiioonn
       ttcp times the transmission and reception of data  between
       two  systems  using  the  UDP or TCP protocols. It differs
       from common ``blast'' tests, which  tend  to  measure  the
       remote  inetd as much as the network performance and which
       usually do not allow measurements at the remote end  of  a
       UDP transmission.

       For  testing,  start  the transmitter with -t and -s after
       starting the receiver with -r and -s.   Tests  lasting  at
       least  tens  of  seconds should be used to obtain accurate
       measurements.  Graphical presentations of throughput  ver-
       sus  buffer size for buffers ranging from tens of bytes to
       several pages can illuminate bottlenecks.

       Without the -s option, the default behavior is to transmit
       data  from  stdin (-t specified) or to print received data
       to stdout (-r specified).

   OOppttiioonnss
       Align the  start  of  buffers  to  this  modulus  (default
       16384).   Set  size  of socket buffer.  The default varies
       from system to system.  This parameter affects the maximum
       UDP  packet length.  When receiving data, output only full
       blocks, using the block size specified by -l.  This option
       is useful for programs, such as tar, that require complete
       blocks.  Debug: set the SO_DEBUG socket option.  If trans-
       mitting  using  TCP, do not buffer data when sending (sets
       the TCP_NODELAY socket option).  Specify the format of the
       throughput  rate: kilobits per second kilobytes per second
       (default) megabits per second megabytes per  second  giga-
       bits  per second gigabytes per second Length of buffers in
       bytes (default 8192).  For UDP, this value is  the  number
       of data bytes in each packet.  The system limits the maxi-
       mum UDP packet length. This limit can be changed with  the
       -b  option.  Number of source buffers to transmit (default
       2048).  Align the start of buffers to this offset (default
       0).   For  example,  -A8192 -O1 causes buffers to start at
       the second byte of an 8192-byte page.  Port number to send
       to  or  listen  on  (default 5001).  On some systems, this
       port may be allocated to another network daemon.   Receive
       mode.   If  transmitting, send fabricated data to the net-
       work; if receiving, sink  (discard)  the  data.   Transmit
       mode.   Touch:  access  each byte of data as it is read in
       order to measure cache effects.  Use UDP instead  of  TCP.
       Verbose: print more statistics.

                                                                1

ttcp(1Mtcp)                                           ttcp(1Mtcp)

RReeffeerreenncceess
EExxaammpplleess
       To  set  up  a  simple  TCP  throughput  test  between the
       machines alpha (transmitter) and bravo  (receiver),  first
       enter  the following command on bravo: ttcp -r -n 32768 -s
       Then enter the following command  on  alpha:  ttcp  -t  -n
       32768 -s IP_bravo IP_bravo is the IP address of bravo.  To
       measure UDP throughput, the -u option should also be spec-
       ified at both ends.

       ttcp  can  also  be  used as a ``network pipe'' for moving
       directory hierarchies between systems when  routing  prob-
       lems exist or when the use of other mechanisms is undesir-
       able. For example, on the destination machine,  use:  ttcp
       -r  -B  |  tar xvpf - On the source machine, use: tar cf -
       directory  |  ttcp  -t  dest_machine   Machines   can   be
       ``chained''  by  running  the  following  command  on each
       intermediate machine: ttcp -r | ttcp -t next_machine

                                                                2

