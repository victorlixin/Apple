

rtpm(1M)                                                 rtpm(1M)

SSyynnooppssiiss
       rtpm [-h history_buffer_size] [interval]

DDeessccrriippttiioonn
       The  command  rtpm  displays  operating system performance
       metrics and usage information in an interactive  real-time
       curses-based graphical display.

       The  interval  argument  specifies  the  time  in  seconds
       between successive samples of the performance information.
       The default interval is two seconds.

       The  history_buffer_size  argument specifies the number of
       history data points rtpm saves for plotting metrics.   The
       default value for the history buffer size is the number of
       columns on the screen, as specified by the $COLUMNS  envi-
       ronment variable.

   SSccrreeeenn ssiizzee
       Using  the  IOCGWINSZ  ioctl system call, rtpm attempts to
       automatically determine your screen size  and  adjust  the
       display  accordingly.  However, if the $LINES and $COLUMNS
       environment variables are set, they take  precedence  over
       the  ioctl  call.   In  no  case  will  the screen size be
       smaller than 24 rows by 80 columns.

   SSccrreeeenn llaayyoouutt
       The rtpm screen is divided into three areas.  The top por-
       tion of the screen shows the graphical display, the bottom
       line of the screen displays the status of the monitor, and
       14 lines between the graphical display area and the status
       line display text-based metric information.

       The graphical display area contains a  bar  graph  of  CPU
       consumption,  plots  of  metric  data, or both.  The text-
       based metric display area consists of numeric metric data,
       labels  for  the  metric data, and subscreen headers.  The
       numeric metric data, subscreen headers,  and  plot  titles
       are cursor addressable.

   VViieewwss
       The  metrics  are  available in either of two views: a CPU
       view and a CG view.  In the CPU view, the metrics are dis-
       played on a per-processor basis.  In the CG view, the met-
       rics are displayed on a per-CPU group  basis,  where  each
       CPU group consists of a set of processors.

       You  can  toggle  between views using the g or G key.  The
       default view is the CPU view.

   SSttaattuuss lliinnee
       The bottom line of the screen is the status display  area.
       Typically,  it  contains  the  name  of  the  machine,  as
       returned by the system call, the current  date  and  time,

                                                                1

rtpm(1M)                                                 rtpm(1M)

       the  requested  sampling interval, and the actual interval
       sampled.  Two other messages may be displayed on the  sta-
       tus line.  The first is the message LOCKED that means rtpm
       has been locked in memory by the system call; only  privi-
       leged users are allowed to do this.  The second message is
       Enter <?> for help.

   CCuurrssoorr mmoottiioonnss
       Move the cursor by pressing any  of  the  following  case-
       insensitive  keys:  the terminal arrow keys H, J, K, L (as
       in vi) F, B, P, N (as in emacs)

   PPlloottttiinngg mmeettrriiccss
       When the cursor is on a numeric metric data item, pressing
       either  or the  key causes the metric to be plotted in the
       graphical display area.  The number  of  concurrent  plots
       allowed depends on the size of the screen.  A minimum of 7
       rows and 40 columns  in  the  graphical  display  area  is
       required  for  a  single  plot.   On a 24 row by 80 column
       screen, two concurrent plots  can  be  displayed.   Larger
       screens accommodate more plots.

       When  the cursor is placed on a plot (or bar graph) title,
       pressing either  or the  key removes  the  plot  (or  bar-
       graph) from the graphical display area.

       Pressing  C clears whatever is in the upper-left corner of
       the graphical display area.

       Scales for plots are determined by the maximum value  con-
       tained  in  the  history  buffer  at  the time the plot is
       requested.  If a later metric value  is  larger  than  the
       initial scale, the plot automatically re-scale to accommo-
       date the larger value.  Plots  do  not  automatically  re-
       scale  to smaller values.  Removing a plot and re-display-
       ing it causes a new scale to be determined as above.

   DDiissppllaayyiinngg tthhee bbaarrggrraapphh
       Use B to toggle on and off the display of the CPU consump-
       tion bar graph.

   CChhaannggiinngg tthhee ssaammpplliinngg iinntteerrvvaall
       The sampling interval can be set by an argument at invoca-
       tion.  The default sampling interval is two seconds.   The
       sampling  interval  may be changed at any time by pressing
       either + or -, which increments or decrements the interval
       by  one second.  The minimum sampling interval is one sec-
       ond.  Users should note that a one second sampling  inter-
       val  places a moderate load on the system, and is not par-
       ticularly useful for identifying system problems.

   GGeettttiinngg hheellpp
       Press ? to display the help screen in the text portion  of
       the screen.  Press  to return to the previous screen.

                                                                2

rtpm(1M)                                                 rtpm(1M)

   QQuuiittttiinngg rrttppmm
       Press Q or D to exit rtpm.

   AAcccceessssiinngg ssuubbssccrreeeennss
       Press   or   while  the cursor is on a subscreen header to
       change the text-based metric  display  to  the  subscreen.
       Press   to  return  to  the  previous screen.  Twelve sub-
       screens are available from the top level screen:  Per-pro-
       cessor/per-CG  CPU  consumption  statistics.   Per-proces-
       sor/per CG system calls  statistics.   Memory  consumption
       and  kernel memory allocator statistics.  Paging and swap-
       ping statistics.  File system  calls  and  tables,  buffer
       cache, inode and directory block statistics.  Per-disk I/O
       statistics.  Per-processor/per-CG terminal I/O statistics.
       Run and swap queue statistics, and per-processor local run
       queue and process switching statistics.  The  CG  view  is
       not  supported  for  these  statistics.   Process  and LWP
       (light weight process) statistics.  Device level  ethernet
       networking   statistics.   TCP/IP  networking  statistics.
       Five of the twelve screens accessible from the  top  level
       screen  contain  further subscreens that can be displayed:
       Per-processor/per-CG page in statistics  Per-processor/per
       CG  page  out and swapping statistics Per-processor/per CG
       filesystem calls and directory name lookup  cache  statis-
       tics  Per-processor/per  CG  buffer  cache statistics Per-
       filesystem inode table statistics  and  file  table,  file
       lock  table,  and  wio  statistics Inode get and directory
       block statistics that are reported per processor/perCG and
       filesystem  type.   Inode  reclaims with pages and without
       pages that are reported per processor/per CG and  filesys-
       tem  type.  Per-device ethernet packet and octet rates and
       queue lengths.  Per-device ethernet  input  errors.   Per-
       device  ethernet  output  errors.   ICMP  statistics.  TCP
       statistics.  IP statistics.

   DDiissppllaayy eexxaammppllee
       The default startup display looks like this:
        CPU                                                     0
       ====================================================-------------------
        CPU 1  ===-------
        CPU 2  -
        CPU 3  -
        total  ============================------------ %s=  _%u-
       |______________10|_ _ ___2_0_|_____3_0_|_____4_0_|_____5_0_|_____6_0_|____
      _7_0_|_____8_0_|_____9_0_|____1_0_0_|_

             CPU:         CALLS/s:         IO/s:           QUEUE:
       TTY/s:       ETHER:
            58  %cpu     3460  calls       0  reads       1  runq
       0 rcvs       1 xpkt/s
            42  %usr        0  forks       0  rdblk     100  %run
       0 xmit       1 rpkt/s
            18  %sys        0  execs       0  writs       0 prunq
       0 mdms     211 xoct/s

                                                                3

rtpm(1M)                                                 rtpm(1M)

            40 %int       20  reads       0  wrblk       0  %prun
       0 canch     60 roct/s
             0  %wio        2  writs       0  qlen        0  swpq
       0 rawch      0 xerrs
            42  %idl        0  Krwch       0  %busy       0  %swp
       143 outch    496 rerrs

           MEMORY:        PAGING/s:      FILESYS/s:         LWPS:
       NETWARE:     TCP/IP:
           973  kma         0  pgins       0  igets      54  lwps
       0 spx/s      2 tcp/s
         10161   frmem       0  pgots     684  lkups       0  run
       0 ipx/s      0 udp/s
         32149 frswp       0  atchs       0  dirbk      52  sleep
       0 sap/s      0 icmp/s
            38  %mem        0  pflts     100  %dnlc       0  zomb
       0 rip/s      2 ip/s
             8 %swp        0  vflts     161  inode      30  procs
       0 errs       1 errs

       UNIX_SV   lycia              Thu   Sept  1  16:04:11  1998
       interval:    1 (1.00) In the default  startup  display,  a
       bar graph of CPU utilization is displayed in the graphical
       portion of the screen.  When rtpm is run on  a  multi-pro-
       cessor  system,  there  is  a bargraph for each CPU on the
       system and one for total CPU  consumption.   Systems  with
       more  than four processors require a screen size that con-
       tains more than 24 rows to display the entire  bar  graph.
       When  rtpm  is  run  on  a  small screen and is displaying
       statistics for a large multi-processor configuration,  not
       all  CPUs are displayed in the bar graph.  A scroll bar at
       the left of the bar graph shows whether the bar graph  can
       be  scrolled up or down.  The bar graph may be scrolled up
       and down with the ^ and V keys.  In the CG view,  the  bar
       graph is displayed for CG-based CPU usage.

       Pressing  the  I  key  when  the CPU bargraph is displayed
       reports the percentage time spent  processing  interrupts;
       pressing  I again turns off the display of interrupt data.
       Time spent in interrupt handling is represented by  the  +
       character as shown in the following display.
        CPU                                                     0
       ====================================================++++++-------------
        CPU 1  ===-------
        CPU 2  -
        CPU 3  -
        total   ============================+++--------- s= i+ u-
       |______________10|_____2_0_|_____3_0_|_____4_0_|_____5_0_|_____6_0_|__ _ _
      _7_0_|_____8_0_|_____9_0_|____1_0_0_|_

       If   the  bargraph  is  cleared  and  the  percentage  cpu
       (usr+sys+int) time metric is plotted,  the  display  looks
       like this: %cpu total 100
        80                                                   ||||

                                                                4

rtpm(1M)                                                 rtpm(1M)

       ||            ||||
        60
       |||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||
        40
       |||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||
        20
       |||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||

             CPU:         CALLS/s:         IO/s:           QUEUE:
       TTY/s:       ETHER:
            58  %cpu     3478  calls       0  reads       1  runq
       0 rcvs       1 xpkt/s
            42  %usr        0  forks       0  rdblk     100  %run
       0 xmit       1 rpkt/s
            15  %sys        0  execs       0  writs       0 prunq
       0 mdms     291 xoct/s
            43 %int       20  reads       0  wrblk       0  %prun
       0 canch    154 roct/s
             0  %wio        2  writs       0  qlen        0  swpq
       0 rawch      0 xerrs
            42  %idl        0  Krwch       0  %busy       0  %swp
       223 outch    499 rerrs

           MEMORY:        PAGING/s:      FILESYS/s:         LWPS:
       NETWARE:     TCP/IP:
           974  kma         0  pgins       0  igets      56  lwps
       0 spx/s      2 tcp/s
         10814   frmem       0  pgots     687  lkups       0  run
       0 ipx/s      0 udp/s
         32113 frswp       0  atchs       0  dirbk      54  sleep
       0 sap/s      0 icmp/s
            34  %mem        0  pflts     100  %dnlc       0  zomb
       0 rip/s      2 ip/s
             8 %swp        0  vflts     162  inode      32  procs
       0 errs       1 errs

       UNIX_SV   lycia              Thu   Sept  1  16:10:10  1998
       interval:    1 (1.00) Several plotting types are available
       by  entering  the P key; the above screen shows a vertical
       bar plot, and the following is an  example  of  a  scatter
       plot  that  consists of a single plotted point per sample.
       %cpu                       total                       100
       *
        80
       ********************************************************************
       ******
        60
        40
        20
         0
       ___________________________________________________________________________
       Accessing  the LWP subscreen displays statistics about the
       number of processes and light weight processes, as well as
       some  ps-like  information  about  the  LWPs that have run

                                                                5

rtpm(1M)                                                 rtpm(1M)

       during the sampling interval.  In this example, a  runaway
       user  process  is consuming over half of the available CPU
       cycles: % cpu total 100
        80                                                 **
        60       ************************************************
       *************************
        40
        20
         0
       ___________________________________________________________________________

             56  lwps              0 runnable lwps       0 zombie
       lwps      32 procs
              2 lwps on CPU      54 sleeping  lwps        0  idle
       lwps       400 procmax
              0  lwpfail            0 stopped  lwps       0 other
       lwps        0 procfail

       %%% S     USER   PID LWPID CPU PRI    CPUTIME    SIZE  TTY
       CMD[LWP]
        51  O      root    375      1   0   0  433:47.00   4339 ?
       runaway_proc
         7 O     root   728     1   1  53    2:52.24   4592 pts/3
       ./rtpm 1
         0  S      root      0     23   1  79    0:25.77      0 ?
       sysproc[vx_inact_da
         0 S     root     0    19   1   79     0:00.23       0  ?
       sysproc[vx_inact_da
         0  S      root      0      2   1  79    4:02.75      0 ?
       sysproc[fsflushwp]
         0 S     root     0    14   1   79     2:12.47       0  ?
       sysproc[vx_flush_da

       UNIX_SV   lycia              Thu   Sept  1  16:28:18  1998
       interval:    1 (1.00) By default, the LWP  subscreen  dis-
       plays  all processes that have been active during the sam-
       pling period.  Pressing U or S while the LWP subscreen  is
       displayed  limits  the  data  to user or system processes,
       respectively.  Pressing the A key reports all active  user
       and  system processes.  The e key acts as a toggle switch:
       pressing E once displays all processes, including sleeping
       processes;  pressing  E again causes only active processes
       to be displayed.  The keys can be  used  in  combinations:
       pressing A and E will show all of the processes (including
       sleeping processes) that are on the system, pressing U and
       E  will show all of the user processes, and pressing S and
       E will show all of the system  processes.   If  more  pro-
       cesses  run  during the sampling interval than will fit on
       the screen, the < and > keys can be used to scroll through
       the list.

       In  the CG view, an extra column is added to the PS output
       to display the CG on which a lwp is executing.

                                                                6

rtpm(1M)                                                 rtpm(1M)

       On systems with a large number of CPUs, disks, or ethernet
       cards,   the   per-unit   metrics  associated  with  these
       resources may not fit on a small screen.  When  this  hap-
       pens, <-, ->, or <> will be displayed at the right edge of
       the screen and the < and > keys can be used to scroll  the
       per-resource  metrics  left  and right.  Moving the cursor
       off the edge of the screen also scrolls per-resource  met-
       rics.

   CCoommmmaanndd ssuummmmaarryy
       The arrow keys, H, J, K, L, and B, N, P, F move the cursor
       left, down, up, and right, respectively.  You  can  toggle
       between  the  CPU  and CG views using the g or G key.  The
       default view is the CPU view.  Press  or  the   key  while
       the  cursor  is  on  a  numeric metric to plot the metric.
       Enter P to change the plotting format.  Press the  bar  or
       the  key while the cursor is on a plot title to delete the
       plot.  Pressing C deletes the plot (or bar graph)  in  the
       upper left corner of the screen.  Press  or the  key while
       the cursor is on a subscreen header to  display  the  sub-
       screen  associated  with  the header.  Press  to return to
       the previous screen.  Enter ? to display the help  screen.
       Press  to return to the previous screen.  Privileged users
       can use X as a toggle to lock or unlock  rtpm  in  memory.
       Press B to toggle on and off the display of the percentage
       CPU consumption bar graph.   On  multi-processing  systems
       that cannot fit information about all their processors/CGs
       within the available display area, the ^ and V keys scroll
       the bar graph up and down.  The + and - keys increment and
       decrement the sampling interval.  When  the  text  display
       area  is not large enough to display all per-resource met-
       rics, scroll the display using the cursor keys  or  the  <
       and  >  keys.   Scroll the LWP screen that displays the ps
       data using the < and > keys.  The ps report can be limited
       to  user  or system, or to show all processes by the U, S,
       and A keys, respectively.  Some  termcap  entries  do  not
       handle  the terminal underscore capability correctly.  Use
       the _ key to toggle between selecting whether  rtpm  tries
       to  use  the underscore attribute or draws an ASCII under-
       score character.  Enter L to redraw the screen.   Enter  Q
       or D to exit rtpm.

   IInniittiiaalliizzaattiioonn ffiillee
       When rtpm is invoked, it attempts to read the .rtpmrc ini-
       tialization file from the user's home directory.   If  the
       .rtpmrc  file  is  not found in the user's home directory,
       the system default /etc/.rtpmrc is used.

       The native language in which the .rtpmrc file  is  written
       is  specified  by the expression LANG=language, where lan-
       guage is a locale name describing the message  catalog  to
       be used for reading the initialization file.  For example,
       setting LANG=C  specifies  the  default  English  language
       strings  as  used in /etc/.rtpmrc.  Note that setting LANG

                                                                7

rtpm(1M)                                                 rtpm(1M)

       in the .rtpmrc file does not affect the messages displayed
       by rtpm.

       The  initialization  file can be used to specify a default
       set of metrics to plot at initialization  time,  and  also
       specifies  the  display  colors for color terminals.  Each
       line of the initialization file  consists  of  a  name,  a
       colon,  and  an expression that specifies color or default
       plotting status.

       The following display elements are specified in  the  ini-
       tialization  file:  the  background  color.   the  default
       numeric metric display color.  the default plotting color.
       the display color for metric and plot labels.  the display
       color for cursor addressable subscreen  headers  and  plot
       titles.   the  display  color  for informational and error
       messages.  the display color range for the %CPU bar graph.
       the  display color ranges and plotting status for individ-
       ual metrics.  Each of the above display  elements  may  be
       assigned  one  of the following colors: magenta, red, yel-
       low, green, cyan, blue, black, and  white.   The  bargraph
       and  metrics can be assigned a color range expression, and
       metrics can be assigned a plotting status.

       Color range expressions are used to assign display  colors
       to ranges of metric values.  A color range expression con-
       sists of a series of numbers,  relational  operators,  and
       colors:    <color_range>::   <RANGE>[;<RANGE>]   <RANGE>::
            [<num><OP>]<color>[<OP><num><OP><color>]*[<OP><num>]
       <OP>::       <  |  <=  | > | >= | == | != For example bar-
       graph: 0 <= green < 60 <= yellow < 85 <= red sets the bar-
       graph  to green if CPU consumption is below 60%, yellow if
       it is between 60% and 85%, and red if it is  greater  than
       85%.

       Multiple  expressions may be used, provided they are sepa-
       rated by semicolons.  Since expressions  are  tested  from
       left  to  right, the following expression is equivalent to
       the one above: bargraph: green < 60 ; yellow < 85 ; red In
       the  text-based metric display area, the color assigned to
       default is used to display the  numeric  metric  unless  a
       color  expression  specifies otherwise.  In the plot area,
       the color assigned to plot is used  to  display  the  plot
       characters  unless a color expression specifies otherwise.
       In both the text-based and graphical display areas,  if  a
       color  expression is true, the metric will be displayed in
       the color defined by the  expression.   Typically,  colors
       will  vary  from  green  to yellow to red depending on the
       severity of a condition.  On  vertical  bar  chart  plots,
       this  will  have  the  effect  of several color bands, one
       above the other.

       For metrics that indicate an  alarm  condition  when  they
       approach  0,  such  as  free  memory, the user may want to

                                                                8

rtpm(1M)                                                 rtpm(1M)

       invert the plot so that 0 is displayed as the top  of  the
       y-axis  as opposed to the bottom.  Thus the plot will only
       display the alarm color under severe conditions.

       To invert a plot, add the invert keyword to  a  metric  in
       the  initialization file: freemem: 1000 >= yellow > 500 >=
       red ; invert Plot status expressions are used  to  specify
       metrics  that  are  to  be  plotted  when rtpm is invoked.
       Since metrics can be per-resource based, a metric is actu-
       ally  a  set  of values called instances.  A metric has an
       instance for each resource (or combination  of  resources)
       on  which  it  is  based.  For example, freemem is global,
       %usr time is kept per-CPU, and igets/s are kept both  per-
       CPU  and per-filesystem.  Hence, there is one instance for
       freemem, n CPU instances for %usr,  and  n  CPU  *  nfstyp
       instances for igets/s.  A plot expression is used to spec-
       ify the set of instances the user wants to plot.  Here are
       some  examples  of  plot expressions: plot a single global
       metric or the total of a resource based metric.  plot  the
       total  of  a  metric  that  has  one  resource.   plot the
       instance associated with resource number such as  plot(2))
       to  plot  the  value associated with CPU #2.  plot all the
       instances associated with this single dimensional  metric.
       plot  the instance associated with the first resource of 2
       and the second resource of 3, such as igets/s for  CPU  #2
       and  filesys  #3.  Multiple plot expressions are separated
       by semi-colons.  If there is not enough room on the screen
       for  the  requested  plots, the ones specified last in the
       initialization file are displayed, and no error message is
       generated.

   UUssaaggee nnoottee
       On  heavily  loaded  systems  where  memory is scarce, and
       especially with large screen sizes, rtpm may fail to allo-
       cate enough space to save all its history points.  If this
       is the case, the history buffer size should  be  decreased
       using  the -h option.  On systems with ample memory, large
       display screens may benefit from  increasing  the  history
       buffer size to the number of columns on the screen.

   LLiisstt ooff mmeettrriiccss
       The  following  is  a list of all the metrics displayed by
       rtpm:

   MMaacchhiinnee rreessoouurrccee iinnffoorrmmaattiioonn
       the number of processors on the system the number of  disk
       drives on the system the number of filesystem types in the
       system the names of the filesystems in the system the num-
       ber  of  kernel  memory  allocator pools in the system the
       sizes of the kernel memory allocator pools the  page  size
       of  the  system the names of the disk drives on the system
       the number of ethernet cards on the system  the  names  of
       the ethernet devices on the system

                                                                9

rtpm(1M)                                                 rtpm(1M)

   CCPPUU ccoonnssuummppttiioonn ssttaattiissttiiccss
       the  percentage  of  user, system time and time spent pro-
       cessing interrupts (per CPU/per CG) the  waiting  for  I/O
       and idle time (per CPU/per CG) the percentage of user time
       (per CPU/per  CG)  the  percentage  of  system  time  (per
       CPU/per CG) the percentage of system time spent processing
       interrupts (per CPU/per CG) the percentage of waiting  for
       I/O time (per CPU/per CG) the percentage of idle time (per
       CPU/per CG)

   FFiilleessyysstteemm ssttaattiissttiiccss
       the number of inode get operations per second (per CPU/per
       CG and filesystem) the number of directory blocks read per
       second (per CPU/per  CG  and  filesystem)  the  number  of
       inodes  reclaimed  with  associated  pages per second (per
       CPU/per CG and filesystem) the number of inodes  reclaimed
       without  associated  pages  per second (per CPU/per CG and
       filesystem) the current number of  outstanding  filesystem
       i/o  jobs  the  current number of outstanding physical i/o
       jobs the number of file table entries in use the number of
       failed  attempts  to  get a file table entry the number of
       failed attempts to get a file table entry per  second  the
       maximum  number  of  file lock table entries the number of
       file lock table  entries  in  use  the  number  of  failed
       attempts  to  get  a  file  lock table entry the number of
       failed attempts to get a file lock table entry per  second
       the  number of attempts to get a file lock table entry per
       second the maximum number of inodes allowed (per  filesys-
       tem)  the current number of inodes allocated (per filesys-
       tem) the number of inodes in use (per filesystem) the num-
       ber  of failed attempts to allocate an inode (per filesys-
       tem)

   MMeemmoorryy ssttaattiissttiiccss
       the amount of free memory  in  the  system  in  pages  the
       amount  of  free  swap  memory  in the system in pages the
       amount of memory used by the  kma  pools  (per  pool)  the
       amount of memory allocated by the kma pools (per pool) the
       amount of memory requested of the kma pools (per pool) the
       number  of  failed  kma  requests (per pool) the number of
       pages being used by the kernel memory allocated  the  per-
       centage  of  memory  in  use the percentage of memory swap
       space in use the percentage of disk swap space in use  the
       number  of pages of disk swap space in the system the num-
       ber of pages of free disk swap space  in  the  system  the
       number  of  swap  memory pages in the system the number of
       memory pages in the system

   PPaaggiinngg aanndd sswwaappppiinngg ssttaattiissttiiccss
       the number of pre-attaches per second (per CPU/per CG) the
       number  of attaches per second (per CPU/per CG) the number
       of attaches from the free list per second (per CPU/per CG)
       the  number  of attaches from the free list which resulted
       in a page out operation per second (per  CPU/per  CG)  the

                                                               10

rtpm(1M)                                                 rtpm(1M)

       number  of  attach  misses  (per CPU/per CG) the number of
       page in operations per second (per CPU/per CG) the  number
       of  pages  paged in per second (per CPU/per CG) the number
       of page in operations per second (per CPU/per CG) the num-
       ber  of  pages  paged  out per second (per CPU/per CG) the
       number of swap out operations per second (per CPU/per  CG)
       the  number  of physical pages swapped out per second (per
       CPU/per CG) the number of virtual pages  swapped  out  per
       second  (per  CPU/per CG) the number of swap in operations
       per second (per CPU/per CG) the number of pages swapped in
       per second (per CPU/per CG) the number of pages scanned by
       page freeing algorithms per second (per  CPU/per  CG)  the
       number  of  virtual pages freed by page freeing algorithms
       per second (per CPU/per CG) the number of  physical  pages
       freed  by  page freeing algorithms per second (per CPU/per
       CG) the  number  of  protection  faults  per  second  (per
       CPU/per  CG) the number of validity faults per second (per
       CPU/per CG) the number of  software  lock  operations  per
       second (per CPU/per CG)

   PPrroocceessss sswwiittcchhiinngg aanndd qquueeuueeiinngg ssttaattiissttiiccss
       the number of process switches per second (per CPU/per CG)
       the mean run queue length the percentage of time  the  run
       quqe  was occupied the mean swap queue length the percent-
       age of time the swap queue was occupied the length of  the
       processor  local run queue (per CPU/per CG) the percentage
       time the processor  local  run  queue  was  occupied  (per
       CPU/per CG)

   SSyysstteemm ccaallll ssttaattiissttiiccss
       the number of system calls per second (per CPU/per CG) the
       number of fork calls per second (per CPU/per CG) the  num-
       ber  of  lwpcreate  calls  per second (per CPU/per CG) the
       number of exec calls per second (per CPU/per CG) the  nub-
       mer  of  read calls per second (per CPU/per CG) the number
       of write calls per second (per CPU/per CG) the  number  of
       characters  read per second (per CPU/per CG) the number of
       characters written per second (per CPU/per CG) the  number
       of filename lookup operations  per second (per CPU/per CG)
       the number of directory name lookup cached hits per second
       (per CPU/per CG) the number of directory name lookup cache
       misses per second (per CPU/per CG) the  number  of  blocks
       read into the buffer cache per second (per CPU/per CG) the
       number of blocks written from the buffer cache per  second
       (per  CPU/per  CG)  the number of logical blocks read from
       the buffer cache per second (per CPU/per CG) the number of
       logical blocks written to the buffer cache per second (per
       CPU/per CG) the number of  physical  read  operations  per
       second (per CPU/per CG) the number of physical write oper-
       ations per second (per CPU/per CG) the number of ipc  mes-
       sage  queues sent and received per second (per CPU/per CG)
       the number of ipc semaphore  operations  per  second  (per
       CPU/per  CG) the number of read and write system calls per
       second  the  number  of  characters  read  and  characters

                                                               11

rtpm(1M)                                                 rtpm(1M)

       written (in Kbytes) per second the percentage of directory
       name lookup cache hits (per CPU/per CG) the percentage  of
       buffer  cache reads that were satisfied by a read from the
       buffer cache (per CPU/per CG)  the  percentage  of  buffer
       cache  writes  that  wrote  to a block in the buffer cache
       (per CPU/per CG)

   TTeerrmmiinnaall II//OO ssttaattiissttiiccss
       the number of receiver interrupts per second (per  CPU/per
       CG)  the  number of transmitter interrupts per second (per
       CPU/per CG) the number of modem interrupts per second (per
       CPU/per  CG)  the number of raw characters written to ttys
       per second (per CPU/per CG) the number of canonical  char-
       acters  written  to  ttys  per second (per CPU/per CG) the
       number of output characters to tty per second (per CPU/per
       CG)

   PPrroocceessss aanndd LLWWPP ((LLiigghhtt wweeiigghhtt pprroocceessss)) ssttaattiissttiiccss
       the number of failed attempts to get a process table entry
       the number of process table entries  in  use  the  maximum
       number  of  process  table  entries  the  number of failed
       attempts to create a lwp the number of lwps  in  uses  the
       maximum  number  of  lwps allowed the number of sleep lwps
       the number of runnable lwps the number of  idle  lwps  the
       number  of  lwps currently on a processor/CG the number of
       zombied lwps the number of  stopped  lwps  the  number  of
       other  lwps  the  total  number of lwps the number of pro-
       cesses in the system

   DDiisskk ssttaattiissttiiccss
       The following statistics are given for each disk.   Press-
       ing  Enter,  or  the space bar, on a disk header gives the
       statistics for the individual slices of  that  disk.   the
       instantaneous  disk queue length (per disk) the percentage
       time the disk was busy (per  disk)  the  mean  disk  queue
       length  (per  disk) the number of disk read operations per
       second (per disk) the number of disk blocks read per  sec-
       ond  (per  disk)  the  number of disk write operations per
       second (per disk) the number of disk  blocks  written  per
       second (per disk)

   SSTTRREEAAMMSS ssttaattiissttiiccss
       the  number  of streams allocated in the system the number
       of streams queues in the system the number of streams mes-
       sage  data blocks in the system the number of streams mes-
       sage blocks in the system the number of streams  links  in
       the  system the number of streams events in the system the
       number of failed streams events

   EEtthheerrnneett ssttaattiissttiiccss
       the number of ethernet packets received  per  second  (per
       ethernet  device) the number of ethernet packets transmit-
       ted per second (per ethernet device) the number of  ether-
       net  broadcast  packets  received per second (per ethernet

                                                               12

rtpm(1M)                                                 rtpm(1M)

       device) the number of ethernet broadcast packets transmit-
       ted  per second (per ethernet device) the number of ether-
       net octets received per second (per ethernet  device)  the
       number of ethernet octets transmitted per second (per eth-
       ernet device) the number of  ethernet  input  errors  (per
       ethernet  device)  the  number of ethernet frame alignment
       errors (per ethernet device) the number of ethernet check-
       sum  errors  (per  ethernet  device) the number of overrun
       errors (per ethernet device) the number of underrun errors
       (per  ethernet  device) the number of missed packet errors
       (per ethernet device) the number of good packets discarded
       (per ethernet device) the number of good packets discarded
       because the read queue was full (per ethernet device)  the
       number  of  good  packets discarded because resources were
       not available (per ethernet device) the number of ethernet
       collision  errors (per ethernet device) the number of eth-
       ernet output packets discarded (per ethernet  device)  the
       number of ethernet output errors (per ethernet device) the
       number of ethernet abort errors (per ethernet device)  the
       number  of  ethernet  carrier  lost  errors  (per ethernet
       device) the ethernet output  queue  length  (per  ethernet
       device)

   GGeenneerraall nneettwwoorrkkiinngg ssttaattiissttiiccss
       the number of IP packets transmitted and received per sec-
       ond the number of ICMP messages transmitted  and  received
       per  second  the  number  of  UDP  packets transmitted and
       received per second the number of TCP packets  transmitted
       and  received  per second the sum of networking errors for
       IP, ICMP, UDP and TCP the number of networking errors  per
       second

   IIPP ((IInntteerrnneett pprroottooccooll)) nneettwwoorrkkiinngg ssttaattiissttiiccss
       the  number of packets transmitted and received per second
       the number of packets received with a bad header check sum
       the  number  of  packets  received that were too short the
       number of packets received whose data size was  too  small
       the  number  of  packets  received whose header length was
       wrong the number of packets received whose data length was
       wrong  the number of packets received with an unknown pro-
       tocol the number of fragments received the number of frag-
       ments dropped the number of fragments timed out the number
       of packets re-assembled from fragments the number of pack-
       ets forwarded the number of packets that could not be for-
       warded the number of packets with  no-routing  information
       the  number  of  packet redirects sent the number of input
       errors the number of packets delivered per second the num-
       ber  of  output  requests  per second the number of output
       errors the number of fragmented packets created the number
       of  fragments  created  the  number  of failed attempts to
       fragment

   IInntteerrnneett CCoonnttrrooll MMeessssaaggee PPrroottooccooll ((IICCMMPP nneettwwoorrkkiinngg ssttaattiissttiiccss
       the number of messages received per second the  number  of

                                                               13

rtpm(1M)                                                 rtpm(1M)

       messages  sent  per second the number of message responses
       sent per second the number of  output  system  errors  the
       number  of  errors  the number of errors due to message of
       old ICMP type the number of bad code field errors the num-
       ber of errors due to message being too short the number of
       check sum errors the number of messages  with  bad  length
       the  number  of  echo  replies received the number of echo
       replies sent the number of input packets with  unreachable
       destinations the number of output packets with unreachable
       destinations the number of input source quenches the  num-
       ber  of output source quenches the number of routing redi-
       rects received the number of routing  redirects  sent  the
       number  of  echoes  received the number of echoes sent the
       number of time outs received the number of time outs  sent
       the  number  of  parameter problems received the number of
       parameter problems sent the number of time stamp  requests
       received the number of time stamp requests sent the number
       of time stamp replies received the number  of  time  stamp
       replies  sent  the number of information requests received
       the number of information  requests  sent  the  number  of
       information  replies  received  the  number of information
       replies sent the number of address mask requests  received
       the  number  of  address  mask requests sent the number of
       address mask replies received the number of  address  mask
       replies sent

   TTrraannssppoorrtt CCoonnttrrooll PPrroottooccooll ((TTCCPP)) nneettwwoorrkkiinngg ssttaattiissttiiccss
       the  number  of packets sent per second the number of data
       packets sent per second the number of bytes sent per  sec-
       ond the number of data packets retransmitted the number of
       data bytes retransmitted the number of  ack  only  packets
       sent  the number of delayed ack only packets sent the num-
       ber of URG only packets sent the number  of  window  probe
       packets  sent the number of window update packets sent the
       number of control  packets  sent  the  number  of  packets
       received per second the number of acks received per second
       the number of bytes acked per second the number of  dupli-
       cate  acks  received  the  number acks received for unsent
       data the number of in sequence packets received the number
       of  in  sequence  bytes  received the number of completely
       duplicate packets received the number of completely dupli-
       cate  bytes  received  the  number of partially duplicated
       packets received the number of partially  duplicate  bytes
       received  the  number of out of order packets received the
       number of out of order bytes received the number of  pack-
       ets  received  after  window  close  the  number  of bytes
       received after window close the number  of  window  probes
       received  the number of window updates received the number
       of packets received after close the number of packets dis-
       carded  for  bad check sum the number of packets discarded
       for bad header offset fields the number  of  packets  dis-
       carded  because packet was too short the number of connec-
       tions requests the number of accepted connections the num-
       ber  of  connections  established  (including accepts) the

                                                               14

rtpm(1M)                                                 rtpm(1M)

       number of connections closed  the  number  of  connections
       drops the number of embryonic connections dropped the num-
       ber of segments with updated round trip times  the  number
       of attempts to get round trip times the number of retrans-
       mit timeouts the number of connections dropped by retrans-
       mit  timeout  the number of persist timeouts the number of
       keepalive timeouts the number of keepalive probes the num-
       ber of connections dropped by keepalive

   UUsseerr DDaattaaggrraamm PPrroottooccooll ((UUDDPP)) nneettwwoorrkkiinngg ssttaattiissttiiccss::
       the  number  of  incomplete headers the number of bad data
       length fields the number of check sums the number of  full
       sockets  the number of bad ports the number of input pack-
       ets delivered per second the number of system errors  dur-
       ing input the number of output packets sent per second

                                                               15

