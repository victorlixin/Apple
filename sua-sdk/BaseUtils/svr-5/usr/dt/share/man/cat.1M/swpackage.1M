

swpackage(1M)                                       swpackage(1M)

SSyynnooppssiiss
       /usr/sbin/swpackage  [-p]  [-v] [-V] [-C session_file] [-d
       directory | device]
            [-f software_file] [-s  product_specification_file  |
       directory]
            [-S session_file] [-x option=value] [-X option_file]
            [software_selections] [@ target_selections]

DDeessccrriippttiioonn
       For  a  detailed  description of the Product Specification
       File (PSF) used as input  to  swpackage,  see  the  manual
       page.   The  swpackage command is not distributed: it only
       operates on the local host.  It can package software prod-
       ucts  into:  distribution  directories  (can  be  accessed
       directly or copied onto a CD-ROM) distribution tapes (such
       as DDS, nine-track or cartridge tapes)

       Both directory and tape distributions use the same format.

       A software product is organized into a four-level  hierar-
       chy:  Collections  of filesets, possibly from several dif-
       ferent products,  or  collections  of  products  that  are
       encapsulated  for a specific purpose.  Collections of sub-
       products (optional) and filesets.  Optional.   Subproducts
       are used to partition the filesets into logical groupings.
       The files that make up a product are packaged  into  file-
       sets.

       A  product, subproduct and fileset have attributes associ-
       ated with them.

       swpackage does the following: Organizes the software to be
       packaged  into  products, subproducts, and filesets.  Pro-
       vides flexible mechanisms to  package  source  files  into
       filesets.   Modifies  existing  products in a distribution
       directory.  Copies products in  a  distribution  directory
       onto a distribution tape.

       Both  swpackage  and create or modify a target depot.  The
       differences between  these  commands  are:  swcopy  copies
       products from an existing depot to another depot.  swpack-
       age creates products based on  the  user's  specification,
       and  packages  these products into a depot.  swpackage can
       be used to re-package software selections from an existing
       distribution directory to a distribution tape.  swcopy can
       copy from a local or remote source to a set  of  local  or
       remote  targets.  swpackage packages source files from the
       local filesystem into a  product,  for  insertion  into  a
       local distribution directory or onto a tape.  After creat-
       ing a target depot, swcopy registers that depot  with  the
       local  daemon, so that it can be found by and so on.  With
       swpackage, the depot is not registered; the user must  use
       the command.

                                                                1

swpackage(1M)                                       swpackage(1M)

   OOppttiioonnss
       swpackage  supports  the following options: Saves the cur-
       rent options and operands to session_file.  You can  enter
       a  relative  or  absolute  path  with  the  filename.  The
       default directory  for  session  files  is  $HOME/.sw/ses-
       sions/.   You  can  recall a session file with the -S ses-
       sion_file option. You can save  session  information  with
       the  -C session_file option.  In addition, swpackage auto-
       matically creates a session file of the most  recent  ses-
       sion information called $HOME/.sw/sessions/swpackage.last.
       This defines the  pathname  of  a  distribution  directory
       (directory),  or the tape device to use for a distribution
       tape (device).

       When creating a distribution tape, the  tape  device  must
       exist,  and  the  -x media_type=tape option must be speci-
       fied.

       Note that the -d  option  is  obsolete.  Use  the  @  tar-
       get_selections operand instead.

       You can also specify that the swpackage output be piped to
       an external  command:  swpackage  -d  "  |  command  "  -x
       media_type=tape  -s  source  The  |  and  command  must be
       quoted, because they are interpreted by swpackage and  not
       the  shell.   Reads  the  list of software selections from
       software_file, instead of (or in addition to) the  command
       line  operands (given by software_selections).  Previews a
       package session without actually creating or modifying the
       distribution  tape.  The source product_specification_file
       describes the product, subproduct, fileset, and file defi-
       nitions  used  to  build  a software product from a set of
       source files.

       The source can also be an existing directory depot  (which
       already  contains  products).  Runs swpackage with options
       and  operands  saved  from  a  previous  session  to  ses-
       sion_file.   You  can  save  session information to a file
       with the -C session_file option.  Turns on verbose  output
       to  stdout.  (The command log file is not affected by this
       option.) By default, verbose output is enabled for all the
       SM  commands.   Lists  the  SM  data  model revisions that
       swpackage supports. By default, swpackage uses the  latest
       SDU  data  model revision for packaging.  Sets the default
       option to value, and overrides the  default  value  (or  a
       value  in  an  alternate option_file specified with the -X
       option).  Multiple -x options can be specified.  Reads the
       default  options  and  behaviors  from option_file.  These
       values override the default  values.   swpackage  supports
       the  following  format  for  each software selection: bun-
       dle[.product[.subproduct][.fileset]][,version]       prod-
       uct[.subproduct][.fileset][,version] The version component
       has the following format: [,r op revision][,a op  arch][,v
       op  vendor]  [,c  op  category][,q=qualifier][,l=location]

                                                                2

swpackage(1M)                                       swpackage(1M)

       [,fr op revision][,fa op arch] Refer to  the  manual  page
       for more details of specifying software selections.

       If  specified,  the software selections cause swpackage to
       only (re)package those software selections from  the  full
       set  defined in the source PSF.  If no software selections
       are specified, then swpackage  will  (re)package  all  the
       products  defined  in  the source PSF.  swpackage supports
       the following format for a target selection:  @  /path  If
       creating a distribution directory, this option defines the
       path to the directory.  If creating a  distribution  tape,
       this  option  defines the path to the device file on which
       to write the distribution. When  creating  a  distribution
       tape,   the   tape   device   must   exist,   and  the  -x
       media_type=tape option must be specified.

   DDeeffaauulltt ooppttiioonnss
       In addition to the standard options, several SM  behaviors
       and  policy  options  can  be changed by modifying default
       values   listed   in    the    master    defaults    file,
       /usr/lib/sw/sys.defaults.   Refer  to  the manual page for
       information about each of these default options and how to
       modify them.

       The following options are supported by swpackage:
       compress_cmd                    loglevel
       compress_files                  media_capacity
       compression_type                media_type
       create_target_acls              package_in_place
       distribution_source_directory   reinstall_files
       distribution_target_directory   reinstall_files_use_cksum
       distribution_target_serial      software
       enforce_dsa                     source_file
       follow_symlinks                 source_type
       include_file_revisions          targets
       layout_version                  uncompress_cmd
       logdetail                       verbose
       logfile                         write_remote_files

   SSeessssiioonn ffiilleess
       Each  invocation of swpackage defines a packaging session.
       The  invocation  options,  source  information,   software
       selections,  and  target hosts are saved before the actual
       packaging task starts.  This lets you re-execute swpackage
       even  if the session ends before proper completion.  Refer
       to the manual page for further details.

   EEnnvviirroonnmmeenntt vvaarriiaabblleess
       Refer to the manual page for details  of  the  environment
       variables that affect swpackage.

   SSiiggnnaallss
       swpackage  catches  the  SIGQUIT  and  SIGINT signals.  If
       these signals are received, the command writes a  message,

                                                                3

swpackage(1M)                                       swpackage(1M)

       sends  a Remote Procedure Call (RPC) to the agents to wrap
       up, and then exits.

       The agent ignores the SIGHUP, SIGINT and SIGQUIT  signals.
       It immediately exits gracefully after receiving a SIGTERM,
       SIGUSR1 or SIGUSR2 signal. Killing  the  agent  may  leave
       corrupt  software  on  the system, and thus should only be
       done if absolutely necessary. Note that when an SM command
       is  killed,  the agent does not terminate until completing
       the task in progress.

       The daemon ignores SIGHUP, SIGINT and SIGQUIT signals.  It
       immediately  exits  gracefully after receiving the SIGTERM
       and SIGUSR2 signals.  After receiving a SIGUSR1 signal, it
       waits for completion of a copy or remove from a depot ses-
       sion before exiting, so that it can register or unregister
       depots  if  necessary.  Requests to start new sessions are
       refused during this wait.  SM commands use a common  lock-
       ing mechanism for reading and modifying both root directo-
       ries and software depots. This mechanism  allows  multiple
       readers, but only one writer on a root or depot.

       The  SM  commands  that  modify software in an (alternate)
       root directory are restricted from simultaneous  modifica-
       tion  using locking on var/adm/sw/products/swlock relative
       to the  root  directory  (for  example,  /var/adm/sw/prod-
       ucts/swlock).

       The  SM  commands  that  modify  software  in  a depot are
       restricted  from  simultaneous  modification  using  fcntl
       locking  on catalog/swlock relative to the depot directory
       (for example, /var/spool/sw/catalog/swlock).

       All commands set fcntl read  locks  on  roots  and  depots
       using  the  swlock file.  When a read lock is set, it pre-
       vents other  SM  commands  from  performing  modifications
       (that is, from setting write locks).

   PPrroodduucctt ssppeecciiffiiccaattiioonn ffiillee
       This  section  summarizes  the  product specification file
       (PSF)  that  drives  the  swpackage  session.  See  for  a
       detailed description of a PSF.

       A PSF is structured as follows: [depot specification]
            [vendor specification]
            [category specification]
            [bundle specification]
            [product specification]
                 [control script specification]
                 [subproduct specification]
                 [fileset specification]
                      [control script specification]
                      [file specification]
                 [fileset specification]

                                                                4

swpackage(1M)                                       swpackage(1M)

                 ...
            [product specification]
            ...   If  errors  encountered  while  parsing the PSF
       result in no valid product definitions,  swpackage  termi-
       nates.  All  errors  are logged to both stderr and the log
       file.

       In summary, you can: Specify one or  more  products.   For
       each  product,  specify  one  or  more filesets.  For each
       fileset, specify one or  more  files.   Optional.  Specify
       attributes  for the target depot or tape.  Optional. Spec-
       ify one or more bundles,  defining  the  bundle  contents.
       Optional. Specify vendor information for products and bun-
       dles.  Optional. Specify category  information  for  prod-
       ucts,  bundles  and  patches.  Optional. For each product,
       specify one or more subproducts, defining  the  subproduct
       contents.   Optional. For each product or fileset, specify
       one or more control scripts.

FFiilleess
       The default location of a source and  target  tape.   Con-
       tains  the user-specific default values for some or all SM
       options. If this file does not exist, SM looks  for  user-
       specific defaults in $HOME/.sw/defaults.  Contains session
       files automatically saved by the SM commands,  or  explic-
       itly  saved by the user.  Contains the master list of cur-
       rent SM options with their default values.  The  directory
       that contains all of the configurable and non-configurable
       data for SM.  This directory is also the default  location
       of  log  files.   Contains  the active system-wide default
       values for some or all SM options.  The  default  location
       of a source and target software depot.

EExxiitt ccooddeess
       swpackage  returns: The products specified in the PSF were
       successfully packaged into the target depot or  tape.   An
       error  occurred during the swpackage session; for example,
       bad syntax in the PSF.  Review stderr or the log file  for
       details.

DDiiaaggnnoossttiiccss
       swpackage writes to stdout, stderr, and to the log file.

   SSttaannddaarrdd oouuttppuutt
       swpackage  writes  messages for significant events.  These
       include: a begin and end session message selection, analy-
       sis, packaging, and tape creation messages

   SSttaannddaarrdd eerrrroorr
       swpackage writes messages for all WARNING and ERROR condi-
       tions  to  stderr.   swpackage  logs  detailed  events  to
       /var/adm/sw/swpackage.log.  The user can specify a differ-
       ent log file by modifying the logfile default option.

                                                                5

swpackage(1M)                                       swpackage(1M)

RReeffeerreenncceess
NNoottiicceess
   AAuutthhoorr
       swpackage was developed by the Hewlett-Packard Company and
       Mark H. Colburn.

EExxaammpplleess
       To  package  the  products defined in the products.psf PSF
       into the default target depot, enter: swpackage  -s  prod-
       ucts.psf  To preview the same operation (do not create the
       target depot), and generate verbose output, enter: swpack-
       age -p -v -s products.psf To package the products into the
       target depot no_files, and insert references to the source
       files  instead  of  copying  them  into  the depot, enter:
       swpackage  -s  products.psf  -x  package_in_place=true   @
       no_files  To  re-package  a specific fileset: swpackage -s
       products.psf -x  package_in_place=true  product.fileset  \
                                    @  no_files To re-package the
       entire contents of the depot /var/spool/sw onto  the  tape
       at  /dev/rmt/ctape1,  enter: swpackage -s /var/spool/sw -x
       media_type=tape @ /dev/rmt/ctape1

                                                                6

