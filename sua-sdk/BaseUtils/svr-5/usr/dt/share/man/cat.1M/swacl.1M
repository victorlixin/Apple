

swacl(1M)                                               swacl(1M)

SSyynnooppssiiss
       /usr/sbin/swacl  -l level [-D acl_entry | -F acl_file | -M
       acl_entry]
            [-f software_file] [-t target_file]
            [-x option=value] [-X option_file]
            [software_selections] [@ target_selections]

DDeessccrriippttiioonn
       swacl is not supported in this release.  The swacl command
       displays  or modifies the Access Control Lists (ACLs) that
       protect the specified target selections  (hosts,  software
       depots  or  root  filesystems)  and software selections on
       each of the specified target selections  (software  depots
       only).

       All  root  filesystems,  software  depots, and products in
       software depots are protected by  ACLs.  The  SM  commands
       permit  or  prevent  specific operations, based on whether
       the ACLs on these objects permit the operation.  swacl  is
       used  to  view, edit, and manage these ACLs.  The ACL must
       exist, and the user must have the  appropriate  permission
       (granted  by  the ACL itself) in order to modify it.  ACLs
       offer a greater degree of selectivity than  standard  file
       permissions.  ACLs  allow  the user who created the object
       (that is, the object's owner), or the local root to define
       specific  read,  write,  and modify permissions for a spe-
       cific list of users and groups.

   PPrrootteecctteedd oobbjjeeccttss
       The following objects are protected by ACLs: host  systems
       on  which software is being managed by SM root filesystems
       on a host (including alternate roots) software depots on a
       host software products contained within a depot

   OOppttiioonnss
       If  the  -D,  -F,  or  -M options are not specified, swacl
       writes the requested ACLs to stdout.  Only one of the  -D,
       -F,  or -M options can be specified for each invocation of
       swacl.

       swacl supports the following options: Deletes an  existing
       entry  from the ACL associated with the specified objects.
       The permission field of the ACL  entry  is  not  required.
       Multiple  -D  options can be specified.  Reads the list of
       software selections from software_file, instead of (or  in
       addition  to)  the  command  line operands (given by soft-
       ware_selections).  Assigns the ACL contained  in  acl_file
       to  the  object.   All  existing  entries  are removed and
       replaced by the  entries  in  acl_file.   Only  the  ACL's
       entries are replaced; none of the information contained in
       the comment portion (lines with the prefix #)  of  an  ACL
       listing  is  modified.   acl_file  is usually the modified
       output of a swacl list operation.

                                                                1

swacl(1M)                                               swacl(1M)

       If the replacement ACL contains no syntax errors, and  the
       user  has  control  permission on the ACL (or is the local
       root), the replacement succeeds.  Defines which  level  of
       SM ACLs to view or modify.

       The  supported  levels  of  depot, host, root, and product
       objects that can be protected are: Views or  modifies  the
       ACL  that  protects the software depots identified by tar-
       get_selections.  Views or modifies the ACL  that  protects
       the  host  systems identified by target_selections.  Views
       or modifies the ACL that  protects  the  root  filesystems
       identified  by  target_selections.   Views or modifies the
       ACL that protects the software product identified by soft-
       ware_selections.  This only applies to products in depots,
       and not to installed products in roots.

       The supported levels of templates are: Views  or  modifies
       the  template  ACL  that is used to initialize the ACLs of
       future software depots or root filesystems  added  to  the
       hosts   identified  by  target_selections.   Additionally,
       swacl can be used to set templates to  be  used  when  new
       ACLs are created.  Views or modifies the template ACL that
       is used to initialize the product template ACLs of  future
       software  depots  added  to  the  hosts identified by tar-
       get_selections.  Views or modifies the template  ACL  that
       is used to initialize the ACLs of future products added to
       the software depots identified by target_selections.  Adds
       a  new ACL entry or changes the permissions of an existing
       entry. Multiple -M options can be  specified.   Reads  the
       list of target selections from target_file, instead of (or
       in addition to) the command line operands (given  by  tar-
       get_selections).   Sets  the  default option to value, and
       overrides the default value (or a value  in  an  alternate
       option_file  specified  with  the -X option).  Multiple -x
       options can be specified.  Reads the default  options  and
       behaviors  from  option_file.   These  values override the
       default values.  swacl supports the following  format  for
       each  software  selection:  product[,version]  The version
       component has the following format: [,r op revision][,a op
       arch][,v  op  vendor] [,c op category] Refer to the manual
       page for more details of specifying  software  selections.
       swacl  supports  the following form for each target selec-
       tion: [host][:][/directory] The : is required  if  both  a
       host and directory are specified.

   DDeeffaauulltt ooppttiioonnss
       In  addition to the standard options, several SM behaviors
       and policy options can be  changed  by  modifying  default
       values    listed    in    the    master   defaults   file,
       /usr/lib/sw/sys.defaults.  Refer to the  manual  page  for
       information about each of these default options and how to
       modify them.

       The following options are supported by swacl:

                                                                2

swacl(1M)                                               swacl(1M)

       distribution_target_directory   select_local
       level                           software
       rpc_binding_info                targets
       rpc_timeout                     verbose

   EEnnvviirroonnmmeenntt vvaarriiaabblleess
       Refer to the manual page for details  of  the  environment
       variables that affect swacl.

AACCLL eennttrriieess
       Each   entry   in   an   ACL   has   the  following  form:
       entry_type[:key]:permissions         For          example,
       user:peter@sysA:crwit.    An   ACL  can  contain  multiple
       entries.

   LLiisstt oouuttppuutt ffoorrmmaatt
       The output of a list operation has the following format: #
       swacl   Object_type          Access  Control  List # # For
       depot|host:[host]:[/directory] # # Date:  date_stamp  #  #
       Object       Ownership:       User=       user_name      #
       Group= group_name #                   Realm= hostname #  #
       default_realm = hostname entry_type:[key:]permissions This
       output can be saved to a file, modified, and then used  as
       input  to  a  swacl  modify  operation  (see the -F option
       above).

   OObbjjeecctt oowwnneerrsshhiipp
       An owner is also  associated  with  every  SM  object,  as
       defined  by  the user name, group and hostname.  The owner
       is the user who created the object.  When using  swacl  to
       view  an  ACL,  the  owner  is printed as a comment in the
       header.

   DDeeffaauulltt rreeaallmm
       An ACL defines a default realm for an object.   The  realm
       is  currently  defined  as  the name of the host system on
       which the object resides.  When using  swacl  to  view  an
       ACL,  the  default  realm  is  printed as a comment in the
       header.

   EEnnttrryy ttyyppeess
       The following entry types (entry_type) are supported:  The
       permissions  for  all  other  users  and hosts that do not
       match a more specific  entry  in  the  ACL.  For  example:
       any_other:-r--t  The  permissions for a named group.  This
       type of ACL entry must include a key that identifies  that
       group.  The format can be one of: group:group_name:permis-
       sions group:group_name@hostname:permissions  For  example:
       group:adm:crwit  The  permissions for an SM agent from the
       specified host system.  These agents require product level
       read  access  via either a host, other, or any_other entry
       type in order to copy or  install  products  from  depots.
       This  type  of  ACL  entry must include a key containing a
       hostname or number (in Internet dot notation) of a system.

                                                                3

swacl(1M)                                               swacl(1M)

       For example: host:newdist@fc.caldera.com:-r--t The permis-
       sions for the object's owner, whose identity is listed  in
       the  comment  header.  For example: object_owner:crwit The
       permissions for members of the object's group, whose iden-
       tity  is  listed  in  the  comment  header.   For example:
       object_group:crwit The permissions for others who are  not
       otherwise named by a more specific entry type.  The format
       for other is: other:permissions for others  on  the  local
       host (only one such entry allowed) or other:@hostname:per-
       missions for others at remote hosts (only one  such  entry
       per     remote     host     allowed).      For    example:
       other:@newdist:-r--t The permissions  for  a  named  user.
       This  type of ACL entry must include a key that identifies
       that user.  The format for user can be one of the  follow-
       ing:    user:user_name:permissions    user:user_name@host-
       name:permissions For example: user:rml:crwit

   KKeeyyss
       Expressions (patterns) are not permitted in keys.

       A key (key) is required for user,  group  and  host  entry
       types.  A key is optional for other entry types, and spec-
       ifies the hostname to which the entry applies.   Only  one
       other  entry  type may exist without a key, and this entry
       applies to users at the default realm (host) of the ACL.

       A hostname in a key will be listed in its Internet address
       format  (dot notation) if swacl cannot resolve the address
       using  the  local   lookup   mechanism   (DNS,   NIS,   or
       /etc/hosts).   A  hostname  within  an  ACL  entry must be
       resolvable when used with the -D or -M options.  Unresolv-
       able  hostname  values are accepted in files provided with
       the -F option.

   PPeerrmmiissssiioonnss
       Permissions are represented as the single character abbre-
       viations indicated below.  Some permissions apply only to,
       or have different meaning for, certain types  of  objects.
       The  following  permissions may be granted: Grants permis-
       sion to read the object.

       On host, depot, or root objects,  read  permission  allows
       operations.

       On  products within depots, read permission allows product
       files to be installed or copied with or Grants  permission
       to modify the object itself.

       On  a root object (for example, an installed root filesys-
       tem), write permission also grants  permission  to  modify
       the products installed (contained) within it.

       On a depot object, write permission does not grant permis-
       sion to modify the products  contained  within  it.  Write

                                                                4

swacl(1M)                                               swacl(1M)

       access  on  products  is  required to modify products in a
       depot.

       On a host container, write permission grants permission to
       unregister depots.  It does not grant permission to modify
       the depots or  roots  contained  within  it.   On  a  host
       object,  insert  permission  grants  permission  to create
       (insert) a new software depot or root  filesystem  object,
       and to register roots and depots.

       On  a depot object, insert permission grants permission to
       create (insert) a  new  product  object  into  the  depot.
       Grants  permission  to modify the ACL using swacl.  Grants
       permission to perform access checks and to list  the  ACL.
       A wildcard that grants all of the above permissions. It is
       expanded by swacl to crwit.

FFiilleess
       Contains the user-specific default  values  for  some  (or
       all)  SM  options.  Contains the master list of current SM
       options (with their default values).  The directory  which
       contains  all  of  the configurable (and non-configurable)
       data for SM.  This directory is also the default  location
       of  log  files.   Contains  the active system-wide default
       values for some or all SM options.  The Installed Products
       Database  (IPD):  a catalog of all products installed on a
       system.  The directory which contains ACLs for the  system
       itself,  template  ACLs,  and  the  secrets  file  used to
       authenticate remote requests.  The default location  of  a
       source and target software depot.

EExxiitt ccooddeess
       swacl  returns: when the software selections and/or target
       selections were successfully displayed  or  modified  when
       the  display  or  modify  operation  failed  on all target
       selections when the display or modify operation failed  on
       some target selections

DDiiaaggnnoossttiiccss
       swacl  writes  to  stdout,  stderr,  and to the daemon log
       file.

   SSttaannddaarrdd oouuttppuutt
       swacl writes ACL  information  to  stdout  when  the  user
       requests an ACL listing.

   SSttaannddaarrdd eerrrroorr
       swacl writes messages for all WARNING and ERROR conditions
       to stderr.  A report that the software selections  do  not
       exist is also given, if the user has no access permissions
       to the object.

   LLoogg ffiilleess
       swacl does not log summary events.  It logs  events  about

                                                                5

swacl(1M)                                               swacl(1M)

       each  ACL that is modified to the log file associated with
       each target selection.

WWaarrnniinnggss
       It is possible to modify an ACL in such a way as to render
       it  inaccessible.   Be  careful  not to remove all control
       permissions on an ACL. As a safeguard, the local root  may
       always edit SM ACLs, regardless of permissions.

       Some  operations  allowed  by  ACLs are run as local root.
       Because files are loaded and  scripts  are  run  as  root,
       granting  a user write permission on a root filesystem, or
       insert permission on a host, effectively gives  that  user
       root privileges.

       swacl  is not a general purpose ACL editor.  It works only
       on ACLs protecting SM objects.  swacl does not support the
       viewing and modification of ACLs on remote targets.

RReeffeerreenncceess
NNoottiicceess
   AAuutthhoorr
       swacl was developed by the Hewlett-Packard Company.

EExxaammpplleess
       To  list  the  ACLs  for the COBOL and FORTRAN products in
       depot /var/spool/swtest, enter:  swacl  -l  product  COBOL
       FORTRAN  @  /var/spool/swtest  The ACL listed to stdout is
       similar to this example ACL: # #  swacl    Product  Access
       Control Lists # # For depot: newdist:/var/spool/swtest # #
       Date:  Wed May  26  11:14:31  1993  #  #  #  For  product:
       COBOL,r=3.2  #  #  #  Object  Ownership:  User=  robason #
       Group=       swadm       #                          Realm=
       newdist.fc.caldera.com                 #                 #
       default_realm=newdist.fc.caldera.com    object_owner:crwit
       group:swadm:crwit any_other:-r--t

       #  #  For  product:  FORTRAN,r=9.4 # # # Object Ownership:
       User=   robason  #                      Group=   swadm   #
       Realm=          newdist.fc.caldera.com         #         #
       default_realm=newdist.fc.caldera.com    object_owner:crwit
       user:rob@lehi.fc.caldera.com:-r--t         user:barb:-r--t
       user:ramon:-r--t       group:swadm:crwit       other:-r--t
       host:lehi.fc.caldera.com:-r--t  To  list  the product tem-
       plate ACL on host newdist, enter:  swacl  -l  global_prod-
       uct_template  @  newdist To list the host ACL on the local
       system, enter: swacl -l host To read, modify, then replace
       the ACL protecting the default depot /var/spool/sw, enter:
       swacl -l depot > new_acl_file  vi  new_acl_file  swacl  -l
       depot  -F  new_acl_file To add an entry for user george on
       host newdist to the ACL protecting COBOL  in  the  default
       depot   at   host   lehi,   enter:  swacl  -l  product  -M
       user:george@newdist:crwit COBOL @ lehi: To deny all access
       to  the users steve and george for the depot /var/spool/sw

                                                                6

swacl(1M)                                               swacl(1M)

       at host newdist, enter: swacl -l depot -M user:steve:-  -M
       user:george:-  @  newdist:/var/spool/sw  To delete entries
       for local user ricke from  all  products  in  the  default
       local depot, enter: swacl -l product -D user:ricke \*

                                                                7

