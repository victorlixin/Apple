

swmodify(1M)                                         swmodify(1M)

SSyynnooppssiiss
       /usr/sbin/swmodify  [-d  |  -r]  [-p]  [-u]  [-v] [-V] [-a
       attribute[=value]]
            [-c catalog] [-C session_file] [-f software_file]
            [-P pathname_file] [-s product_specification_file ]
            [-S session_file] [-x option=value]
            [-X option_file] [software_selections]
            [@ target_selections]

DDeessccrriippttiioonn
       The swmodify command modifies the definitions of  software
       objects  installed  in  a  primary  or  alternate root, or
       available from a software depot. It supports the following
       features: The user can add new bundles, products, subprod-
       ucts, filesets,  control  files,  and  files  to  existing
       objects  (which  will  contain them).  The user can delete
       existing bundles, products, subproducts, filesets, control
       files, and files from the objects which contain them.  The
       user can add an attribute, delete an attribute, or  change
       the  existing  value  of  an  attribute  for  any existing
       object. When adding a new object, the user can also define
       attributes  for  it.   The  user  can  remove saved backup
       files, committing the software patch.

       With the exception of control  files,  swmodify  does  not
       manipulate  the actual files that make up a product (file-
       set).   It  manipulates  the  catalog   information   that
       describes  the files. However, it can replace the contents
       of control files.

       Some typical uses of swmodify include: The  existing  list
       of  file  definitions  in a fileset can be augmented.  For
       example, if a fileset's control scripts add new  files  to
       the installed filesystem, the scripts can call swmodify to
       make a record of those new files.  For example, if a prod-
       uct  provides a more complex configuration process (beyond
       the SM configure script), that script can  set  the  file-
       set's  state to configured upon successful execution.  For
       example, to import the definition of an existing  applica-
       tion  that  was  not  installed  by SM, construct a simple
       Product Specification File (PSF) describing  the  product.
       Next,  use swmodify to load the definition of the existing
       application into the Installed Products Database (IPD).

   OOppttiioonnss
       swmodify supports the following options:  Adds,  modifies,
       or  deletes  the  value of attribute.  If the -u option is
       also specified, deletes the attribute from the given soft-
       ware selections (or deletes the value from the set of val-
       ues currently defined for attribute).  Otherwise  adds  or
       modifies attribute for each software selection, by setting
       it to value.

       Multiple -a  options  can  be  specified.  Each  attribute

                                                                1

swmodify(1M)                                         swmodify(1M)

       modification is applied to all software selections.  Spec-
       ifies the pathname of the catalog  which  will  be  added,
       modified, or used as input by swmodify.

       The  -c  and  -a  options  are  mutually exclusive, the -c
       option cannot be specified when the -a  option  is  speci-
       fied.   Saves  the  current  options  and operands to ses-
       sion_file.  You can enter a relative or absolute path with
       the  filename.  The default directory for session files is
       $HOME/.sw/sessions/.  You can recall a session  file  with
       the  -S session_file option. You can save session informa-
       tion with the -C session_file option.  In addition, swmod-
       ify  automatically  creates  a  session  file  of the most
       recent   session   information    called    $HOME/.sw/ses-
       sions/swmodify.last.   Performs  modifications  on a depot
       (not on a primary or alternate root).   The  given  target
       selection  must  be  a  depot.  Reads the list of software
       selections from software_file, instead of (or in  addition
       to)  the  command  line operands (given by software_selec-
       tions).  Previews a modify session without modifying  any-
       thing  within the target selection.  Specifies a file con-
       taining the pathnames of files being added to, or deleted,
       from  the  IPD instead of having to specify them individu-
       ally on the command line.   Perform  modifications  on  an
       alternate  root  (and not the primary root, /).  The given
       target selection must be an alternate  root.   The  source
       PSF  describes  the  product, subproduct, fileset and file
       definitions which will be added to, or modified, by swmod-
       ify.  Runs swmodify with options and operands saved from a
       previous session to session_file.  You  can  save  session
       information to a file with the -C session_file option.  If
       no -a attribute=value options are specified,  deletes  the
       given  software  selections  from  within the given target
       selection.  This deletes the definitions of  the  software
       objects from the depot catalog or IPD.

       If  -a  attribute  options  are  specified,  deletes these
       attribute definitions from the given  software  selections
       (from  within  the given target selection).  Turns on ver-
       bose output to  stdout.  (The  command  log  file  is  not
       affected  by  this  option.) By default, verbose output is
       enabled for all the SM commands.  Lists all the  supported
       layout  versions.   Sets  the default option to value, and
       overrides the default value (or a value  in  an  alternate
       option_file  specified  with  the -X option).  Multiple -x
       options can be specified.  Reads the default  options  and
       behaviors  from  option_file.   These  values override the
       default values.  swmodify supports  the  following  format
       for  each  software  selection:  bundle[.product[.subprod-
       uct][.fileset]][,version]      product[.subproduct][.file-
       set][,version]  The  version  component  has the following
       format: [,r op revision][,a op arch][,v op vendor] [,c  op
       category][,l=location][,fr  op  revision]  [,fa  op  arch]
       Refer to the manual page for more  details  of  specifying

                                                                2

swmodify(1M)                                         swmodify(1M)

       software  selections.  swmodify supports the specification
       of a single, local target  selection  of  the  format:  [@
       /directory]  When operating on the primary root, no target
       selection needs to be  specified  (/  is  assumed).   When
       operating on a software depot, the target selection speci-
       fies the path to that depot.  If the -d option  is  speci-
       fied  and  no  target  selection is specified, the default
       value given by distribution_target_directory is assumed.

   DDeeffaauulltt ooppttiioonnss
       In addition to the standard options, several SM  behaviors
       and  policy  options  can  be changed by modifying default
       values   listed   in    the    master    defaults    file,
       /usr/lib/sw/sys.defaults.   Refer  to  the manual page for
       information about each of these default options and how to
       modify them.

       The following options are supported by swmodify:
       control_files                   loglevel
       distribution_target_directory   patch_commit
       files                           software
       installed_software_catalog      source_file
       layout_version                  targets
       logdetail                       verbose
       logfile

   SSeessssiioonn ffiilleess
       Each invocation of swmodify defines a modify session.  The
       invocation options, source  information,  software  selec-
       tions,  and target hosts are saved before the actual modi-
       fication task starts. This lets  you  re-execute  swmodify
       even  if the session ends before proper completion.  Refer
       to the manual page for further details.

   EEnnvviirroonnmmeenntt vvaarriiaabblleess
       Refer to the manual page for details  of  the  environment
       variables that affect swconfig and the control scripts.

   SSiiggnnaallss
       swmodify  ignores the SIGHUP, SIGTERM, SIGUSR1 and SIGUSR2
       signals.  swmodify catches the SIGINT and SIGQUIT signals.
       If  these  signals are received, swmodify writes a message
       and then exits. During the actual database  modifications,
       swmodify  blocks  these  signals,  to prevent any database
       corruption. All other  signals  result  in  their  default
       action being performed.

FFiilleess
       Contains  the user-specific default values for some or all
       SM options. If this file does  not  exist,  SM  looks  for
       user-specific  defaults  in  $HOME/.sw/defaults.  Contains
       session files automatically saved by the SM  commands,  or
       explicitly saved by the user.  Contains the master list of
       current SM  options  (with  their  default  values).   The

                                                                3

swmodify(1M)                                         swmodify(1M)

       directory which contains all of the configurable (and non-
       configurable) data for SM.  This  directory  is  also  the
       default  location  of log files.  Contains the active sys-
       tem-wide default values for some or all SM  options.   The
       Installed  Products Database (IPD): a catalog of all prod-
       ucts installed on a system.  The  default  location  of  a
       target software depot.

EExxiitt ccooddeess
       swmodify  returns:  The  add, modify, or delete operations
       were successfully performed on the given  software  selec-
       tions.  An error occurred during the session (for example,
       bad syntax in the PSF, invalid software selection, and  so
       on).  Review stderr or the log file for details.

DDiiaaggnnoossttiiccss
       swmodify  writes  to  stdout,  stderr, and to specific log
       files.

   SSttaannddaarrdd oouuttppuutt
       In verbose mode, swmodify writes messages for  significant
       events.  These  include:  a  begin and end session message
       selection, analysis, and execution task messages

   SSttaannddaarrdd eerrrroorr
       swmodify writes messages for all WARNING and ERROR  condi-
       tions to stderr.

   LLoogg ffiilleess
       swmodify  logs  events  to the command log file and to the
       swmodify log file associated with each target selection.

       The  log  files  are:  swmodify  logs  all   messages   to
       /var/adm/sw/swmodify.log.  (The user can specify a differ-
       ent log file by modifying  the  logfile  default  option.)
       When  modifying installed software, swmodify logs messages
       to var/adm/sw/swagent.log beneath the root directory  (for
       example,  / or an alternate root directory).  When modify-
       ing available software (within  a  depot),  swmodify  logs
       messages  to  swagent.log beneath the depot directory (for
       example, /var/spool/sw).

WWaarrnniinnggss
       If the target selection is a software depot and you delete
       file  definitions  from the given software selections, the
       files' contents are not deleted from the depot.

RReeffeerreenncceess
NNoottiicceess
   AAuutthhoorr
       swmodify was developed by the Hewlett-Packard Company.

EExxaammpplleess
       To add additional files to  an  existing  fileset,  enter:

                                                                4

swmodify(1M)                                         swmodify(1M)

       swmodify  -x  files='/tmp/a /tmp/b /tmp/c' PRODUCT.FILESET
       To replace the definitions of existing files in an  exist-
       ing fileset (for example, to update current values for the
       file's attributes), enter: chown root /tmp/a /tmp/b swmod-
       ify  -x  files='/tmp/a  /tmp/b'  PRODUCT.FILESET To delete
       control files from a fileset in an existing depot,  enter:
       swmodify -d -u -x control_files='checkinstall subscript' \
                                    PRODUCT.FILESET             @
       /var/spool/sw  To  create  a new fileset definition, where
       the description is contained in  the  PSF  file  new_file-
       set_definition,  enter: swmodify -s new_fileset_definition
       To delete an obsolete fileset definition, enter:  swmodify
       -u  PRODUCT.FILESET  To commit a patch (remove files saved
       for patch rollback), enter: swmodify -x  patch_commit=true
       PATCH  To  create some new bundle definitions for products
       in an existing  depot,  enter:  swmodify  -d  -s  new_bun-
       dle_definitions  \* @ /mfg/master_depot To modify the val-
       ues of  some  fileset's  attributes,  enter:  swmodify  -a
       state=installed  PRODUCT.FILESET  To modify the attributes
       of a depot,  enter:  swmodify  -a  title='Manufacturing\'s
       master  depot'  \                              -a descrip-
       tion=/tmp/mfg.description @ /mfg/master_depot

                                                                5

