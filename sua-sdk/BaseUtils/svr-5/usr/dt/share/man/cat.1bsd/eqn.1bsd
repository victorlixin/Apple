

eqn(1bsd)                                               eqn(1bsd)

SSyynnooppssiiss
       /usr/ucb/eqn [-dxy] [-fn] [-pn] [-sn] [file] . . .

       /usr/ucb/neqn [file] . . .

       /usr/ucb/checkeq [file] . . .

DDeessccrriippttiioonn
       The  eqn  and  neqn  commands  are  language processors to
       assist in describing equations.  eqn is a preprocessor for
       and is intended for devices that can print troff's output.
       neqn is a preprocessor for and is intended  for  use  with
       terminals.

       checkeq  reports  missing  or  unbalanced  delimiters  and
       .EQ/.EN pairs.

       If no files are specified, eqn  and  neqn  read  from  the
       standard input.  A line beginning with .EQ marks the start
       of an equation; the end of an equation is marked by a line
       beginning with .EN.  Neither of these lines is altered, so
       they may be defined in macro packages  to  get  centering,
       numbering,  and  so  on.   It  is also possible to set two
       characters  as  ``delimiters'';  subsequent  text  between
       delimiters is also treated as eqn input.

       The  following options are available for eqn and neqn: Set
       equation delimiters set to characters x  and  y  with  the
       command-line  argument.  The more common way to do this is
       with delim xy between .EQ and .EN.   The  left  and  right
       delimiters may be identical.  Delimiters are turned off by
       delim off appearing in the text.  All text that is neither
       between  delimiters  nor  between  .EQ  and  .EN is passed
       through untouched.  Change font to n globally in the docu-
       ment.   The  font can also be changed globally in the body
       of the document by using the gfont directive.  Reduce sub-
       scripts  and  superscripts  by n point sizes from the pre-
       vailing size.  In the absence of the -p option, subscripts
       and  superscripts  are  reduced  by 3 point sizes from the
       prevailing size.  Set equations in point size  n  globally
       in the document.  The point size can also be changed glob-
       ally in the body of the document by using the gsize direc-
       tive.   Prepare output for device dev.  If no -T option is
       present, eqn looks at the environment variable  TYPESETTER
       to  see  what  the  intended output device is.  If no such
       variable is found in the environment,  a  system-dependent
       default device is assumed.  Not available using neqn.

UUssaaggee
   eeqqnn llaanngguuaaggee
       Tokens  within eqn are separated by braces, double quotes,
       tildes, circumflexes, space, tab, or  newline  characters.
       Braces  {} are used for grouping; generally speaking, any-
       where  a  single  character  like  x   could   appear,   a

                     BSD System Compatibility                   1

eqn(1bsd)                                               eqn(1bsd)

       complicated  construction  enclosed  in braces may be used
       instead.  Tilde (~) represents a full space in the output,
       circumflex (^) half as much.

       Subscripts and superscripts are produced with the keywords
       sub and sup: x sub i e sup {x sup 2 + y sup 2} a sub i sup
       2

       Fractions are made with over: a over b

       Square  roots  are made with sqrt: 1 over down 10 sqrt {ax
       sup 2 +bx+c}

       Although eqn tries to get most things at the  right  place
       on  the paper, occasionally you will need to tune the out-
       put to make it just right.  Local motions such as,  up  n,
       down  n,  fwd n and back n allow you to change the default
       spacing.  In the previous example, a  local  motion,  down
       10, was used to get more space between the square root and
       the line above it.

       Lower and upper limits are made with from and to: lim from
       {n-> inf} sum from 0 to n x sub i

       Brackets and braces of the right height are made with left
       and right: left [ x sup 2 + y sup 2  over  alpha  right  ]
       ~=~1

       The right clause is optional.  Legal characters after left
       and right are braces, brackets, bars, c and f for  ceiling
       and  floor, and "" for nothing at all (useful for a right-
       side-only bracket).

       Vertical piles of things are made with pile, lpile, cpile,
       and rpile: pile {a above b above c}

       There  can  be  an arbitrary number of elements in a pile.
       lpile left-justifies, pile and cpile center, with  differ-
       ent vertical spacing, and rpile right justifies.

       Matrices  are  made  with  matrix: matrix { lcol { x sub i
       above y sub 2 } ccol { 1 above 2 } }

       In addition, there is rcol for a right-justified column.

       Diacritical marks are made with dot, dotdot,  hat,  tilde,
       bar, vec, dyad, and under:
       x dot = f(t) bar y dotdot bar ~=~ n under x vec ~=~ y dyad

       Size and font can be changed with  size  n  or  size  +-n,
       roman,  italic,  bold,  and  font n.  Size and font can be
       changed globally in a document by gsize n and gfont n,  or
       by the command-line arguments -sn and -fn.

                     BSD System Compatibility                   2

eqn(1bsd)                                               eqn(1bsd)

       Successive  display arguments can be lined up.  Place mark
       before the desired lineup point  in  the  first  equation;
       place lineup at the place that is to line up vertically in
       subsequent equations.

       Shorthands may be defined or existing  keywords  redefined
       with define: define thing % replacement %

       defines a new token called thing which will be replaced by
       replacement whenever it appears thereafter.  The % may  be
       any character that does not occur in replacement.
                             _
       Keywords  like  sum  (_>), inf (oo), and shorthands like >=
       (>=), -> (->), and != (!=) are recognized.  Greek  letters
       are spelled out in the desired case, as in alpha or GAMMA.
       Mathematical words like sin, cos, and log are  made  Roman
       automatically.   four-character  escapes like \(bu (+o) can
       be used anywhere.  Strings enclosed in double quotes "..."
       are  passed through untouched; this permits keywords to be
       entered as text, and can be used to communicate with troff
       when all else fails.

RReeffeerreenncceess
NNoottiicceess
       To  embolden digits, parens, and so on, it is necessary to
       quote them, as in bold "12.3".

EExxaammpplleess
       eqn file . . . | troff

       neqn file . . . | nroff

                     BSD System Compatibility                   3

