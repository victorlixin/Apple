

thr_exit(3thread)                               thr_exit(3thread)

SSyynnooppssiiss
       cc [options] -Kthread file

       #include <thread.h>

       void thr_exit(void *status);

DDeessccrriippttiioonn
       thr_exit terminates execution of the calling thread.  sta-
       tus is the exit value of the terminating thread.  The sta-
       tus  will  be  returned to one of any sibling threads that
       call

       If the start function of the thread (see  returns  without
       calling  thr_exit, thr_exit is called implicitly with sta-
       tus set to the return value of the function.

       No error checking of status is done, as other  values  can
       be cast to (void *) (see Warnings).

       After  thr_exit  has been called, all thread-specific data
       bindings are discarded [see and the thread data structures
       can be recycled.

   PPaarraammeetteerrss
       the exit value of the thread

RReettuurrnn vvaalluueess
       thr_exit does not return a value.

   EErrrroorrss
       None

WWaarrnniinnggss
       For portability, use status only as a pointer; do not cast
       an int to void * to be used as the  status  argument,  and
       then cast it back to int when it is retrieved by thr_join.
       The ANSI C standard does not require that  implementations
       cast  values to (void *) and then back to the initial type
       without losing information.

RReeffeerreenncceess
NNoottiicceess
       There are three ways a threaded  process  terminates:  Any
       thread  in the process calls exit.  All non-daemon threads
       in the  process  terminate.   The  initial  call  to  main
       returns without calling thr_exit.

       A  call  to thr_exit by the initial thread does not termi-
       nate the process, unless it is the last non-daemon thread.

                                                                1

