editres(1X11R5)                                         editres(1X11R5)

  eeddiittrreess

  NNAAMMEE

    editres - a dynamic resource editor for X Toolkit applications

  SSYYNNOOPPSSIISS

    editres [[-toolkitoption ......]]

  OOPPTTIIOONNSS

    All of the standard X Toolkit command-line options are accepted by
    eeddiittrreess(1X11R5)(see XX(5X11R5)). The order of the command-line options is
    not important.

  DDEESSCCRRIIPPTTIIOONN

    With eeddiittrreess, you can view the full widget hierarchy of any X Toolkit
    client that speaks the eeddiittrreess protocol. In addition, you can use eeddiittrreess
    to construct resource specifications, apply the resource to the
    application, and view the results dynamically. Once you are satisfied with
    a resource specification, eeddiittrreess will append the resource string to your
    X Resources file.

  UUSSIINNGG EEDDIITTRREESS

    A window provided by eeddiittrreess consists of the following four areas:

    MMeennuu BBaarr
        A set of pop-up menus that provide full access to the features of
        eeddiittrreess.

    PPaannnneerr
        Provides an intuitive way to scroll the application tree display.

    MMeessssaaggee AArreeaa
        Displays information about the action that eeddiittrreess expects of the
        user.

    AApppplliiccaattiioonn WWiiddggeett TTrreeee
        Displays the selected client's widget tree.

    To begin an eeddiittrreess session, on the command menu, click GGeett WWiiddggeett TTrreeee.
    This changes the cursor from a pointer to a cross-hair. To view an
    application, click any of its windows. If the application is able to
    communicate with the eeddiittrreess protocol, eeddiittrreess will display the client's
    widget tree in its tree window. If the application is unable to
    communicate with the eeddiittrreess protocol, after a few seconds, a message to
    that effect will appear in the message area.

    After you have established a widget tree, you can use any of the other
    menu options. The effect of each of these is described in the following
    section.

  CCOOMMMMAANNDDSS

    SSeenndd WWiiddggeett TTrreeee
        Allows the user to click any client that speaks the eeddiittrreess protocol
        and receive its widget tree.

    RReeffrreesshh WWiiddggeett TTrreeee
        Only those widgets that exist at the present time are known by
        eeddiittrreess. Many applications create and destroy widgets as they go.
        Selecting this menu item will cause eeddiittrreess to ask the application to
        resend its widget tree, thus updating its information to the new state
        of the application.

    EExxaammppllee
        Xman only creates the widgets for its "topbox" when it starts up. None
        of the widgets for the manual page window are created until the user
        clicks the MMaannuuaall PPaaggee button. If xman's widget tree is retrieved
        before the manual page is active, you might want to refresh the widget
        tree after the manual page has been displayed. This will also allow
        you to edit the manual page's resources.

    DDuummpp WWiiddggeett TTrreeee ttoo aa FFiillee
        For documenting applications, it is often useful to dump the entire
        application widget tree to an ASCII file. This file can then be
        included in the manual page. When this menu item is selected, a pop-up
        dialog box is activated. Type the name of the file in this dialog box,
        and either click OOKK or press ENTER. The widget tree will then be
        dumped to this file by eeddiittrreess. To cancel the file dialog box, click
        CCaanncceell.

    SShhooww RReessoouurrccee BBooxx
        Causes a resource box for the current client to appear. Use this
        resource box (described later) to view the resources that can be set
        for the widget that is currently selected in the widget tree display.
        Only one widget can be selected at a time. If more than one widget is
        selected, eeddiittrreess will refuse to display the resource box, and it will
        put an error message in the message area.

    SSeett RReessoouurrccee
        This command displays a dialog box for setting an arbitrary resource
        on all selected widgets. You must type in the resource name, as well
        as the value. Use the TAB key to switch between the resource name
        field the resource value field.

    QQuuiitt
        Exits eeddiittrreess.

  TTRREEEE CCOOMMMMAANNDDSS

    The TTrreeee menu contains several commands you can use to perform operations
    on the widget tree.

    SSeelleecctt WWiiddggeett iinn CClliieenntt
        Use this menu item to select any widget in the application; eeddiittrreess
        will then highlight the corresponding element in the widget tree
        display. Once this menu item is selected, the cursor will change from
        a pointer to a cross-hair. You can then click any pointer button in
        the widget that you want to have displayed. Because some widgets are
        fully obscured by their children, it is not possible to get to every
        widget this way, but this mechanism does provide a useful exchange of
        information between the elements in the widget tree and those in the
        actual client.

    SSeelleecctt AAllll

    UUnnsseelleecctt AAllll

    IInnvveerrtt AAllll
        These functions to select, unselect, or invert all widgets in the
        widget tree.

    SSeelleecctt CChhiillddrreenn

    SSeelleecctt PPaarreennttss
        These functions select the immediate parent or children of each of the
        currently selected widgets.

    SSeelleecctt DDeesscceennddaannttss

    SSeelleecctt AAnncceessttoorrss
        These functions select all parents or children of each of the
        currently selected widgets. This is a recursive search.

    SShhooww WWiiddggeett NNaammeess

    SShhooww CCllaassss NNaammeess

    SShhooww WWiiddggeett IIDDss

    SShhooww WWiiddggeett WWiinnddoowwss
        When the widget tree is initially displayed, the labels of each widget
        in the tree correspond to the widget names. These functions will cause
        the label of all widgets in the tree to be changed to show the class
        name, IDs, or window associated with each widget in the application.
        The widget IDs, and windows are shown as hexadecimal numbers.

    FFllaasshh AAccttiivvee WWiiddggeettss
        This command is the inverse of the SSeelleecctt WWiiddggeett iinn CClliieenntt command: it
        will show the user each widget that is currently selected in the
        widget tree. It does so by flashing the corresponding widget in the
        application numFlashes times (three by default) in the flashColor.

    In addition, there are keyboard accelerators for each of the tree
    operations. If the input focus is over an individual widget in the tree,
    that operation will only affect that widget. If the input focus is in the
    tree background, it will have exactly the same effect as the corresponding
    menu item.

    The translation entries shown can be applied to any widget in the
    application. If that widget is a child of the Tree widget, it will only
    affect that widget; otherwise, it will have the same effect as the
    commands in the tree menu.

    KKeeyy       OOppttiioonn                       TTrraannssllaattiioonn EEnnttrryy

    Space     Unselect                     Select(nothing)

    w         Select                       Select(widget)

    s         Select                       Select(all)

    i         Invert                       Select(invert)

    c         Select Children              Select(children)

    d         Select Descendants           Select(descendants)

    p         Select Parent                Select(parent)

    a         Select Ancestors             Select(ancestors)

    N         Show Widget Names            Relabel(name)

    C         Show Class Names             Relabel(class)

    I         Show Widget IDs              Relabel(id)

    W         Show Widget Windows          Relabel(window)

    T         Toggle Widget/Class Name     Relabel(toggle)

    Clicking button 1 on a widget adds it to the set of selected widgets.
    Clicking button 2 on a widget deselects all other widgets, and then
    selects just that widget. Clicking button 3 on a widget toggles its label
    between the widget's instance name the widget's class name.

  UUSSIINNGG TTHHEE RREESSOOUURRCCEE BBOOXX

    The resource box contains five different areas. Each of these areas will
    be discussed in the order in which they appear on the screen, from top to
    bottom.

    TThhee RReessoouurrccee LLiinnee
        This area at the top of the resource box shows the current resource
        name exactly as it would appear if you were to save it to a file or
        apply it.

    TThhee WWiiddggeett NNaammeess aanndd CCllaasssseess
        Use this area to select the widgets to which this resource will apply.
        The area contains four lines. The first line contains the name of the
        selected widget, all of its ancestors, and the more restrictive period
        (..) separator. The second line contains the class names of each widget
        and the less restrictive asterisk (**) separator. The third line
        contains a set of special buttons called AAnnyy WWiiddggeett that generalize
        this level to match any widget. The last line contains a set of
        special buttons called AAnnyy WWiiddggeett CChhaaiinn that turn the single level
        into something that matches zero or more levels.
        The initial state of this area is the most restrictive, using the
        resource names and the period (..) separator. If you select other
        buttons in this area, you can ease the restrictions to allow more
        widgets to match the specification. The extreme case is to select all
        of the AAnnyy WWiiddggeett CChhaaiinn buttons, which will match every widget in the
        application. As you select different buttons, the tree display will
        update to show you exactly which widgets will be affected by the
        current resource specification.

    NNoorrmmaall aanndd CCoonnssttrraaiinntt RReessoouurrcceess
        This area allows you to select the name of the normal or constraint
        resources you want to set. Some widgets may not have constraint
        resources, so that area will not appear.

    RReessoouurrccee VVaalluuee
        Use this area to enter the resource value. Because this value should
        be entered exactly as you would type a line into your resource file,
        it should not contain any unescaped newlines. The special character
        sequences for this file are described in the following list:

        \\nn
            This will be replaced with a newline.

        \\######
            Where ## is any octal digit. This will be replaced with a single
            byte that contains this sequence interpreted as an octal number.
            For example, a value containing a NULL byte can be stored by
            specifying \\000000.

        \\<<nneeww--lliinnee>>
            Compresses to nothing.

        \\\\
            Compresses to a single backslash.

    CCoommmmaanndd AArreeaa
        Contains several command buttons that are described later in this
        section.

    SSeett SSaavvee FFiillee
        Modifies the file to which the resources will be saved. When you click
        this button, a dialog box prompts you for a file name. Once the file
        name has been typed, press ENTER or click OOKK. To close the dialog box
        without changing the save file, click CCaanncceell.

    SSaavvee
        Appends the resource line described above to the end of the current
        save file. If no save file has been set, the SSeett SSaavvee FFiillee dialog box
        will prompt you for a file name.

    AAppppllyy
        Attempts to perform a XtSetValues call on all widgets that match the
        resource line. The value specified is applied directly to all matching
        widgets. This behavior is an attempt to give a dynamic feel to the
        resource editor. You can use this feature to put an application in
        states it may not be willing to handle; a hook has been provided to
        allow specific clients to block these SetValues requests (see Blocking
        Editres Requests, described later).
        Due to design constraints imposed on the widgets by the X Toolkit and
        the Resource Manager, trying to force an inherently static system into
        dynamic behavior can produce strange results. There is no guarantee
        that the clicking the AAppppllyy button will produce the same results as
        saving the value and restarting the application. This functionality is
        provided to give users a preview of what particular changes might
        accomplish. The results obtained, however, are neither reliable nor
        predictable. Nonetheless, this is a strong and useful feature of
        eeddiittrreess. Users are encouraged to experiment with it to learn the many
        useful ways in which it can be applied.

    SSaavvee aanndd AAppppllyy
        Combines the save and apply actions described previously into one
        button.

    PPooppddoowwnn RReessoouurrccee BBooxx
        Removes the resource box from the display.

  BBLLOOCCKKIINNGG EEDDIITTRREESS RREEQQUUEESSTTSS

    The eeddiittrreess protocol has been built into the Athena Widget set. This
    allows all applications that are linked against Xaw to communicate with
    the resource editor. While this provides great flexibility and is a useful
    tool, it can easily be misused. It is therefore possible for any Xaw
    client to either specify a value for the eeddiittrreessBBlloocckk resource that will
    prevent eeddiittrreess from divulging information about its internals, or to
    disable the SSeettVVaalluueess part of the protocol.
    eeddiittrreessBBlloocckk ((Class EditresBlock)
        Specifies which type of blocking this client wants to impose on the
        eeddiittrreess protocol.
        The accepted values are:

        aallll
            Block all requests.

        sseettVVaalluueess
            Block all setvalues requests. This is the only eeddiittrreess request
            that actually modifies the application that is in effect, stating
            that the application is read-only.

        nnoonnee
            Allow all eeddiittrreess requests.

    These resources are set on any Xaw client, not eeddiittrreess. They allow
    individual clients to prevent all or some of the requests eeddiittrreess makes
    from succeeding. Because eeddiittrreess is also an Xaw client, it can be viewed
    and modified by eeddiittrreess (which might seem rather recursive). These
    commands can be blocked by setting the eeddiittrreessBBlloocckk resource on eeddiittrreess
    itself.

  RREESSOOUURRCCEESS

    The available application resources for eeddiittrreess are as follows:
    nnuummFFllaasshheess ((ClassNNuummFFllaasshheess))
        Specifies the number of times the widgets in the client application
        will be flashed when the SShhooww AAccttiivvee WWiiddggeettss command is invoked.
    ffllaasshhTTiimmee ((ClassFFllaasshhTTiimmee))
        Amount of time between the flashes described in the previous entry.
    ffllaasshhCCoolloorr ((ClassffllaasshhCCoolloorr))
        Specifies the color used to flash client widgets. It is recommended
        that a bright color such as red or yellow be used to draw attention to
        the area being flashed.
    ssaavveeRReessoouurrcceessFFiillee ((ClassSSaavveeRReessoouurrcceessFFiillee))
        This is the file the resource line will be append to when the SSaavvee
        button is activated in the resource box.

  WWIIDDGGEETTSS

    In order to specify resources, it is useful to know the hierarchy of the
    widgets that compose eeddiittrreess. In the following notation, indentation
    indicates hierarchical structure. The widget class name is given first,
    followed by the widget instance name.

    Editres  editres
      Paned  paned
         Box  box
           MenuButton  commands
              SimpleMenu  menu
              SmeBSB  sendTree
              SmeBSB  refreshTree
              SmeBSB  dumpTreeToFile
              SmeLine  line
              SmeBSB  getResourceList
              SmeLine  line
              SmeBSB  quit
           MenuButton  treeCommands
              SimpleMenu  menu
              SmeBSB  showClientWidget
              SmeBSB  selectAll
              SmeBSB  unselectAll
              SmeBSB  invertAll
              SmeLine  line
              SmeBSB  selectChildren
              SmeBSB  selectParent
              SmeBSB  selectDescendants
              SmeBSB  selectAncestors
              SmeLine  line
              SmeBSB  showWidgetNames
              SmeBSB  showClassNames
              SmeBSB  showWidgetIDs
              SmeBSB  showWidgetWindows
              SmeLine  line
              SmeBSB  flashActiveWidgets
         Paned  hPane
           Panner  panner
           Label  userMessage
           Grip  grip
         Porthole  porthole
           Tree  tree
              Toggle  <name of widget in client>
              .
              TransientShell  resourceBox
              Paned  pane
              Label  resourceLabel
              Form  namesAndClasses
              Toggle  dot
              Toggle  star
              Toggle  any
              Toggle  name
              Toggle  class
                   .
              Label  namesLabel
              List  namesList
              Label  constraintLabel
              List  constraintList
              Form  valueForm
              Label  valueLabel
              Text  valueText
              Box  commandBox
              Command  setFile
              Command  save
              Command  apply
              Command  saveAndApply
              Command  cancel
              Grip  grip
         Grip  grip

  EENNVVIIRROONNMMEENNTT VVAARRIIAABBLLEESS

    DISPLAY
        Provides the default host and display number.

    XENVIRONMENT
        Provides the name of a resource file that overrides the global
        resources stored in the RESOURCE_MANAGER property.

  FFIILLEESS

    //uussrr//lliibb//XX1111//aapppp--ddeeffaauullttss//EEddiittrreess
        Specifies required resources.

  RREESSTTRRIICCTTIIOONNSS

    This is a prototype. There are lots of useful features I would love to
    add, but I hope this will give you some ideas about what a resource editor
    can do.

  CCOOPPYYRRIIGGHHTT

    Copyright 1990, Massachusetts Institute of Technology.
    See XX(5X11R5) for a full statement of rights and permissions.

  AAUUTTHHOORR

    Chris D. Peterson, formerly MIT X Consortium

  SSEEEE AALLSSOO

    _X

    _x_r_d_b

    Athena Widget Set

