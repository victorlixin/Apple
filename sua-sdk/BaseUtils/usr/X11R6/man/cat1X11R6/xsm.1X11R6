xsm(1X11R6)                                                 xsm(1X11R6)

  XXSSMM

  NNAAMMEE

    xsm - X Session Manager

  SSYYNNOOPPSSIISS

    xsm [[-display display]] [[-session sessionName]] [[-verbose]]

  DDEESSCCRRIIPPTTIIOONN

    xsm is a session manager. A session is a group of applications, each of
    which has a particular state. xsm allows you to create arbitrary sessions
    - for example, you might have a "light" session, a "development" session,
    or an "xterminal" session. Each session can have its own set of
    applications. Within a session, you can perform a "checkpoint" to save
    application state, or a "shutdown" to save state and exit the session.
    When you log back in to the system, you can load a specific session, and
    you can delete sessions you no longer want to keep.

    Some session managers simply allow you to manually specify a list of
    applications to be started in a session. xsm is more powerful because it
    lets you run applications and have them automatically become part of the
    session. On a simple level, xsm is useful because it gives you this
    ability to easily define which applications are in a session. The true
    power of xsm, however, can be taken advantage of when more and more
    applications learn to save and restore their state.

  OOPPTTIIOONNSS
    --ddiissppllaayy display
        Causes xsm to connect to the specified X display.
    --sseessssiioonn sessionName
        Causes xsm to load the specified session, bypassing the session menu.

    --vveerrbboossee
        Turns on debugging information.

  SSEETTUUPP

  ..xxsseessssiioonn ffiillee

    Using xsm requires a change to your .xsession file:

    The last program executed by your .xsession file should be xsm. With this
    configuration, when the user chooses to shut down the session using xsm,
    the session will truly be over.

    Since the goal of the session manager is to restart clients when logging
    into a session, your .xsession file, in general, should not directly start
    up applications. Rather, the applications should be started within a
    session. When xsm shuts down the session, xsm will know to restart these
    applications. Note however that there are some types of applications that
    are not "session aware". xsm allows you to manually add these applications
    to your session (see the section titled Client List).

  SSMM__SSAAVVEE__DDIIRR eennvviirroonnmmeenntt vvaarriiaabbllee

    If the SM_SAVE_DIR environment variable is defined, xsm will save all
    configuration files in this directory. Otherwise, they will be stored in
    the user's home directory. Session aware applications are also encouraged
    to save their checkpoint files in the SM_SAVE_DIR directory, although the
    user should not depend on this convention.

  DDeeffaauulltt SSttaarrttuupp AApppplliiccaattiioonnss

    The first time xsm is started, it will need to locate a list of
    applications to start up. For example, this list might include a window
    manager, a session management proxy, and an xterm. xsm will first look for
    the file .xsmstartup in the user's home directory. If that file does not
    exists, it will look for the system.xsm file that was set up at
    installation time. Note that xsm provides a "fail safe" option when the
    user chooses a session to start up. The fail safe option simply loads the
    default applications described above.

    Each line in the startup file should contain a command to start an
    application. A sample startup file might look this:

    <start of file>
    twm
    smproxy
    xterm
    <end of file>

  SSTTAARRTTIINNGG AA SSEESSSSIIOONN

    When xsm starts up, it first checks to see if the user previously saved
    any sessions. If no saved sessions exist, xsm starts up a set of default
    applications (as described above in the section titled Default Startup
    Applications). If at least one session exists, a session menu is
    presented. The [[--sseessssiioonn sseessssiioonnNNaammee]] option forces the specified session
    to be loaded, bypassing the session menu.

  TThhee sseessssiioonn mmeennuu

    The session menu presents the user with a list of sessions to choose from.
    The user can change the currently selected session with the mouse, or by
    using the up and down arrows on the keyboard. Note that sessions which are
    locked (i.e. running on a different display) can not be loaded or deleted.

    The following operations can be performed from the session menu:

    LLooaadd SSeessssiioonn
        Pressing this button will load the currently selected session.
        Alternatively, hitting the Return key will also load the currently
        selected session, or the user can double click a session from the
        list.

    DDeelleettee SSeessssiioonn
        This operation will delete the currently selected session, along with
        all of the application checkpoint files associated with the session.
        After pressing this button, the user will be asked to press the button
        a second time in order to confirm the operation.

    DDeeffaauulltt//FFaaiill SSaaffee
        xsm will start up a set of default applications (as described above in
        the section titled Default Startup Applications). This is useful when
        the user wants to start a fresh session, or if the session
        configuration files were corrupted and the user wants a "fail safe"
        session.

    CCaanncceell
        Pressing this button will cause xsm to exit. It can also be used to
        cancel a "Delete Session" operation.

  CCOONNTTRROOLLLLIINNGG AA SSEESSSSIIOONN

    After xsm determines which session to load, it brings up its main window,
    then starts up all applications that are part of the session. The title
    bar for the session manager's main window will contain the name of the
    session that was loaded.

    The following options are available from xsm's main window:

    CClliieenntt LLiisstt
        Pressing this button brings up a window containing a list of all
        clients that are in the current session. For each client, the host
        machine that the client is running on is presented. As clients are
        added and removed from the session, this list is updated to reflect
        the changes. The user is able to control how these clients are
        restarted (see below).

    By pressing the VViieeww PPrrooppeerrttiieess button, the user can view the session
    management properties associated with the currently selected client.

    By pressing the CClloonnee button, the user can start a copy of the selected
    application.

    By pressing the KKiillll CClliieenntt button, the user can remove a client from the
    session.

    By selecting a restart hint from the RReessttaarrtt HHiinntt menu, the user can
    control the restarting of a client. The following hints are available:

    -- The RReessttaarrtt IIff RRuunnnniinngg hint indicates that the client should be
    restarted in the next session if it is connected to the session manager at
    the end of the current session.

    -- The RReessttaarrtt AAnnyywwaayy hint indicates that the client should be restarted in
    the next session even if it exits before the current session is
    terminated.

    -- The RReessttaarrtt IImmmmeeddiiaatteellyy hint is similar to the RReessttaarrtt AAnnyywwaayy hint, but
    in addition, the client is meant to run continuously. If the client exits,
    the session manager will try to restart it in the current session.

    -- The RReessttaarrtt NNeevveerr hint indicates that the client should not be restarted
    in the next session.

    Note that all X applications may not be "session aware". Applications that
    are not session aware are ones that do not support the X Session
    Management Protocol or they can not be detected by the Session Management
    Proxy (see the section titled THE PROXY). xsm allows the user to manually
    add such applications to the session. The bottom of the Client List window
    contains a text entry field in which application commands can be typed in.
    Each command should go on its own line. This information will be saved
    with the session at checkpoint or shutdown time. When the session is
    restarted, xsm will restart these applications in addition to the regular
    "session aware" applications.

    Pressing the DDoonnee button removes the CClliieenntt LLiisstt window.

    SSeessssiioonn LLoogg......

    The Session Log window presents useful information about the session. For
    example, when a session is restarted, all of the restart commands will be
    displayed in the log window.

    CChheecckkppooiinntt

    By performing a checkpoint, all applications that are in the session are
    asked to save their state. Not every application will save its complete
    state, but at a minimum, the session manager is guaranteed that it will
    receive the command required to restart the application (along with all
    command line options). A window manager participating in the session
    should guarantee that the applications will come back up with the same
    window configurations.

    If the session being checkpointed was never assigned a name, the user will
    be required to specify a session name. Otherwise, the user can perform the
    checkpoint using the current session name, or a new session name can be
    specified. If the session name specified already exists, the user will be
    given the opportunity to specify a different name or to overwrite the
    already existing session. Note that a session which is locked can not be
    overwritten.

    When performing a checkpoint, the user must specify a SSaavvee TTyyppee which
    informs the applications in the session how much state they should save.

    The LLooccaall type indicates that the application should save enough
    information to restore the state as seen by the user. It should not affect
    the state as seen by other users. For example, an editor would create a
    temporary file containing the contents of its editing buffer, the location
    of the cursor, etc...

    The GGlloobbaall type indicates that the application should commit all of its
    data to permanent, globally accessible storage. For example, the editor
    would simply save the edited file.

    The BBootthh type indicates that the application should do both of these. For
    example, the editor would save the edited file, then create a temporary
    file with information such as the location of the cursor, etc...

    In addition to the SSaavvee TTyyppee, the user must specify an IInntteerraacctt SSttyyllee.

    The NNoonnee type indicates that the application should not interact with the
    user while saving state.

    The EErrrroorrss type indicates that the application may interact with the user
    only if an error condition arises.

    The AAnnyy type indicates that the application may interact with the user for
    any purpose. Note that xsm will only allow one application to interact
    with the user at a time.

    After the checkpoint is completed, xsm will, if necessary, display a
    window containing the list of applications which did not report a
    successful save of state.

    SShhuuttddoowwnn

    A shutdown provides all of the options found in a checkpoint, but in
    addition, can cause the session to exit. Note that if the interaction
    style is EErrrroorrss or AAnnyy, the user may cancel the shutdown. The user may
    also cancel the shutdown if any of the applications report an unsuccessful
    save of state.

    The user may choose to shutdown the session with our without performing a
    checkpoint.

  HHOOWW XXSSMM RREESSPPOONNDDSS TTOO SSIIGGNNAALLSS

    xsm will respond to a SIGTERM signal by performing a shutdown with the
    following options: fast, no interaction, save type local. This allows the
    user's session to be saved when the system is being shutdown. It can also
    be used to perform a remote shutdown of a session.

    xsm will respond to a SIGUSR1 signal by performing a checkpoint with the
    following options: no interaction, save type local. This signal can be
    used to perform a remote checkpoint of a session.

  TTHHEE PPRROOXXYY

    Since not all applications have been ported to support the X Session
    Management Protocol, a proxy service exists to allow "old" clients to work
    with the session manager. In order for the proxy to detect an application
    joining a session, one of the following must be true:

    - The application maps a top level window containing the WWMM__CCLLIIEENNTT__LLEEAADDEERR
    property. This property provides a pointer to the client leader window
    which contains the WWMM__CCLLAASSSS, WWMM__NNAAMMEE, WWMM__CCOOMMMMAANNDD, and WWMM__CCLLIIEENNTT__MMAACCHHIINNEE
    properties.

    or ...

    - The application maps a top level window which does not contain the
    WWMM__CCLLIIEENNTT__LLEEAADDEERR property. However, this top level window contains the
    WWMM__CCLLAASSSS, WWMM__NNAAMMEE, WWMM__CCOOMMMMAANNDD, and WWMM__CCLLIIEENNTT__MMAACCHHIINNEE properties.

    An application that support the WWMM__SSAAVVEE__YYOOUURRSSEELLFF protocol will receive a
    WWMM__SSAAVVEE__YYOOUURRSSEELLFF client message each time the session manager issues a
    checkpoint or shutdown. This allows the application to save state. If an
    application does not support the WWMM__SSAAVVEE__YYOOUURRSSEELLFF protocol, then the proxy
    will provide enough information to the session manager to restart the
    application (using WWMM__CCOOMMMMAANNDD), but no state will be restored.

  RREEMMOOTTEE AAPPPPLLIICCAATTIIOONNSS

    xsm requires a remote execution protocol in order to restart applications
    on remote machines. Currently, xsm supports the rstart protocol. In order
    to restart an application on remote machine XX, machine XX must have rstart
    installed. In the future, additional remote execution protocols may be
    supported.

  SSEEEE AALLSSOO

    _s_m_p_r_o_x_y(1X11R6)

    _r_s_t_a_r_t(1X11R6)

  AAUUTTHHOORRSS

    Ralph Mor, X Consortium
    Jordan Brown, Quarterdeck Office Systems

