twm(1X11R6)                                                 twm(1X11R6)

  TTWWMM

  NNAAMMEE

    twm - Tab Window Manager for the X Window System

  SSYYNNTTAAXX

    twm [[-display dpy]] [[-s]] [[-f initfile]] [[-v]]

  DDEESSCCRRIIPPTTIIOONN

    Twm is a window manager for the X Window System. It provides titlebars,
    shaped windows, several forms of icon management, user-defined macro
    functions, click-to-type and pointer-driven keyboard focus, and user-
    specified key and pointer button bindings.

    This program is usually started by the user's session manager or startup
    script. When used from _xx_dd_mm(1X11R6) or _xx_ii_nn_ii_tt(1X11R6) without a session
    manager, twm is frequently executed in the foreground as the last client.
    When run this way, exiting twm causes the session to be terminated (i.e.,
    logged out).

    By default, application windows are surrounded by a "frame" with a
    titlebar at the top and a special border around the window. The titlebar
    contains the window's name, a rectangle that is lit when the window is
    receiving keyboard input, and function boxes known as "titlebuttons" at
    the left and right edges of the titlebar.

    Pressing pointer Button1 (usually the left-most button unless it has been
    changed with xmodmap) on a titlebutton will invoke the function associated
    with the button. In the default interface, windows are iconified by
    clicking (pressing and then immediately releasing) the left titlebutton
    (which looks like a Dot). Conversely, windows are deiconified by clicking
    in the associated icon or entry in the icon manager (see description of
    the variable SShhoowwIIccoonnMMaannaaggeerr and of the function ff..sshhoowwiiccoonnmmggrr).

    Windows are resized by pressing the right titlebutton (which resembles a
    group of nested squares), dragging the pointer over edge that is to be
    moved, and releasing the pointer when the outline of the window is the
    desired size. Similarly, windows are moved by pressing in the title or
    highlight region, dragging a window outline to the new location, and then
    releasing when the outline is in the desired position. Just clicking in
    the title or highlight region raises the window without moving it.

    When new windows are created, twm will honor any size and location
    information requested by the user (usually through -geometry command line
    argument or resources for the individual applications). Otherwise, an
    outline of the window's default size, its titlebar, and lines dividing the
    window into a 3x3 grid that track the pointer are displayed. Clicking
    pointer Button1 will position the window at the current position and give
    it the default size. Pressing pointer Button2 (usually the middle pointer
    button) and dragging the outline will give the window its current position
    but allow the sides to be resized as described above. Clicking pointer
    Button3 (usually the right pointer button) will give the window its
    current position but attempt to make it long enough to touch the bottom
    the screen.

  OOPPTTIIOONNSS

    Twm accepts the following command line options:

    --ddiissppllaayy dpy
        This option specifies the X server to use.

    --ss
        This option indicates that only the default screen (as specified by --
        ddiissppllaayy or by the DDIISSPPLLAAYY environment variable) should be managed. By
        default, twm will attempt to manage all screens on the display.
    --ff filename
        This option specifies the name of the startup file to use. By default,
        twm will look in the user's home directory for files named .twmrc.num
        (where num is a screen number) or .twmrc.

    --vv
        This option indicates that twm should print error messages whenever an
        unexpected X Error event is received. This can be useful when
        debugging applications but can be distracting in regular use.

  CCUUSSTTOOMMIIZZAATTIIOONN

    Much of twm's appearance and behavior can be controlled by providing a
    startup file in one of the following locations (searched in order for each
    screen being managed when twm begins):
    $$HHOOMMEE//..ttwwmmrrcc..screennumber
        The screennumber is a small positive number (e.g. 0, 1, etc.)
        representing the screen number (e.g. the last number in the DISPLAY
        environment variable host:displaynum.screennum) that would be used to
        contact that screen of the display. This is intended for displays with
        multiple screens of differing visual types.

    $$HHOOMMEE//..ttwwmmrrcc
        This is the usual name for an individual user's startup file.

    <<XXRRoooott>>//lliibb//XX1111//ttwwmm//ssyysstteemm..ttwwmmrrcc
        If neither of the preceding files are found, twm will look in this
        file for a default configuration. This is often tailored by the site
        administrator to provide convenient menus or familiar bindings for
        novice users. <XRoot> refers to the root of the X11 install tree.

    If no startup files are found, twm will use the built-in defaults
    described above. The only resource used by twm is bitmapFilePath for a
    colon-separated list of directories to search when looking for bitmap
    files (for more information, see the Athena Widgets manual and
    _xx_rr_dd_bb(1X11R6)).

    Twm startup files are logically broken up into three types of
    specifications: Variables, Bindings, Menus. The Variables section must
    come first and is used to describe the fonts, colors, cursors, border
    widths, icon and window placement, highlighting, autoraising, layout of
    titles, warping, use of the icon manager. The Bindings section usually
    comes second and is used to specify the functions that should be to be
    invoked when keyboard and pointer buttons are pressed in windows, icons,
    titles, and frames. The Menus section gives any user-defined menus
    (containing functions to be invoked or commands to be executed).

    Variable names and keywords are case-insensitive. Strings must be
    surrounded by double quote characters (e.g. "blue") and are case-
    sensitive. A pound sign (#) outside of a string causes the remainder of
    the line in which the character appears to be treated as a comment.

  VVAARRIIAABBLLEESS

    Many of the aspects of twm's user interface are controlled by variables
    that may be set in the user's startup file. Some of the options are
    enabled or disabled simply by the presence of a particular keyword. Other
    options require keywords, numbers, strings, or lists of all of these.

    Lists are surrounded by braces and are usually separated by whitespace or
    a newline. For example:

    AAuuttooRRaaiissee { "emacs" "XTerm" "Xmh" }

    or

    AAuuttooRRaaiissee
    {
       "emacs"
       "XTerm"
       "Xmh"
    }

    When a variable containing a list of strings representing windows is
    searched (e.g. to determine whether or not to enable autoraise as shown
    above), a string must be an exact, case-sensitive match to the window's
    name (given by the WM_NAME window property), resource name or class name
    (both given by the WM_CLASS window property). The preceding example would
    enable autoraise on windows named "emacs" as well as any xterm (since they
    are of class "XTerm") or xmh windows (which are of class "Xmh").

    String arguments that are interpreted as filenames (see the PPiixxmmaappss,
    CCuurrssoorrss, and IIccoonnDDiirreeccttoorryy below) will prepend the user's directory
    (specified by the HHOOMMEE environment variable) if the first character is a
    tilde (~). If, instead, the first character is a colon (:), the name is
    assumed to refer to one of the internal bitmaps that are used to create
    the default titlebars symbols: ::xxllooggoo or ::ddeelleettee (both refer to the X
    logo), ::ddoott or ::iiccoonniiffyy (both refer to the dot), ::rreessiizzee (the nested
    squares used by the resize button), ::mmeennuu (a page with lines), and ::
    qquueessttiioonn (the question mark used for non-existent bitmap files).

    The following variables may be specified at the top of a twm startup file.
    Lists of Window name prefix strings are indicated by win-list. Optional
    arguments are shown in square brackets:
    AAuuttooRRaaiissee { win-list }
        This variable specifies a list of windows that should automatically be
        raised whenever the pointer enters the window. This action can be
        interactively enabled or disabled on individual windows using the
        function ff..aauuttoorraaiissee.

    AAuuttooRReellaattiivveeRReessiizzee
        This variable indicates that dragging out a window size (either when
        initially sizing the window with pointer Button2 or when resizing it)
        should not wait until the pointer has crossed the window edges.
        Instead, moving the pointer automatically causes the nearest edge or
        edges to move by the same amount. This allows the resizing of windows
        that extend off the edge of the screen. If the pointer is in the
        center of the window, or if the resize is begun by pressing a
        titlebutton, twm will still wait for the pointer to cross a window
        edge (to prevent accidents). This option is particularly useful for
        people who like the press-drag-release method of sweeping out window
        sizes.
    BBoorrddeerrCCoolloorr string [{ wincolorlist }]
        This variable specifies the default color of the border to be placed
        around all non-iconified windows, and may only be given within a
        CCoolloorr, GGrraayyssccaallee or MMoonnoocchhrroommee list. The optional wincolorlist
        specifies a list of window and color name pairs for specifying
        particular border colors for different types of windows. For example:

    BBoorrddeerrCCoolloorr "gray50"
    {
       "XTerm"  "red"
       "xmh" "green"
    }

    The default is "black".

    BBoorrddeerrTTiilleeBBaacckkggrroouunndd string [{ wincolorlist }]

    This variable specifies the default background color in the gray pattern
    used in unhighlighted borders (only if NNooHHiigghhlliigghhtt hasn't been set), and
    may only be given within a CCoolloorr, GGrraayyssccaallee or MMoonnoocchhrroommee list. The
    optional wincolorlist allows per-window colors to be specified. The
    default is "white".

    BBoorrddeerrTTiilleeFFoorreeggrroouunndd string [{ wincolorlist }]

    This variable specifies the default foreground color in the gray pattern
    used in unhighlighted borders (only if NNooHHiigghhlliigghhtt hasn't been set), and
    may only be given within a CCoolloorr, GGrraayyssccaallee or MMoonnoocchhrroommee list. The
    optional wincolorlist allows per-window colors to be specified. The
    default is "black".

    BBoorrddeerrWWiiddtthh pixels

    This variable specifies the width in pixels of the border surrounding all
    client window frames if CClliieennttBBoorrddeerrWWiiddtthh has not been specified. This
    value is also used to set the border size of windows created by twm (such
    as the icon manager). The default is 2.

    BBuuttttoonnIInnddeenntt pixels

    This variable specifies the amount by which titlebuttons should be
    indented on all sides. Positive values cause the buttons to be smaller
    than the window text and highlight area so that they stand out. Setting
    this and the TTiittlleeBBuuttttoonnBBoorrddeerrWWiiddtthh variables to 0 makes titlebuttons be
    as tall and wide as possible. The default is 1.

    CClliieennttBBoorrddeerrWWiiddtthh

    This variable indicates that border width of a window's frame should be
    set to the initial border width of the window, rather than to the value of
    BBoorrddeerrWWiiddtthh.

    CCoolloorr { colors-list }

    This variable specifies a list of color assignments to be made if the
    default display is capable of displaying more than simple black and white.
    The colors-list is made up of the following color variables and their
    values: DDeeffaauullttBBaacckkggrroouunndd, DDeeffaauullttFFoorreeggrroouunndd, MMeennuuBBaacckkggrroouunndd,
    MMeennuuFFoorreeggrroouunndd, MMeennuuTTiittlleeBBaacckkggrroouunndd, MMeennuuTTiittlleeFFoorreeggrroouunndd, MMeennuuSShhaaddoowwCCoolloorr,
    PPooiinntteerrFFoorreeggrroouunndd, and PPooiinntteerrBBaacckkggrroouunndd. The following color variables
    may also be given a list of window and color name pairs to allow per-
    window colors to be specified (see BBoorrddeerrCCoolloorr for details): BBoorrddeerrCCoolloorr,
    IIccoonnMMaannaaggeerrHHiigghhlliigghhtt, BBoorrddeerrTTiittlleeBBaacckkggrroouunndd, BBoorrddeerrTTiittlleeFFoorreeggrroouunndd,
    TTiittlleeBBaacckkggrroouunndd, TTiittlleeFFoorreeggrroouunndd, IIccoonnBBaacckkggrroouunndd, IIccoonnFFoorreeggrroouunndd,
    IIccoonnBBoorrddeerrCCoolloorr, IIccoonnMMaannaaggeerrBBaacckkggrroouunndd, and IIccoonnMMaannaaggeerrFFoorreeggrroouunndd. For
    example:

    CCoolloorr
    {
       MenuBackground "gray50"
       MenuForeground "blue"
       BorderColor    "red" { "XTerm" "yellow" }
       TitleForeground"yellow"
       TitleBackground"blue"
    }

    All of these color variables may also be specified for the MMoonnoocchhrroommee
    variable, allowing the same initialization file to be used on both color
    and monochrome displays.

    CCoonnssttrraaiinneeddMMoovveeTTiimmee milliseconds

    This variable specifies the length of time between button clicks needed to
    begin a constrained move operation. Double clicking within this amount of
    time when invoking ff..mmoovvee will cause the window to be moved only in a
    horizontal or vertical direction. Setting this value to 0 will disable
    constrained moves. The default is 400 milliseconds.

    CCuurrssoorrss { cursor-list }

    This variable specifies the glyphs that twm should use for various pointer
    cursors. Each cursor may be defined either from the ccuurrssoorr font or from
    two bitmap files. Shapes from the ccuurrssoorr font may be specified directly
    as:

       cursorname  "string"

    where cursorname is one of the cursor names listed below, and string is
    the name of a glyph as found in the file <XRoot>/include/X11/cursorfont.h
    (without the "XC_" prefix). If the cursor is to be defined from bitmap
    files, the following syntax is used instead:

       cursorname  "image""mask"

    The image and mask strings specify the names of files containing the glyph
    image and mask in _bb_ii_tt_mm_aa_pp(1X11R6) form. The bitmap files are located in the
    same manner as icon bitmap files. The following example shows the default
    cursor definitions:

    CCuurrssoorrss
    {
       Frame    "top_left_arrow"
       Title    "top_left_arrow"
       Icon     "top_left_arrow"
       IconMgr  "top_left_arrow"
       Move     "fleur"
       Resize      "fleur"
       Menu     "sb_left_arrow"
       Button      "hand2"
       Wait     "watch"
       Select      "dot"
       Destroy  "pirate"
    }

    DDeeccoorraatteeTTrraannssiieennttss

    This variable indicates that transient windows (those containing a
    WM_TRANSIENT_FOR property) should have titlebars. By default, transients
    are not reparented.

    DDeeffaauullttBBaacckkggrroouunndd string

    This variable specifies the background color to be used for sizing and
    information windows. The default is "white".

    DDeeffaauullttFFoorreeggrroouunndd string

    This variable specifies the foreground color to be used for sizing and
    information windows. The default is "black".

    DDoonnttIIccoonniiffyyBByyUUnnmmaappppiinngg { win-list }

    This variable specifies a list of windows that should not be iconified by
    simply unmapping the window (as would be the case if IIccoonniiffyyBByyUUnnmmaappppiinngg
    had been set). This is frequently used to force some windows to be treated
    as icons while other windows are handled by the icon manager.

    DDoonnttMMoovveeOOffff

    This variable indicates that windows should not be allowed to be moved off
    the screen. It can be overridden by the ff..ffoorrcceemmoovvee function.

    DDoonnttSSqquueeeezzeeTTiittllee [{ win-list }]

    This variable indicates that titlebars should not be squeezed to their
    minimum size as described under SSqquueeeezzeeTTiittllee below. If the optional window
    list is supplied, only those windows will be prevented from being
    squeezed.

    FFoorrcceeIIccoonnss

    This variable indicates that icon pixmaps specified in the IIccoonnss variable
    should override any client-supplied pixmaps.

    FFrraammeePPaaddddiinngg pixels

    This variable specifies the distance between the titlebar decorations (the
    button and text) and the window frame. The default is 2 pixels.

    GGrraayyssccaallee { colors }

    This variable specifies a list of color assignments that should be made if
    the screen has a GrayScale default visual. See the description of CCoolloorrss.

    IIccoonnBBaacckkggrroouunndd string [{ win-list }]

    This variable specifies the background color of icons, and may only be
    specified inside of a CCoolloorr, GGrraayyssccaallee or MMoonnoocchhrroommee list. The optional
    win-list is a list of window names and colors so that per-window colors
    may be specified. See the BBoorrddeerrCCoolloorr variable for a complete description
    of the win-list. The default is "white".

    IIccoonnBBoorrddeerrCCoolloorr string [{ win-list }]

    This variable specifies the color of the border used for icon windows, and
    may only be specified inside of a CCoolloorr, GGrraayyssccaallee or MMoonnoocchhrroommee list. The
    optional win-list is a list of window names and colors so that per-window
    colors may be specified. See the BBoorrddeerrCCoolloorr variable for a complete
    description of the win-list. The default is "black".

    IIccoonnBBoorrddeerrWWiiddtthh pixels

    This variable specifies the width in pixels of the border surrounding icon
    windows. The default is 2.

    IIccoonnDDiirreeccttoorryy string

    This variable specifies the directory that should be searched if if a
    bitmap file cannot be found in any of the directories in the
    bbiittmmaappFFiilleePPaatthh resource.

    IIccoonnFFoonntt string

    This variable specifies the font to be used to display icon names within
    icons. The default is "variable".

    IIccoonnFFoorreeggrroouunndd string [{ win-list }]

    This variable specifies the foreground color to be used when displaying
    icons, and may only be specified inside of a CCoolloorr, GGrraayyssccaallee or
    MMoonnoocchhrroommee list. The optional win-list is a list of window names and
    colors so that per-window colors may be specified. See the BBoorrddeerrCCoolloorr
    variable for a complete description of the win-list. The default is
    "black".

    IIccoonniiffyyBByyUUnnmmaappppiinngg [[{{ win-list }]

    This variable indicates that windows should be iconified by being unmapped
    without trying to map any icons. This assumes that the user will remap the
    window through the icon manager, the ff..wwaarrppttoo function, or the TwmWindows
    menu. If the optional win-list is provided, only those windows will be
    iconified by simply unmapping. Windows that have both this and the
    IIccoonnMMaannaaggeerrDDoonnttSShhooww options set may not be accessible if no binding to the
    TwmWindows menu is set in the user's startup file.

    IIccoonnMMaannaaggeerrBBaacckkggrroouunndd string [{ win-list }]

    This variable specifies the background color to use for icon manager
    entries, and may only be specified inside of a CCoolloorr, GGrraayyssccaallee or
    MMoonnoocchhrroommee list. The optional win-list is a list of window names and
    colors so that per-window colors may be specified. See the BBoorrddeerrCCoolloorr
    variable for a complete description of the win-list. The default is
    "white".

    IIccoonnMMaannaaggeerrDDoonnttSShhooww [{ win-list }]

    This variable indicates that the icon manager should not display any
    windows. If the optional win-list is given, only those windows will not be
    displayed. This variable is used to prevent windows that are rarely
    iconified (such as xclock or xload) from taking up space in the icon
    manager.

    IIccoonnMMaannaaggeerrFFoonntt string

    This variable specifies the font to be used when displaying icon manager
    entries. The default is "variable".

    IIccoonnMMaannaaggeerrFFoorreeggrroouunndd string [{ win-list }]

    This variable specifies the foreground color to be used when displaying
    icon manager entries, and may only be specified inside of a CCoolloorr,
    GGrraayyssccaallee or MMoonnoocchhrroommee list. The optional win-list is a list of window
    names and colors so that per-window colors may be specified. See the
    BBoorrddeerrCCoolloorr variable for a complete description of the win-list. The
    default is "black".

    IIccoonnMMaannaaggeerrGGeeoommeettrryy string [ columns ]

    This variable specifies the geometry of the icon manager window. The
    string argument is standard geometry specification that indicates the
    initial full size of the icon manager. The icon manager window is then
    broken into columns pieces and scaled according to the number of entries
    in the icon manager. Extra entries are wrapped to form additional rows.
    The default number of columns is 1.

    IIccoonnMMaannaaggeerrHHiigghhlliigghhtt string [{ win-list }]

    This variable specifies the border color to be used when highlighting the
    icon manager entry that currently has the focus, and can only be specified
    inside of a CCoolloorr, GGrraayyssccaallee or MMoonnoocchhrroommee list. The optional win-list is
    a list of window names and colors so that per-window colors may be
    specified. See the BBoorrddeerrCCoolloorr variable for a complete description of the
    win-list. The default is "black".

    IIccoonnMMaannaaggeerrss { iconmgr-list }

    This variable specifies a list of icon managers to create. Each item in
    the iconmgr-list has the following format:

       "winname" ["iconname"]"geometry" columns

    where winname is the name of the windows that should be put into this icon
    manager, iconname is the name of that icon manager window's icon, geometry
    is a standard geometry specification, and columns is the number of columns
    in this icon manager as described in IIccoonnMMaannaaggeerrGGeeoommeettrryy. For example:

    IIccoonnMMaannaaggeerrss
    {
       "XTerm"  "=300x5+800+5"5
       "myhost" "=400x5+100+5"2
    }

    Clients whose name or class is "XTerm" will have an entry created in the
    "XTerm" icon manager. Clients whose name was "myhost" would be put into
    the "myhost" icon manager.

    IIccoonnMMaannaaggeerrSShhooww { win-list }

    This variable specifies a list of windows that should appear in the icon
    manager. When used in conjunction with the IIccoonnMMaannaaggeerrDDoonnttSShhooww variable,
    only the windows in this list will be shown in the icon manager.

    IIccoonnRReeggiioonn geomstring vgrav hgrav gridwidth gridheight

    This variable specifies an area on the root window in which icons are
    placed if no specific icon location is provided by the client. The
    geomstring is a quoted string containing a standard geometry
    specification. If more than one IIccoonnRReeggiioonn lines are given, icons will be
    put into the succeeding icon regions when the first is full. The vgrav
    argument should be either NNoorrtthh or SSoouutthh and control and is used to
    control whether icons are first filled in from the top or bottom of the
    icon region. Similarly, the hgrav argument should be either EEaasstt or WWeesstt
    and is used to control whether icons should be filled in from left from
    the right. Icons are laid out within the region in a grid with cells
    gridwidth pixels wide and gridheight pixels high.

    IIccoonnss { win-list }

    This variable specifies a list of window names and the bitmap filenames
    that should be used as their icons. For example:

    IIccoonnss
    {
       "XTerm"  "xterm.icon"
       "xfd"    "xfd_icon"
    }

    Windows that match "XTerm" and would not be iconified by unmapping, and
    would try to use the icon bitmap in the file "xterm.icon". If FFoorrcceeIIccoonnss
    is specified, this bitmap will be used even if the client has requested
    its own icon pixmap.

    IInntteerrppoollaatteeMMeennuuCCoolloorrss

    This variable indicates that menu entry colors should be interpolated
    between entry specified colors. In the example below:

    MMeennuu "mymenu"
    {
       "Title"     ("black":"red")f.title
       "entry1"       f.nop
       "entry2"       f.nop
       "entry3" ("white":"green")f.nop
       "entry4"       f.nop
       "entry5" ("red":"white")f.nop
    }

    the foreground colors for "entry1" and "entry2" will be interpolated
    between black and white, and the background colors between red and green.
    Similarly, the foreground for "entry4" will be half-way between white and
    red, and the background will be half-way between green and white.

    MMaakkeeTTiittllee { win-list }

    This variable specifies a list of windows on which a titlebar should be
    placed and is used to request titles on specific windows when NNooTTiittllee has
    been set.

    MMaaxxWWiinnddoowwSSiizzee string

    This variable specifies a geometry in which the width and height give the
    maximum size for a given window. This is typically used to restrict
    windows to the size of the screen. The default width is 32767 - screen
    width. The default height is 32767 - screen height.

    MMeennuuBBaacckkggrroouunndd string

    This variable specifies the background color used for menus, and can only
    be specified inside of a CCoolloorr or MMoonnoocchhrroommee list. The default is "white".

    MMeennuuFFoonntt string

    This variable specifies the font to use when displaying menus. The default
    is "variable".

    MMeennuuFFoorreeggrroouunndd string

    This variable specifies the foreground color used for menus, and can only
    be specified inside of a CCoolloorr, GGrraayyssccaallee or MMoonnoocchhrroommee list. The default
    is "black".

    MMeennuuSShhaaddoowwCCoolloorr string

    This variable specifies the color of the shadow behind pull-down menus and
    can only be specified inside of a CCoolloorr, GGrraayyssccaallee or MMoonnoocchhrroommee list. The
    default is "black".

    MMeennuuTTiittlleeBBaacckkggrroouunndd string

    This variable specifies the background color for ff..ttiittllee entries in menus,
    and can only be specified inside of a CCoolloorr, GGrraayyssccaallee or MMoonnoocchhrroommee list.
    The default is "white".

    MMeennuuTTiittlleeFFoorreeggrroouunndd string

    This variable specifies the foreground color for ff..ttiittllee entries in menus
    and can only be specified inside of a CCoolloorr or MMoonnoocchhrroommee list. The
    default is "black".

    MMoonnoocchhrroommee { colors }

    This variable specifies a list of color assignments that should be made if
    the screen has a depth of 1. See the description of CCoolloorrss.

    MMoovveeDDeellttaa pixels

    This variable specifies the number of pixels the pointer must move before
    the ff..mmoovvee function starts working. Also see the ff..ddeellttaassttoopp function. The
    default is zero pixels.

    NNooBBaacckkiinnggSSttoorree

    This variable indicates that twm's menus should not request backing store
    to minimize repainting of menus. This is typically used with servers that
    can repaint faster than they can handle backing store.

    NNooCCaasseeSSeennssiittiivvee

    This variable indicates that case should be ignored when sorting icon
    names in an icon manager. This option is typically used with applications
    that capitalize the first letter of their icon name.

    NNooDDeeffaauullttss

    This variable indicates that twm should not supply the default
    titlebuttons and bindings. This option should only be used if the startup
    file contains a completely new set of bindings and definitions.

    NNooGGrraabbSSeerrvveerr

    This variable indicates that twm should not grab the server when popping
    up menus and moving opaque windows.

    NNooHHiigghhlliigghhtt [{ win-list }]

    This variable indicates that borders should not be highlighted to track
    the location of the pointer. If the optional win-list is given,
    highlighting will only be disabled for those windows. When the border is
    highlighted, it will be drawn in the current BBoorrddeerrCCoolloorr. When the border
    is not highlighted, it will be stippled with a gray pattern using the
    current BBoorrddeerrTTiilleeFFoorreeggrroouunndd and BBoorrddeerrTTiilleeBBaacckkggrroouunndd colors.

    NNooIIccoonnMMaannaaggeerrss

    This variable indicates that no icon manager should be created.

    NNooMMeennuuSShhaaddoowwss

    This variable indicates that menus should not have drop shadows drawn
    behind them. This is typically used with slower servers since it speeds up
    menu drawing at the expense of making the menu slightly harder to read.

    NNooRRaaiisseeOOnnDDeeiiccoonniiffyy

    This variable indicates that windows that are deiconified should not be
    raised.

    NNooRRaaiisseeOOnnMMoovvee

    This variable indicates that windows should not be raised when moved. This
    is typically used to allow windows to slide underneath each other.

    NNooRRaaiisseeOOnnRReessiizzee

    This variable indicates that windows should not be raised when resized.
    This is typically used to allow windows to be resized underneath each
    other.

    NNooRRaaiisseeOOnnWWaarrpp

    This variable indicates that windows should not be raised when the pointer
    is warped into them with the ff..wwaarrppttoo function. If this option is set,
    warping to an occluded window may result in the pointer ending up in the
    occluding window instead the desired window (which causes unexpected
    behavior with ff..wwaarrpprriinngg).

    NNooSSaavveeUUnnddeerrss

    This variable indicates that menus should not request save-unders to
    minimize window repainting following menu selection. It is typically used
    with displays that can repaint faster than they can handle save-unders.

    NNooSSttaacckkMMooddee [{ win-list }]

    This variable indicates that client window requests to change stacking
    order should be ignored. If the optional win-list is given, only requests
    on those windows will be ignored. This is typically used to prevent
    applications from relentlessly popping themselves to the front of the
    window stack.

    NNooTTiittllee [{ win-list }]

    This variable indicates that windows should not have titlebars. If the
    optional win-list is given, only those windows will not have titlebars.
    MMaakkeeTTiittllee may be used with this option to force titlebars to be put on
    specific windows.

    NNooTTiittlleeFFooccuuss

    This variable indicates that twm should not set keyboard input focus to
    each window as it is entered. Normally, twm sets the focus so that focus
    and key events from the titlebar and icon managers are delivered to the
    application. If the pointer is moved quickly and twm is slow to respond,
    input can be directed to the old window instead of the new. This option is
    typically used to prevent this "input lag" and to work around bugs in
    older applications that have problems with focus events.

    NNooTTiittlleeHHiigghhlliigghhtt [{ win-list }]

    This variable indicates that the highlight area of the titlebar, which is
    used to indicate the window that currently has the input focus, should not
    be displayed. If the optional win-list is given, only those windows will
    not have highlight areas. This and the SSqquueeeezzeeTTiittllee options can be set to
    substantially reduce the amount of screen space required by titlebars.

    OOppaaqquueeMMoovvee

    This variable indicates that the ff..mmoovvee function should actually move the
    window instead of just an outline so that the user can immediately see
    what the window will look like in the new position. This option is
    typically used on fast displays (particularly if NNooGGrraabbSSeerrvveerr is set).

    PPiixxmmaappss { pixmaps }

    This variable specifies a list of pixmaps that define the appearance of
    various images. Each entry is a keyword indicating the pixmap to set,
    followed by a string giving the name of the bitmap file. The following
    pixmaps may be specified:

    PPiixxmmaappss
    {
       TitleHighlight "gray1"
    }

    The default for TitleHighlight is to use an even stipple pattern.

    PPrriioorriittyy priority

    This variable sets twm's priority. priority should be an unquoted, signed
    number (e.g. 999). This variable has an effect only if the server supports
    the SYNC extension.

    RRaannddoommPPllaacceemmeenntt

    This variable indicates that windows with no specified geometry should be
    placed in a pseudo-random location instead of having the user drag out an
    outline.

    RReessiizzeeFFoonntt string

    This variable specifies the font to be used for in the dimensions window
    when resizing windows. The default is "fixed".

    RReessttaarrttPPrreevviioouussSSttaattee

    This variable indicates that twm should attempt to use the WM_STATE
    property on client windows to tell which windows should be iconified and
    which should be left visible. This is typically used to try to regenerate
    the state that the screen was in before the previous window manager was
    shutdown.

    SSaavveeCCoolloorr { colors-list }

    This variable indicates a list of color assignments to be stored as pixel
    values in the root window property _MIT_PRIORITY_COLORS. Clients may elect
    to preserve these values when installing their own colormap. Note that use
    of this mechanism is a way an for application to avoid the "technicolor"
    problem, whereby useful screen objects such as window borders and
    titlebars disappear when a programs custom colors are installed by the
    window manager. For example:

    SSaavveeCCoolloorr
    {
            BorderColor
            TitleBackground
            TitleForeground
            "red"
            "green"
            "blue"
    }

    This would place on the root window 3 pixel values for borders and
    titlebars, as well as the three color strings, all taken from the default
    colormap.

    SShhoowwIIccoonnMMaannaaggeerr

    This variable indicates that the icon manager window should be displayed
    when twm is started. It can always be brought up using the ff..sshhoowwiiccoonnmmggrr
    function.

    SSoorrttIIccoonnMMaannaaggeerr

    This variable indicates that entries in the icon manager should be sorted
    alphabetically rather than by simply appending new windows to the end.

    SSqquueeeezzeeTTiittllee [{ squeeze-list }]

    This variable indicates that twm should attempt to use the SHAPE extension
    to make titlebars occupy only as much screen space as they need, rather
    than extending all the way across the top of the window. The optional
    squeeze-list may be used to control the location of the squeezed titlebar
    along the top of the window. It contains entries of the form:

       "name"      justificationnumdenom

    where name is a window name, justification is either lleefftt, cceenntteerr, or
    rriigghhtt, and num and denom are numbers specifying a ratio giving the
    relative position about which the titlebar is justified. The ratio is
    measured from left to right if the numerator is positive, and right to
    left if negative. A denominator of 0 indicates that the numerator should
    be measured in pixels. For convenience, the ratio 0/0 is the same as 1/
    2 for cceenntteerr and -1/1 for rriigghhtt. For example:

    SSqquueeeezzeeTTiittllee
    {
       "XTerm"  left  00
       "xterm1" left  13
       "xterm2" left  23
       "oclock" center00
       "emacs"  right 00
    }

    The DDoonnttSSqquueeeezzeeTTiittllee list can be used to turn off squeezing on certain
    titles.

    SSttaarrttIIccoonniiffiieedd [{ win-list }]

    This variable indicates that client windows should initially be left as
    icons until explicitly deiconified by the user. If the optional win-list
    is given, only those windows will be started iconic. This is useful for
    programs that do not support an -iconic command line option or resource.

    TTiittlleeBBaacckkggrroouunndd string [{ win-list }]

    This variable specifies the background color used in titlebars, and may
    only be specified inside of a CCoolloorr, GGrraayyssccaallee or MMoonnoocchhrroommee list. The
    optional win-list is a list of window names and colors so that per-window
    colors may be specified. The default is "white".

    TTiittlleeBBuuttttoonnBBoorrddeerrWWiiddtthh pixels

    This variable specifies the width in pixels of the border surrounding
    titlebuttons. This is typically set to 0 to allow titlebuttons to take up
    as much space as possible and to not have a border. The default is 1.

    TTiittlleeFFoonntt string

    This variable specifies the font to be used for displaying window names in
    titlebars. The default is "variable".

    TTiittlleeFFoorreeggrroouunndd string [{ win-list }]

    This variable specifies the foreground color used in titlebars, and may
    only be specified inside of a CCoolloorr, GGrraayyssccaallee or MMoonnoocchhrroommee list. The
    optional win-list is a list of window names and colors so that per-window
    colors may be specified. The default is "black".

    TTiittlleePPaaddddiinngg pixels

    This variable specifies the distance between the various buttons, text,
    and highlight areas in the titlebar. The default is 8 pixels.

    UUnnkknnoowwnnIIccoonn string

    This variable specifies the filename of a bitmap file to be used as the
    default icon. This bitmap will be used as the icon of all clients which do
    not provide an icon bitmap and are not listed in the IIccoonnss list.

    UUsseePPPPoossiittiioonn string

    This variable specifies whether or not twm should honor program-requested
    locations (given by the PPPPoossiittiioonn flag in the WM_NORMAL_HINTS property) in
    the absence of a user-specified position. The argument string may have one
    of three values: ""ooffff"" (the default) indicating that twm should ignore the
    program-supplied position, ""oonn"" indicating that the position should be
    used, and ""nnoonn--zzeerroo"" indicating that the position should used if it is
    other than (0,0). The latter option is for working around a bug in older
    toolkits.

    WWaarrppCCuurrssoorr [{ win-list }]

    This variable indicates that the pointer should be warped into windows
    when they are deiconified. If the optional win-list is given, the pointer
    will only be warped when those windows are deiconified.

    WWiinnddoowwRRiinngg { win-list }

    This variable specifies a list of windows along which the ff..wwaarrpprriinngg
    function cycles.

    WWaarrppUUnnmmaappppeedd

    This variable indicates that the ff..wwaarrppttoo function should deiconify any
    iconified windows it encounters. This is typically used to make a key
    binding that will pop a particular window (such as xmh), no matter where
    it is. The default is for ff..wwaarrppttoo to ignore iconified windows.

    XXoorrVVaalluuee number

    This variable specifies the value to use when drawing window outlines for
    moving and resizing. This should be set to a value that will result in a
    variety of of distinguishable colors when exclusive-or'ed with the
    contents of the user's typical screen. Setting this variable to 1 often
    gives nice results if adjacent colors in the default colormap are
    distinct. By default, twm will attempt to cause temporary lines to appear
    at the opposite end of the colormap from the graphics.

    ZZoooomm [ count ]

    This variable indicates that outlines suggesting movement of a window to
    and from its iconified state should be displayed whenever a window is
    iconified or deiconified. The optional count argument specifies the number
    of outlines to be drawn. The default count is 8.

    The following variables must be set after the fonts have been assigned, so
    it is usually best to put them at the end of the variables or beginning of
    the bindings sections:
    DDeeffaauullttFFuunnccttiioonn function
        This variable specifies the function to be executed when a key or
        button event is received for which no binding is provided. This is
        typically bound to ff..nnoopp, ff..bbeeeepp, or a menu containing window
        operations.
    WWiinnddoowwFFuunnccttiioonn function
        This variable specifies the function to execute when a window is
        selected from the TTwwmmWWiinnddoowwss menu. If this variable is not set, the
        window will be deiconified and raised.

  BBIINNDDIINNGGSS

    After the desired variables have been set, functions may be attached
    titlebuttons and key and pointer buttons. Titlebuttons may be added from
    the left or right side and appear in the titlebar from left-to-right
    according to the order in which they are specified. Key and pointer button
    bindings may be given in any order.

    Titlebuttons specifications must include the name of the pixmap to use in
    the button box and the function to be invoked when a pointer button is
    pressed within them:

    LLeeffttTTiittlleeBBuuttttoonn "bitmapname"= function

    or

    RRiigghhttTTiittlleeBBuuttttoonn "bitmapname"= function

    The bitmapname may refer to one of the built-in bitmaps (which are scaled
    to match TTiittlleeFFoonntt) by using the appropriate colon-prefixed name described
    above.

    Key and pointer button specifications must give the modifiers that must be
    pressed, over which parts of the screen the pointer must be, and what
    function is to be invoked. Keys are given as strings containing the
    appropriate keysym name; buttons are given as the keywords BBuuttttoonn11-
    BBuuttttoonn55:

    "FP1"    = modlist : context : function
    BBuuttttoonn11  = modlist : context : function

    The modlist is any combination of the modifier names sshhiifftt, ccoonnttrrooll, lloocckk,
    mmeettaa, mmoodd11, mmoodd22, mmoodd33, mmoodd44, or mmoodd55 (which may be abbreviated as ss, cc,
    ll, mm, mm11, mm22, mm33, mm44, mm55, respectively) separated by a vertical bar (|).
    Similarly, the context is any combination of wwiinnddooww, ttiittllee, iiccoonn, rroooott,
    ffrraammee, iiccoonnmmggrr, their first letters (iiccoonnmmggrr abbreviation is mm), or aallll,
    separated by a vertical bar. The function is any of the ff.. keywords
    described below. For example, the default startup file contains the
    following bindings:

    Button1  =  : root: f.menu "TwmWindows"
    Button1  = m   : window | icon: f.function "move-or-lower"
    Button2  = m   : window | icon: f.iconify
    Button3  = m   : window | icon: f.function "move-or-raise"
    Button1  =  : title: f.function "move-or-raise"
    Button2  =  : title: f.raiselower
    Button1  =  : icon: f.function "move-or-iconify"
    Button2  =  : icon: f.iconify
    Button1  =  : iconmgr: f.iconify
    Button2  =  : iconmgr: f.iconify

    A user who wanted to be able to manipulate windows from the keyboard could
    use the following bindings:

    "F1"  =  : all    : f.iconify
    "F2"  =  : all    : f.raiselower
    "F3"  =  : all    : f.warpring "next"
    "F4"  =  : all    : f.warpto "xmh"
    "F5"  =  : all    : f.warpto "emacs"
    "F6"  =  : all    : f.colormap "next"
    "F7"  =  : all    : f.colormap "default"
    "F20" =  : all    : f.warptoscreen "next"
    "Left"   = m   : all: f.backiconmgr
    "Right"  = m | s  : all: f.forwiconmgr
    "Up"  = m   : all : f.upiconmgr
    "Down"   = m | s  : all: f.downiconmgr

    Twm provides many more window manipulation primitives than can be
    conveniently stored in a titlebar, menu, or set of key bindings. Although
    a small set of defaults are supplied (unless the NNooDDeeffaauullttss is specified),
    most users will want to have their most common operations bound to key and
    button strokes. To do this, twm associates names with each of the
    primitives and provides user-defined functions for building higher level
    primitives and menus for interactively selecting among groups of
    functions.

    User-defined functions contain the name by which they are referenced in
    calls to ff..ffuunnccttiioonn and a list of other functions to execute. For example:

    Function "move-or-lower"{ f.move f.deltastop f.lower }
    Function "move-or-raise"{ f.move f.deltastop f.raise }
    Function "move-or-iconify"{ f.move f.deltastop f.iconify }
    Function "restore-colormap"{ f.colormap "default" f.lower }

    The function name must be used in ff..ffuunnccttiioonn exactly as it appears in the
    function specification.

    In the descriptions below, if the function is said to operate on the
    selected window, but is invoked from a root menu, the cursor will be
    changed to the SSeelleecctt cursor and the next window to receive a button press
    will be chosen:
        This function sets the priority of the client owning the selected
        window to the numeric value of the argument string, which should be a
        signed integer in double quotes (e.g. "999" ). This function has an
        effect only if the server supports the SYNC extension.

    ff..qquuiitt
        This function causes twm to restore the window's borders and exit. If
        twm is the first client invoked from xdm, this will result in a server
        reset.

    ff..rraaiissee
        This function raises the selected window.

    ff..rraaiisseelloowweerr
        This function raises the selected window to the top of the stacking
        order if it is occluded by any windows, otherwise the window will be
        lowered.

    ff..rreeffrreesshh
        This function causes all windows to be refreshed.

    ff..rreessiizzee
        This function displays an outline of the selected window. Crossing a
        border (or setting AAuuttooRReellaattiivveeRReessiizzee) will cause the outline to begin
        to rubber band until the invoking button is released. To abort a
        resize, press another button before releasing the first button.

    ff..rreessttaarrtt

    This function kills and restarts twm.

    ff..rriigghhttiiccoonnmmggrr

    This function is similar to

    ff..nneexxttiiccoonnmmggrr except that wrapping does not change rows.

    ff..rriigghhttzzoooomm

    This variable is similar to the ff..bboottttoommzzoooomm function except that the
    selected window is only resized to the right half of the display.

    ff..ssaavveeyyoouurrsseellff

    This function sends a WM_SAVEYOURSELF message to the selected window if it
    has requested the message in its WM_PROTOCOLS window property. Clients
    that accept this message are supposed to checkpoint all state associated
    with the window and update the WM_COMMAND property as specified in the
    ICCCM. If the selected window has not selected for this message, the
    keyboard bell will be rung.

    ff..sshhoowwiiccoonnmmggrr

    This function maps the current icon manager.

    ff..ssoorrttiiccoonnmmggrr

    This function sorts the entries in the current icon manager
    alphabetically. See the variable SSoorrttIIccoonnMMaannaaggeerr.

    ff..ttiittllee

    This function provides a centered, unselectable item in a menu definition.
    It should not be used in any other context.

    ff..ttooppzzoooomm

    This variable is similar to the ff..bboottttoommzzoooomm function except that the
    selected window is only resized to the top half of the display.

    ff..uunnffooccuuss

    This function resets the focus back to pointer-driven. This should be used
    when a focused window is no longer desired.

    ff..uuppiiccoonnmmggrr

    This function warps the pointer to the previous row in the current icon
    manager, wrapping to the last row in the same column if necessary.

    ff..vvllzzoooomm

    This function is a synonym for ff..lleeffttzzoooomm.

    ff..vvrrzzoooomm

    This function is a synonym for ff..rriigghhttzzoooomm.

    ff..wwaarrpprriinngg string

    This function warps the pointer to the next or previous window (as
    indicated by the argument string, which may be ""nneexxtt"" or ""pprreevv"") specified
    in the WWiinnddoowwRRiinngg variable.

    ff..wwaarrppttoo string

    This function warps the pointer to the window which has a name or class
    that matches string. If the window is iconified, it will be deiconified if
    the variable WWaarrppUUnnmmaappppeedd is set or else ignored.

    ff..wwaarrppttooiiccoonnmmggrr string

    This function warps the pointer to the icon manager entry associated with
    the window containing the pointer in the icon manager specified by the
    argument string. If string is empty (i.e. ""), the current icon manager is
    chosen.

    ff..wwaarrppttoossccrreeeenn string

    This function warps the pointer to the screen specified by the argument
    string. String may be a number (e.g. ""00"" or ""11""), the word ""nneexxtt""
    (indicating the current screen plus 1, skipping over any unmanaged
    screens), the word ""bbaacckk"" (indicating the current screen minus 1, skipping
    over any unmanaged screens), or the word ""pprreevv"" (indicating the last
    screen visited.

    ff..wwiinnrreeffrreesshh

    This function is similar to the ff..rreeffrreesshh function except that only the
    selected window is refreshed.

    ff..zzoooomm

    This function is similar to the ff..ffuullllzzoooomm function, except that the only
    the height of the selected window is changed.

  MMEENNUUSS

    Functions may be grouped and interactively selected using pop-up (when
    bound to a pointer button) or pull-down (when associated with a
    titlebutton) menus. Each menu specification contains the name of the menu
    as it will be referred to by ff..mmeennuu, optional default foreground and
    background colors, the list of item names and the functions they should
    invoke, and optional foreground and background colors for individual
    items:

    MMeennuu "menuname" [ ("deffore":"defback") ]
    {
       string1  [ ("fore1":"backn")]function1
       string2  [ ("fore2":"backn")]function2
          .
          .
          .
       stringN  [ ("foreN":"backN")]functionN
    }

    The menuname is case-sensitive. The optional deffore and defback arguments
    specify the foreground and background colors used on a color display to
    highlight menu entries. The string portion of each menu entry will be the
    text which will appear in the menu. The optional fore and back arguments
    specify the foreground and background colors of the menu entry when the
    pointer is not in the entry. These colors will only be used on a color
    display. The default is to use the colors specified by the MMeennuuFFoorreeggrroouunndd
    and MMeennuuBBaacckkggrroouunndd variables. The function portion of the menu entry is
    one of the functions, including any user-defined functions, or additional
    menus.

    There is a special menu named TTwwmmWWiinnddoowwss which contains the names of all
    of the client and twm-supplied windows. Selecting an entry will cause the
    WWiinnddoowwFFuunnccttiioonn to be executed on that window. If WWiinnddoowwFFuunnccttiioonn hasn't
    been set, the window will be deiconified and raised.

  IICCOONNSS

    Twm supports several different ways of manipulating iconified windows. The
    common pixmap-and-text style may be laid out by hand or automatically
    arranged as described by the IIccoonnRReeggiioonn variable. In addition, a terse
    grid of icon names, called an icon manager, provides a more efficient use
    of screen space as well as the ability to navigate among windows from the
    keyboard.

    An icon manager is a window that contains names of selected or all windows
    currently on the display. In addition to the window name, a small button
    using the default iconify symbol will be displayed to the left of the name
    when the window is iconified. By default, clicking on an entry in the icon
    manager performs ff..iiccoonniiffyy. To change the actions taken in the icon
    manager, use the the iiccoonnmmggrr context when specifying button and keyboard
    bindings.

    Moving the pointer into the icon manager also directs keyboard focus to
    the indicated window (setting the focus explicitly or else sending
    synthetic events NNooTTiittlleeFFooccuuss is set). Using the ff..uuppiiccoonnmmggrr,
    ff..ddoowwnniiccoonnmmggrr ff..lleeffttiiccoonnmmggrr, and ff..rriigghhttiiccoonnmmggrr functions, the input focus
    can be changed between windows directly from the keyboard.

  BBUUGGSS

    The resource manager should have been used instead of all of the window
    lists.

    The IIccoonnRReeggiioonn variable should take a list.

    Double clicking very fast to get the constrained move function will
    sometimes cause the window to move, even though the pointer is not moved.

    If IIccoonniiffyyBByyUUnnmmaappppiinngg is on and windows are listed in IIccoonnMMaannaaggeerrDDoonnttSShhooww
    but not in DDoonnttIIccoonniiffyyBByyUUnnmmaappppiinngg, they may be lost if they are iconified
    and no bindings to ff..mmeennuu ""TTwwmmWWiinnddoowwss"" or ff..wwaarrppttoo are setup.

  FFIILLEESS

    $HOME/.twmrc.<screen number>

    $HOME/.twmrc

    <XRoot>/lib/X11/twm/system.twmrc

  EENNVVIIRROONNMMEENNTT VVAARRIIAABBLLEESS

    DISPLAY
        This variable is used to determine which X server to use. It is also
        set during ff..eexxeecc so that programs come up on the proper screen.

    HOME
        This variable is used as the prefix for files that begin with a tilde
        and for locating the twm startup file.

  SSEEEE AALLSSOO

    _X(5X11R5)

    _X_s_e_r_v_e_r(5)

    _x_d_m(1X11R6)

    _x_r_d_b(1X11R6)

  AAUUTTHHOORRSS

    Tom LaStrange, Solbourne Computer; Jim Fulton, MIT X Consortium; Steve
    Pitschke, Stardent Computer; Keith Packard, MIT X Consortium; Dave
    Sternlicht, MIT X Consortium; Dave Payne, Apple Computer.

