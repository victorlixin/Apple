rlogind(1)                                                   rlogind(1)

  rrllooggiinndd

  NNAAMMEE

    rlogind - remote login server

  SSYYNNOOPPSSIISS

    rlogind [[-alnQ]]

  DDEESSCCRRIIPPTTIIOONN

    The rrllooggiinndd(1) utility is the server for the rrllooggiinn(1) program. The server
    provides a remote login facility with authentication based on privileged
    port numbers from trusted hosts.

    The following options are supported by rrllooggiinndd(1):

    --aa
        Ask host name for verification.

    --ll
        Prevent any authentication based on the user's ..rrhhoossttss file.

    --nn
        Disable keep-alive messages.

    --QQ
        Sets really quiet mode. Really quiet mode suppresses the entire login
        banner.

    The rrllooggiinndd(1) utility listens for service requests at the port indicated
    in the "login" service specification. When a service request is received,
    the following protocol is initiated:
   1.     The server checks the client's source port. If the port is not in
          the range 512-1023, the server aborts the connection.
   2.     The server checks the client's source address and requests the
          corresponding host name (see _gg_ee_tt_hh_oo_ss_tt_bb_yy_aa_dd_dd_rr(2)), _hh_oo_ss_tt_ss(5), and
          nnaammeedd(1)). If the host name cannot be determined, the dot-notation
          representation of the host address is used. If the host name is in
          the same domain as the server (according to the last two components
          of the domain name), or if the --aa option is given, the addresses for
          the host name are requested, verifying that the name and address
          correspond. Normal authentication is bypassed if the address
          verification fails.

    After the source port and address have been checked, rrllooggiinndd(1) proceeds
    with the authentication process described in rrsshhdd(1). It then allocates a
    pseudo terminal (see _pp_tt_yy(4)), and manipulates file descriptors so that the
    subordinate (slave) half of the pseudo terminal becomes the stdin, stdout,
    and stderr for a login process. The login process is an instance of the
    llooggiinn(1) program, invoked with the --ff option if authentication has
    succeeded. If automatic authentication fails, the user is prompted to log
    in as if on a standard terminal line.

    The parent of the login process manipulates the master side of the pseudo
    terminal, operating as an intermediary between the login process and the
    client instance of the rrllooggiinn(1) program. In normal operation, the packet
    protocol described in ppttyy(4) is invoked to provide ^S/^Q type facilities
    and propagate interrupt signals to the remote programs. The login process
    propagates the client terminal's baud rate and terminal type, as found in
    the environment variable, TERM. The screen or window size of the terminal
    is requested from the client, and window size changes from the client are
    propagated to the pseudo terminal.

    Transport-level keep-alive messages are enabled unless the --nn option is
    present. The use of keep-alive messages allows sessions to be timed out if
    the client crashes or becomes unreachable.

  IInntteerriixx aauutthheennttiiccaattiioonn

    On traditional systems, a user can rrllooggiinn(1) from a system identified in
    the user's ..rrhhoossttss file without providing a password. This is because on a
    traditional system, the rrllooggiinndd(1) program is run as the superuser, and
    can take any login identity. This works on Interix if rrllooggiinndd(1) runs as
    the SYSTEM user. If the daemon is running as a different user, the user's
    password must have been previously stored using the rreeggppwwdd(1) utility.

    If the _ii_rr_uu_ss_ee_rr_oo_kk(3) function reports that the host name and the host number
    do not match, the user is asked for a password.

    (The test is done by converting the host number to a host name and then
    converting the host name to a host number. If the two host numbers do not
    match, the address might have been spoofed. A user can get similar results
    by using nnssllooookkuupp(1) to check both the host name and the host number.)

  DDIIAAGGNNOOSSTTIICCSS

    All initial diagnostic messages are indicated by a leading byte with a
    value of 1, after which any network connections are closed. If there are
    no errors before llooggiinn(1) is invoked, a null byte is returned as in
    indication of success.

    TTrryy aaggaaiinn..
        A _ff_oo_rr_kk(2) by the server failed.

  FFIILLEESS

    The rrllooggiinn(1) and rrllooggiinndd(1) programs make use of the following files, if
    they exist:

    //eettcc//hhoossttss..eeqquuiivv
        On the target system, this file contains the names of systems and
        users allowed to login. See _h_o_s_t_s_._e_q_u_i_v(5) for more information.

    $$HHOOMMEE//..rrhhoossttss
        On the target system, this file can contain the names of systems (and
        user names) allowed to login. See _._r_h_o_s_t_s(5) for more information.

  BBUUGGSS

    The authentication procedure used here assumes the integrity of each
    client computer and the connecting medium. This is insecure, but is useful
    in an "open" environment.

    A facility to allow all data exchanges to be encrypted should be present.

    A more extensible protocol should be used.

  SSEEEE AALLSSOO

    _l_o_g_i_n(1)

    _r_s_h_d(1)

    _i_r_u_s_e_r_o_k(3)

