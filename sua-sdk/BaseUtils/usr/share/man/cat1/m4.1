m4(1)                                                             m4(1)

  mm44

  NNAAMMEE

    m4 - macro language processor

  SSYYNNOOPPSSIISS

    m4 [[-D name[[=value]]]] [[-U name]]

  DDEESSCCRRIIPPTTIIOONN

    The mm44(1) utility is a macro processor that can be used as a front end to
    any language (such as C, ratfor, fortran, lex, and yacc). The mm44(1)
    utility reads from the standard input and writes the processed text to the
    standard output.

    Macro calls have the form:

    nnaammee(argument1[, argument2, ...,] argumentN)

    There cannot be any space following the macro name and the open
    parentheses '('. If the macro name is not followed by an open parentheses,
    it is processed with no arguments.

    Macro names consist of a leading alphabetic or underscore, possibly
    followed by alphanumeric or underscore characters. Valid macro names match
    this pattern: [a-zA-Z_][a-zA-Z0-9_]*.

    In arguments to macros, leading unquoted space, tab, and newline
    characters are ignored. To quote strings, use left and right single quotes
    (for example:' this is a string with a leading space'). You can change the
    quote characters with the changequote built-in macro.

    The options are as follows:
    --DDname
    --DDname=value
        Define the symbol name to have some value (or NULL).
    --UUname
        Undefine the symbol name.

  SSYYNNTTAAXX

    The mm44(1) utility provides the following built-in macros. They can be
    redefined, losing their original meaning. Return values are NULL unless
    otherwise stated.

    cchhaannggeeccoomm
        Change the start and end comment sequences. The default is the pound
        sign (##) and the newline character. With no arguments, comments are
        turned off. The maximum length for a comment marker is five
        characters.

    cchhaannggeeqquuoottee
        Defines the quote symbols to be the first and second arguments. The
        symbols can be up to five characters long. If no arguments are given,
        it restores the default open and close single quotes.

    ddeeccrr
        Decrements the argument by 1. The argument must be a valid numeric
        string.

    ddeeffiinnee
        Define a new macro named by the first argument to have the value of
        the second argument. Each occurrence of $$n (where n is 0 through 9) is
        replaced by the occurrence of the argument specified by n. The name of
        the calling macro is $0. Undefined arguments are replaced by a NULL
        string. $# is replaced by the number of arguments; $* is replaced by
        all arguments, comma separated; $@ is the same as $*, but all
        arguments are quoted against further expansion.

    ddeeffnn
        Returns the quoted definition for each argument. This can be used to
        rename macro definitions (even for built-in macros).

    ddiivveerrtt
        There are ten output queues (numbered 0-9). At the end of processing,
        mm44(1) concatenates all the queues in numerical order to produce the
        final output. Initially, the output queue is 0. You can use the divert
        macro to select a new output queue (an invalid argument passed to
        divert causes output to be discarded).

    ddiivvnnuumm
        Returns the current output queue number.

    ddnnll
        Discard input characters up to and including the next newline.

    dduummppddeeff
        Prints the names and definitions for the named items, or for
        everything if no arguments are passed.

    eerrrrpprriinntt
        Prints the first argument on the standard-error output stream.

    eevvaall
        Computes the first argument as an arithmetic expression using 32-bit
        arithmetic. Operators are the standard C ternary, arithmetic, logical,
        shift, relational, bitwise, and parentheses operators. You can specify
        octal, decimal, and hexadecimal numbers as in C. The second argument
        (if there is one) specifies the radix for the result, and the third
        argument (if there is one) specifies the minimum number of digits in
        the result.

    eexxpprr
        This is an alias for eevvaall.

    iiffddeeff
        If the macro named by the first argument is defined return the second
        argument; otherwise the third. If there is no third argument, the
        value is NULL. The word 'unix' is predefined.

    iiffeellssee
        If the first argument matches the second argument, iiffeellssee returns the
        third argument. If the match fails, the three arguments are discarded
        and the next three arguments are used until there is zero or one
        argument left; either this last argument or NULL is returned if no
        other matches were found.

    iinncclluuddee
        Returns the contents of the file specified in the first argument.
        Include aborts with an error message if the file cannot be included.

    iinnccrr
        Increments the argument by 1. The argument must be a valid numeric
        string.

    iinnddeexx
        Returns the index of the second argument in the first argument. For
        example, index(the quick brown fox jumped, fox) returns 16. If the
        second argument is not found, index returns -1.

    lleenn
        Returns the number of characters in the first argument. Extra
        arguments are ignored.

    mm44eexxiitt
        Immediately exits with the return value specified by the first
        argument; 0 if none is specified.

    mm44wwrraapp
        Allows you to define what happens at the final EOF, usually for clean-
        up purposes. For example, m4wrap("cleanup(tempfile)") causes the macro
        cleanup to invoked after all other processing is done.

    mmaakkeetteemmpp
        Translates the string XXXXX in the first argument with the current
        process identifier (ID) leaving other characters alone. This can be
        used to create unique temporary file names.

    ppaassttee
        Includes the contents of the file specified by the first argument
        without any macro processing. Aborts with an error message if the file
        cannot be included.

    ppooppddeeff
        Restores the definition of an argument that was pushed onto the stack
        by ppuusshhddeeff.

    ppuusshhddeeff
        Takes the same arguments as ddeeffiinnee, but saves the definition on a
        stack for later retrieval by ppooppddeeff.

    sshhiifftt
        Returns all but the first argument; the remaining arguments are quoted
        and pushed back with commas separating them. The quoting nullifies the
        effect of the extra scan that will subsequently be performed.

    ssiinncclluuddee
        Similar to iinncclluuddee, except it ignores any errors.

    ssppaassttee
        Similar to ppaassttee, except it ignores any errors.

    ssuubbssttrr
        Returns a substring of the first argument, starting at the offset
        specified by the second argument and the length specified by the third
        argument. If no third argument is present, it returns the rest of the
        string.

    ssyyssccmmdd
        Passes the first argument to the shell. Nothing is returned.

    ssyyssvvaall
        Returns the return value from the last ssyyssccmmdd.

    ttrraannsslliitt
        Transliterate the characters in the first argument from the set given
        by the second argument to the set given by the third. You cannot use
        ttrr(1)-style abbreviations.

    uunnddeeffiinnee
        Removes the definition for the macro specified by the first argument.

    uunnddiivveerrtt
        Flushes the named output queues (or all queues if there are no
        arguments).

    uunniixx
        A pre-defined macro for testing the operating system platform.

  AAUUTTHHOORR

    Ozan Yigit <oz@sis.yorku.ca> and Richard A. O'Keefe
    (ok@goanna.cs.rmit.OZ.AU)

