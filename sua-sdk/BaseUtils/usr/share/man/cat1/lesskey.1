lesskey(1)                                                   lesskey(1)

  lleesssskkeeyy

  NNAAMMEE

    lesskey - specify key bindings for less

  SSYYNNOOPPSSIISS

    lesskey [[-o output]] [[input]]

    lesskey -V

  DDEESSCCRRIIPPTTIIOONN

    The lleesssskkeeyy(1) utility is used to specify a set of key bindings to be used
    by lleessss(1). The input file is a text file that describes the key bindings.
    If the input file is "-", standard input is read. If no input file is
    specified, a standard file name is used as the name of the input file,
    which depends on the system being used: On UNIX systems, $$HHOOMMEE//..lleesssskkeeyy is
    used; on MS-DOS systems, $$HHOOMMEE//__lleesssskkeeyy is used; and on OS/2 systems
    $$HHOOMMEE//lleesssskkeeyy..iinnii is used, or $$IINNIITT//lleesssskkeeyy..iinnii if HOME is undefined. The
    output file is a binary file that is used by lleessss(1). If no output file is
    specified, and the environment variable LESSKEY is set, the value of
    LESSKEY is used as the name of the output file. Otherwise, a standard file
    name is used as the name of the output file, which depends on the system
    being used. On UNIX and OS-9 systems, $$HHOOMMEE//..lleessss is used; on MS-DOS
    systems, $$HHOOMMEE//__lleessss is used; and on OS/2 systems, $$HHOOMMEE//lleessss..iinnii is used,
    or $$IINNIITT//lleessss..iinnii if HOME is undefined. If the output file already exists,
    lleesssskkeeyy(1) will overwrite it.

    The --VV option causes lleesssskkeeyy(1) to print its version number and
    immediately exit. If --VV is present, other options and arguments are
    ignored.

    The input file consists of one or more sections. Each section starts with
    a line that identifies the type of section. Possible sections are:

    ##ccoommmmaanndd
        Defines new command keys.

    ##lliinnee--eeddiitt
        Defines new line-editing keys.

    ##eennvv
        Defines environment variables.

    Blank lines and lines that start with a pound sign (##) are ignored, except
    for the special section header lines.

  CCOOMMMMAANNDD SSEECCTTIIOONN

    The command section begins with the line

    #command

    If the command section is the first section in the file, this line can be
    omitted. The command section consists of lines of the form:

    string <whitespace> action [extra-string] <newline>

    White space is any sequence of one or more spaces, tabs, or both. The
    string is the command key(s) that invokes the action. The string can be a
    single command key, or a sequence of up to 15 keys. The action is the name
    of the less action, from the list below. The characters in the string can
    appear literally, or be prefixed by a caret (^) to indicate a control key.
    A backslash (\\) followed by one to three octal digits can be used to
    specify a character by its octal value. A backslash followed by b, e, n,
    r, or t specifies BACKSPACE, ESCAPE, NEWLINE, RETURN or TAB, respectively.
    A backslash followed by any other character indicates that character is to
    be taken literally. Characters that must be preceded by backslash include
    caret, space, tab and the backslash itself.

    An action can be followed by an "extra" string. When such a command is
    entered while running lleessss,,(1), the action is performed, and then the
    extra string is parsed, just as if it were typed in to lleessss(1). This
    feature can be used in certain cases to extend the functionality of a
    command. For example, see the "{" and ":t" commands in the example below.
    The extra string has a special meaning for the "quit" action: when lleessss(1)
    quits, the first character of the extra string is used as its exit status.

  EEXXAAMMPPLLEE

    The following input file describes the set of default command keys used by
    less:

    #command
    \r        forw-line
    \n        forw-line
    e         forw-line
    j         forw-line
    ^E        forw-line
    ^N        forw-line
    k         back-line
    y         back-line
    ^Y        back-line
    ^K        back-line
    ^P        back-line
    J         forw-line-force
    K         back-line-force
    Y         back-line-force
    d         forw-scroll
    ^D        forw-scroll
    u         back-scroll
    ^U        back-scroll
    \40       forw-screen
    f         forw-screen
    ^F        forw-screen
    ^V        forw-screen
    b         back-screen
    ^B        back-screen
    \ev       back-screen
    \e\40          forw-screen-force
    z         forw-window
    w         back-window
    F         forw-forever
    \e[       left-scroll
    \e]       right-scroll
    R         repaint-flush
    r         repaint
    ^R        repaint
    ^L        repaint
    g         goto-line
    <      goto-line
    \e<         goto-line
    p         percent
    %         percent
    {         forw-bracket {}
    }         back-bracket {}
    (         forw-bracket ()
    )         back-bracket ()
    [         forw-bracket []
    ]         back-bracket []
    \e^F      forw-bracket
    \e^B      back-bracket
    G         goto-end
    \e>         goto-end
    >      goto-end
    =         status
    ^G        status
    :f        status
    /         forw-search
    ?         back-search
    \e/       forw-search *
    \e?       back-search *
    n         repeat-search
    \en       repeat-search-all
    N         reverse-search
    \eN       reverse-search-all
    \eu       undo-hilite
    m         set-mark
    ^X^X      goto-mark
    E         examine
    :e        examine
    ^X^V      examine
    :n        next-file
    :p        prev-file
    :x        index-file
    -         toggle-option
    :t        toggle-option t
    s         toggle-option o
    _         display-option
    |         pipe
    v         visual
    !         shell
    +         firstcmd
    H         help
    h         help
    V         version
    q         quit
    :q        quit
    :Q        quit
    ZZ        quit

  PPRREECCEEDDEENNCCEE

    Commands specified by lleesssskkeeyy(1) take precedence over the default
    commands. A default command key can be disabled by including it in the
    input file with the action "invalid". Alternatively, a key can be defined
    to do nothing by using the action "noaction". The action "noaction" is
    similar to "invalid", except that lleessss(1) will give an error beep for an
    "invalid" command, but not for a "noaction" command. In addition, all
    default commands can be disabled by adding this control line to the input
    file:

    #stop

    This will cause all default commands to be ignored. The ##ssttoopp line should
    be the last line in that section of the file.

    Be aware that ##ssttoopp can be dangerous. Since all default commands are
    disabled, you must provide sufficient commands before the ##ssttoopp line to
    enable all necessary actions. For example, failure to provide a "quit"
    command can lead to frustration.

  LLIINNEE EEDDIITTIINNGG SSEECCTTIIOONN

    The line-editing section begins with the line:

    #line-edit

    This section specifies new key bindings for the line-editing commands, in
    a manner similar to the way key bindings for ordinary commands are
    specified in the ##ccoommmmaanndd section. The line-editing section consists of a
    list of keys and actions, one per line, as in the example provided in the
    next section.

  EEXXAAMMPPLLEE

    The following input file describes the set of default line-editing keys
    used by less:

    #line-edit
    \t        forw-complete
    \17       back-complete
    \e\t      back-complete
    \14       expand
    ^V        literal
    ^A        literal
    \el       right
    \eh       left
    \eb       word-left
    \ew       word-right
    \ei       insert
    \ex       delete
    \e\b      word-backspace
    \e0       home
    \e$       end
    \ek       up
    \ej       down

  EENNVVIIRROONNMMEENNTT VVAARRIIAABBLLEESS

    The environment variable section begins with the line

    #env

    Following this line is a list of environment variable assignments. Each
    line consists of an environment variable name, an equals sign (==) and the
    value to be assigned to the environment variable. White space before and
    after the equals sign is ignored. Variables assigned in this way are
    visible only to lleessss(1). If a variable is specified in both the system
    environment and a lleesssskkeeyy file, the value in the lleesssskkeeyy file takes
    precedence. Although the lleesssskkeeyy file can be used to override variables
    set in the environment, the main purpose of assigning variables in the
    lleesssskkeeyy file is simply to have all lleessss(1) configuration information
    stored in one file.

  EEXXAAMMPPLLEE

    The following input file sets the --ii option whenever lleessss(1) is run, and
    specifies the character set to be "latin1":

    #env
    LESS = -i
    LESSCHARSET = latin1

  NNOOTTEESS

    It is not possible to specify special keys, such as uparrow, in a
    keyboard-independent manner. The only way to specify such keys is to
    specify the escape sequence that a particular keyboard sends when such
    keys are pressed.

    On MS-DOS and OS/2 systems, certain keys send a sequence of characters
    which start with a NUL character (0). This NUL character should be
    represented as \340 in a lleesssskkeeyy file.

  CCOOPPYYRRIIGGHHTT

    Copyright © 1984, 1985, 1989, 1994, 1995 Mark Nudelman
    Comments to: markn@fog.net

  SSEEEE AALLSSOO

    _l_e_s_s(1)

