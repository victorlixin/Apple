infocmp(1)                                                   infocmp(1)

  iinnffooccmmpp

  NNAAMMEE

    infocmp - compare or print out tteerrmmiinnffoo descriptions

  SSYYNNOOPPSSIISS

    infocmp [[-cdeFinpILCuV1]] [[-A directory]] [[-B directory]]
            [[-s d||i||l||c]] [[-v n]] [[-w width]]
            [[termname...]]

  DDEESSCCRRIIPPTTIIOONN

    The iinnffooccmmpp(1) utility can be used to compare a binary tteerrmmiinnffoo entry with
    other tteerrmmiinnffoo entries, rewrite a tteerrmmiinnffoo description to take advantage
    of the uussee== tteerrmmiinnffoo field, or print out a tteerrmmiinnffoo description from the
    binary file (tteerrmm) in a variety of formats. In all cases, the boolean
    fields will be printed first, followed by the numeric fields, followed by
    the string fields.

  DDeeffaauulltt OOppttiioonnss

    If no options are specified, and zero or one termnames are specified, the
    ----II option will be assumed. If more than one termname is specified, the --
    dd option will be assumed.

    The options are summarized here and explained in more detail later in this
    topic.

    --11
        Print fields one to a line; the default is to print several to a line
        to a maximum line length of 60 characters.
    --AA directory
        Treats directory as the location of the compiled tteerrmmiinnffoo database for
        the first termname given. By default, the location of the database is
        taken from the environment variable TERMINFO.
    --BB directory
        Treats directory as the location of the compiled tteerrmmiinnffoo database for
        all instances of termname given after the first instance. By default,
        the location of the database is taken from the environment variable
        TERMINFO.

    --CC
        Write a source listing for each terminal named, using the tteerrmmccaapp
        names.

    --cc
        Produce a list of each capability that is common between two entries.
        Capabilities that are not set are ignored. This option can be used as
        a quick check to determine whether it would be effective to use the --
        uu option.

    --dd
        Produce a list of each capability that is different between two
        entries. This option is useful to show the difference between two
        entries, created by different people, for the same or similar
        terminals.

    --ee
        Dump capabilities of the given terminal as a C initializer for a
        TTEERRMMTTYYPPEE structure.
    --FF file1 file2
        Compare the tteerrmmiinnffoo files file1 and file2.

    --II
        Write a source listing for each terminal named, using the tteerrmmiinnffoo
        names.

    --ii
        Analyze the initialization and reset strings in the entry.

    --LL
        Write a source listing for each terminal named, using the long C
        variable names.

    --nn
        List each capability found in neither of the two entries.

    --pp
        Ignore padding specifications when comparing strings.
    --RR subset
        Restrict output to a given subset. Subsets are based on platform;
        available values for subset are BBSSDD, SSVVrr11, UUllttrriixx, HHPP, and ffAAIIXX.

    --rr
        Modifies --CC; writes out all capabilities in the tteerrmmccaapp form.
    --ss type
        Sort fields within each type according to the type argument:

        cc
            Sort by the tteerrmmccaapp name.

        dd
            Do not sort; leave in the order in which they occur in the
            tteerrmmiinnffoo database.

        ii
            Sort by tteerrmmiinnffoo name.

        ll
            Sort by long C variable name.

    --uu
        Produce a source description for the first termname given, which is
        relative to descriptions for all other instances of termname given.
        That is, iinnffooccmmpp(1) writes a source description for the first
        termname, which attempts to uussee== the other instances of termname.

    --VV
        Print version of iinnffooccmmpp(1) to standard error and exit.
    --vv n
        Print out tracing infantine. Higher values of n produce more
        verbosity.
    --ww width
        Change the output to width characters.

  CCoommppaarriissoonn OOppttiioonnss [[--dd]] [[--cc]] [[--nn]]

    The iinnffooccmmpp(1) utility compares the tteerrmmiinnffoo description of the first
    terminal termname with each of the descriptions given by the entries for
    the other terminal's termnames. If a capability is defined for only one of
    the terminals, the value returned will depend on the type of the
    capability:

    FF
        For boolean variables

    --11
        For integer variables

    NNUULLLL
        For string variables

    --cc
        Produce a list of each capability that is common between two entries.
        Capabilities that are not set are ignored. This option can be used as
        a quick check to determine whether the --uu option is worth using.

    --dd
        Produce a list of each capability that is different between two
        entries. This option is useful to show the difference between two
        entries, created by different people, for the same or similar
        terminals.

    --nn
        Produce a list of each capability that is in neither entry. If no
        termnames are given, the environment variable TTEERRMM will be used for
        both of the termnames. This can be used as a quick check to determine
        whether anything was left out of a description.

  SSoouurrccee LLiissttiinngg OOppttiioonnss [[--CC]] [[--II]] [[--LL]] [[--rr]]

    The --CC, --II, and --LL options will produce a source listing for each terminal
    named. The --rr modifies --CC:

    --CC
        Use the tteerrmmccaapp names.

    --II
        Use the tteerrmmiinnffoo names.

    --LL
        Use the long C variable name listed in <<tteerrmm..hh>>.

    --rr
        When using --CC, put out all capabilities in tteerrmmccaapp form.

    If no termname is given, the environment variable TERM will be used for
    the terminal name.

    The source produced by the --CC option can be used directly as a tteerrmmccaapp
    entry, but not all parameterized strings can be changed to the tteerrmmccaapp
    format. The iinnffooccmmpp(1) utility will attempt to convert most of the
    parameterized information. Anything not converted will be plainly marked
    in the output and commented out. These should be edited by hand.

    All padding information for strings will be collected together and placed
    at the beginning of the string where tteerrmmccaapp expects it. Mandatory padding
    (padding information with a trailing forward slash (//) will become
    optional.

    All tteerrmmccaapp variables no longer supported by tteerrmmiinnffoo, but which are
    derivable from other tteerrmmiinnffoo variables, will be output. Not all tteerrmmiinnffoo
    capabilities will be translated; only those variables that were part of
    tteerrmmccaapp will normally be output. Specifying the --rr option will remove this
    restriction, allowing all capabilities to be output in tteerrmmccaapp form.

    Note that because padding is collected to the beginning of the capability,
    not all capabilities are output. Mandatory padding is not supported.
    Because tteerrmmccaapp strings are not as flexible, it is not always possible to
    convert a tteerrmmiinnffoo string capability into an equivalent tteerrmmccaapp format. A
    subsequent conversion of the tteerrmmccaapp file back into tteerrmmiinnffoo format will
    not necessarily reproduce the original tteerrmmiinnffoo source.

    The following table provides lists common tteerrmmiinnffoo parameter sequences,
    their tteerrmmccaapp equivalents, and some terminal types which commonly have
    such sequences.

    tteerrmmiinnffoo                      tteerrmmccaapp     RReepprreesseennttaattiivvee TTeerrmmiinnaallss

    %p1%c                         %.          aaddmm

    %p1%d                         %d          hhpp,, AANNSSII ssttaannddaarrdd,, vvtt110000

    %p1%'x'%+%c                   %+x         ccoonncceepptt

    %i                            %iq         AANNSSII ssttaannddaarrdd,, vvtt110000

    %p1%?%'x'%>%t%p1%'y'%+%;      %>xy        ccoonncceepptt

    %p2 is printed before %p1     %r          hhpp

  UUssee== OOppttiioonn [[--uu]]

    The --uu option produces a tteerrmmiinnffoo source description of the first terminal
    termname that is relative to the sum of the descriptions given by the
    entries for the other terminals termnames. It does this by analyzing the
    differences between the first termname and the other termnames and
    producing a description with uussee== fields for the other terminals. In this
    manner, it is possible to retrofit generic tteerrmmiinnffoo entries into a
    terminal's description. In addition, if two similar terminals exist, but
    were coded at different times or by different people so that each
    description is a full description, using iinnffooccmmpp(1) will show what can be
    done to change one description to be relative to the other.

    A capability will be printed with an at sign (@@) if it no longer exists in
    the first termname, but one of the other termname entries contains a value
    for it. A capability's value gets printed if the value in the first
    termname is not found in any of the other termname entries, or if the
    first of the other termname entries that has this capability gives a
    different value for the capability than that in the first termname.

    The order of the other termname entries is significant. Since the terminfo
    compiler ttiicc(1) does a left-to-right scan of the capabilities, specifying
    two uussee== entries that contain differing entries for the same capabilities
    will produce different results, depending on the order in which the
    entries are given. The iinnffooccmmpp(1) utility will flag any such
    inconsistencies between the other termname entries as they are found.

    Alternatively, specifying a capability after a uussee== entry that contains
    that capability will cause the second specification to be ignored. Using
    iinnffooccmmpp(1) to recreate a description can be a useful way to ensure that
    everything was specified correctly in the original source description.

    Another error that does not cause incorrect compiled files, but will slow
    down the compilation time, is specifying uussee== fields that are superfluous.
    The iinnffooccmmpp(1) utility will flag superfluous termname uussee== fields.

    OOtthheerr OOppttiioonnss [[--11eeVVvv]] [[--FF ffiillee11 ffiillee22]] [[--ss dd||ii||ll||cc]] [[--ww wwiiddtthh]]

    --ss
        Sorts the fields within each type according to the argument below:

        dd
            Leave fields in the order in which they are stored in the tteerrmmiinnffoo
            database.

        ii
            Sort by tteerrmmiinnffoo name.

        ll
            Sort by the long C variable name.

        cc
            Sort by the tteerrmmccaapp name.
            If the --ss option is not given, the fields printed out will be
            sorted alphabetically by the tteerrmmiinnffoo name within each type,
            except in the case of the --CC or the --LL options, which cause the
            sorting to be done by the tteerrmmccaapp name or the long C variable
            name, respectively.

    --FF
        Compares tteerrmmiinnffoo files. This assumes that two following arguments are
        file names. The files are searched for pair-wise matches between
        entries, with two entries considered to match if any of their names
        do. The report printed to standard output lists entries with no
        matches in the other file, and entries with more than one match. For
        entries with exactly one match it includes a difference report.

    --pp
        Ignores padding specifications when comparing strings.
    --vv n
        Prints out tracing information on standard error as the program runs.
        Higher values of n induce greater verbosity.

    --VV
        Prints out the version of the program in use on standard error and
        exits.

    --11
        Causes the fields to be printed out one to a line. Otherwise, the
        fields will be printed several to a line to a maximum width of 60
        characters.

    --ww
        Changes the output to width characters.
    --RRsubset
        Restricts output to a given subset. This option is for use with
        archaic versions of tteerrmmiinnffoo like those on SVr1, Ultrix, or HP/UX that
        do not support the full set of SVR4/XSI Curses tteerrmmiinnffoo; and outright
        broken ports, like AIX, that have their own extensions incompatible
        with SVr4/XSI. Available tteerrmmiinnffoo subsets are SSVVrr11, UUllttrriixx, HHPP, and
        AAIIXX; see _t_e_r_m_i_n_f_o(5) for details. You can also choose the subset
        "BSD", which selects only capabilities with tteerrmmccaapp equivalents
        recognized by 4.4BSD.

    --ee
        Dumps the capabilities of the given terminal as a C initializer for a
        TERMTYPE structure (the terminal capability structure in the
        <<tteerrmm..hh>>). This option is useful for preparing versions of the curses
        library hardwired for a given terminal type.

    CChhaannggiinngg DDaattaabbaasseess [[--ii]] [[--AA ddiirreeccttoorryy]] [[--BB ddiirreeccttoorryy]]

    The location of the compiled tteerrmmiinnffoo database is taken from the
    environment variable TERMINFO. If the variable is not defined, or the
    terminal is not found in that location, the system tteerrmmiinnffoo database,
    usually in //uussrr//sshhaarree//lliibb//tteerrmmiinnffoo, will be used. The options --AA and --
    BB can be used to override this location. The --AA option will set TERMINFO
    for the first termname, and the --BB option will set TERMINFO for the other
    termnames. This makes it possible to compare descriptions for a terminal
    with the same name located in two different databases. This is useful for
    comparing descriptions for the same terminal created by different people.

    --ii
        Analyze the initialization (iiss11, iiss22, iiss33) and reset (rrss11, rrss22, rrss33)
        strings in the entry. For each string, the code tries to analyze it
        into actions in terms of the other capabilities in the entry, certain
        X3.64/ISO 6429/ECMA-48 capabilities, and certain DEC VT-series private
        modes (the set of recognized special sequences has been selected for
        completeness over the existing tteerrmmiinnffoo database). Each report line
        consists of the capability name, followed by a colon (::)and space,
        followed by a printable expansion of the capability string with
        sections matching recognized actions translated into {}-bracketed
        descriptions. Here is a list of the DEC/ANSI special sequences
        recognized:
        AAccttiioonn          MMeeaanniinngg

        RIS             Full reset

        SC              Save cursor

        RC              Restore cursor

        LL              Home-down

        RSR             Reset scroll region

        ISO DEC G0      Enable DEC graphics for G0

        ISO UK G0       Enable UK chars for G0

        ISO US G0       Enable US chars for G0

        ISO DEC G1      Enable DEC graphics for G1

        ISO UK G1       Enable UK chars for G1

        ISO US G1       Enable US chars for G1

        DECPAM          Application keypad mode

        DECPNM          Normal keypad mode

        DECANSI         Enter ANSI mode

        DEC[+-]CKM      Application cursor keys

        DEC[+-]ANM      Set VT52 mode

        DEC[+-]COLM     132-column mode

        DEC[+-]SCLM     Smooth scroll

        DEC[+-]SCNM     Reverse video mode

        DEC[+-]OM       Origin mode

        DEC[+-]AWM      Wraparound mode

        DEC[+-]ARM      Auto-repeat mode
        It also recognizes a SGR action corresponding to ANSI/ISO 6429/ECMA
        Set Graphics Rendition, with the values NORMAL, BOLD, UNDERLINE,
        BLINK, and REVERSE. All but NORMAL may be prefixed with '+' (turn on)
        or '-' (turn off). An SGR0 designates an empty highlight sequence
        (equivalent to {SGR:NORMAL}).

  FFIILLEESS

    tteerrmmiinnffoo
        Compiled terminal description database.

  EEXXTTEENNSSIIOONNSS

    The --FF option is not supported in SVr4 curses.

    The --RR, --pp, --ee and --ii options are not supported in SVr4 curses.

    The --rr option's notion of tteerrmmccaapp capabilities is the same as that in
    System V Release 4. Actual Berkeley Software Distribution (BSD) curses
    versions will have a more restricted set. To see only the 4.4BSD set, use
    --rr --RRBBSSDD.

  BBUUGGSS

    The --FF option of iinnffooccmmpp(1) should be a ttooee(1) mode.

  AAUUTTHHOORR

    Eric S. Raymond <esr@nark.thyrsus.com>

  SSEEEE AALLSSOO

    _c_a_p_t_o_i_n_f_o(1)

    _i_n_f_o_t_o_c_a_p(1)

    _t_i_c(1)

    _t_o_e(1)

    _c_u_r_s_e_s(3)

