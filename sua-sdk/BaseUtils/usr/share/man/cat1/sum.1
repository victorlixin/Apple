sum(1)                                                           sum(1)

  cckkssuumm

  NNAAMMEE

    cksum, sum - display file checksums and sizes

  SSYYNNOOPPSSIISS

   cckkssuumm [--pp | --tt | --xx | --cc [_c_h_e_c_k_l_i_s_t _._._.] | --ss _s_t_r_i_n_g | _f_i_l_e _._._.]
           [--aa _a_l_g_o_r_i_t_h_m_s] [--oo _1 |_2]

    sum [[-r]] [[file ...]]

  DDEESSCCRRIIPPTTIIOONN

    Both the cckkssuumm(1) and ssuumm(1) utilities calculate the checksum and size of
    a file. If cckkssuumm(1) is invoked as ssuumm(1), it behaves as the ssuumm(1)
    utility. The ssuumm(1) command is obsolete and should not be used.

    The cckkssuumm(1) utility writes to the standard output three, white-space
    separated fields for each input file:

    crc  #_octets file_name

    These fields contain a checksum (crc), the total number of octets in the
    file (#_octets) and the file name. If no file name is specified, the
    standard input is used and no file name is written.

    The ssuumm(1) utility writes to the standard output three, white-space
    separated fields for each input file:

    crc #_blocks file_name

    These fields contain a checksum (--ccrrcc), the total number of 512-byte
    blocks in the file (#_blocks), and the file name.

  OOPPTTIIOONNSS

    --aa _a_l_g_o_r_i_t_h_m_s
        Use the specified algorithm(s) instead of the default (cksum).
        Supported algorithms include _c_k_s_u_m, _m_d_4, _m_d_5, _r_m_d_1_6_0, _s_h_a_1,
        _s_h_a_2_5_6, _s_h_a_3_8_4, _s_h_a_5_1_2, _s_u_m, and _s_y_s_v_s_u_m.  Multiple algorithms
        may be specified, separated by a comma or whitespace.  Addition-
        ally, multiple --aa options may be specified on the command line.
        If an algorithm is repeated, only the first instance is used.
        Case is ignored when matching algorithms.

    --cc [_c_h_e_c_k_l_i_s_t _._._.]
        Compares all checksums contained in the file _c_h_e_c_k_l_i_s_t with newly
        computed checksums for the corresponding files.  Output consists
        of the digest used, the file name, and an OK or FAILED for the
        result of the comparison.  This will validate any of the sup-
        ported checksums.  If no file is given, stdin is used.  The --cc
        option may not be used in conjunction with more than a single --aa
        option.

    --oo n
        Use historic algorithms instead of the default one. n can be either 1
        or 2:

        1
            Algorithm 1 is the algorithm used by historic Berkeley Software
            Distribution (BSD) systems as the ssuumm(1) algorithm, and by
            historic AT&T System V systems as the ssuumm(1) algorithm when using
            the --rr option. This is a 16-bit checksum, with a right rotation
            before each addition; overflow is discarded.

        2
            Algorithm 2 is the algorithm used by historic AT&T System V
            systems as the default ssuumm(1) algorithm. This is a 32-bit
            checksum, and is defined as follows:
            s = sum of all bytes;
            r = s % 2^16 + (s % 2^32) / 2^16;
            cksum = (r % 2^16) + r / 2^16;
        Both algorithm 1 and 2 write to the standard output the same fields as
        the default algorithm, except that the size of the file in bytes is
        replaced with the size of the file in blocks. For historic reasons,
        the block size is 1024 for algorithm 1 and 512 for algorithm 2.
        Partial blocks are rounded up.

    --pp
        Echoes stdin to stdout and appends the checksum to stdout.

    --ss _s_t_r_i_n_g
        Prints a checksum of the given _s_t_r_i_n_g.

    --tt
        Runs a built-in time trial.

    --xx
        Runs a built-in test script.

    --rr
        For the ssuumm(1) command, this is equivalent to:
        cksum -o 1
        Without the --rr option, the ssuumm(1) command is equivalent to:
        cksum -o 2

    The default Cyclical Redundancy Checking (CRC) used is based on the
    polynomial used for CRC error checking in the networking standard ISO
    8802-3:1989. The CRC checksum encoding is defined by the generating
    polynomial:

    G(x) = x^32 + x^26 + x^23 + x^22 + x^16 + x^12 +
         x^11 + x^10 + x^8 + x^7 + x^5 + x^4 + x^2 + x + 1

    Mathematically, the CRC value corresponding to a given file is defined by
    the following procedure: The n bits to be evaluated are considered to be
    the coefficients of a mod 2 polynomial M(x) of degree n-1. These n bits
    are the bits from the file. The most significant bit being the most
    significant bit of the first octet of the file, and the last bit being the
    least significant bit of the last octet, padded with zero bits (if
    necessary) to achieve an integral number of octets, followed by one or
    more octets representing the length of the file as a binary value, least
    significant octet first. The smallest number of octets capable of
    representing this integer is used.

    M(x) is multiplied by x^32 (that is, shifted left 32 bits) and divided by
    G(x) using mod 2 division, producing a remainder R(x) of degree <= 31.

    The coefficients of R(x) are considered to be a 32-bit sequence.

    The bit sequence is complemented and the result is the CRC.

  DDIIAAGGNNOOSSTTIICCSS

    The cckkssuumm(1) utility exits 0 on success, and >0 if an error occurs.

