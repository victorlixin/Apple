h2xs(1)                                                         h2xs(1)

  hh22xxss

  NNAAMMEE

    h2xs - convert .h C header files to Perl extensions

  SSYYNNOOPPSSIISS

    h2xs [[-ACOPXcdf]] [[-v version]] [[-n module_name]] [[-p prefix]] [[-s sub]]
    [[headerfile ...... [[extra_libraries]]]]

  DDEESSCCRRIIPPTTIIOONN

    The hh22xxss utility builds a Perl extension from C header files. The
    extension will include functions that can be used to retrieve the value of
    any ##ddeeffiinnee statement that was in the C header files.

    The module_name will be used for the name of the extension. If module_name
    is not supplied, the name of the first header file will be used, with the
    first character capitalized.

    If the extension might need extra libraries, they should be included here.
    The extension MMaakkeeffiillee..PPLL will check to determine whether the libraries
    actually exist and how they should be loaded. The extra libraries should
    be specified in the form --llmm --llppoossiixx, and so on, just as on the _cc_cc(1)
    command line. By default, the MMaakkeeffiillee..PPLL will search through the library
    path determined by CCoonnffiigguurree. That path can be augmented by including
    arguments of the form:
    --LL//dirname//subdirname//subdirname2 in the extra_libraries argument.

  OOPPTTIIOONNSS

    --AA
        Omit all autoload facilities. This is the same as --cc, but also removes
        the "use AutoLoader" statement from the .pm file.

    --CC
        Omits creation of the CChhaannggeess file, and adds a HISTORY section to the
        POD template.

    --FF
        Additional flags to specify to C preprocessor when scanning header for
        function declarations. Should not be used without --xx.
    --MM regular_expression
        Selects functions/macros to process.

    --OO
        Allows a pre-existing extension directory to be overwritten.

    --PP
        Omit the autogenerated stub POD section.

    --XX
        Omit the XS portion. Used to generate templates for a module which is
        not XS-based. The --cc and --ff options are implicitly enabled.

    --aa
        Generate an accessor method for each element of structures and unions.
        The generated methods are named after the element name; will return
        the current value of the element if called without additional
        arguments; and will set the element to the supplied value (and return
        the new value) if called with an additional argument. Embedded
        structures and unions are returned as a pointer rather than the
        complete structure, to facilitate chained calls.
        These methods all apply to the PPttrr type for the structure.
        Additionally, two methods are constructed for the structure type
        itself, __ttoo__ppttrr which returns a PPttrr type pointing to the same
        structure, and a nneeww method to construct and return a new structure,
        initialized to zeroes.

    --cc
        Omit "constant()" from the .xs file and corresponding specialized
        "AUTOLOAD" from the .pm file.

    --dd
        Turn on debugging messages.

    --ff
        Allows an extension to be created for a header even if that header is
        not found in standard include directories.

    --hh
        Print the usage, help and version for this hh22xxss and exit.

    --kk
        For function arguments declared as ccoonnsstt, omit the ccoonnsstt attribute in
        the generated XS code.

    --mm
        Experimental: for each variable declared in a header file, declare a
        Perl variable of the same name tied to the C variable.
    --nn module_name
        Specifies a name to be used for the extension; for example: --nn RRPPCC::::
        DDCCEE
    --oo regular_expression
        Use "opaque" data type for the C types matched by the regular
        expression, even if these types are typedef-equivalent to types from
        typemaps. Should not be used without --xx.
        This can be useful because, for example, types that are typedef-
        equivalent to integers can represent operating system-related handles,
        and you might want to work with these handles in OO-way, as in:
        $$hhaannddllee-->>ddoo__ssoommeetthhiinngg(())
        Use --oo .. if you want to handle all the defined types as opaque types.
        The type-to-match is whitewashed (except for commas, which have no
        white space before them, and multiple asterisks (**) which have no
        white space between them).
    --pp prefix
        Specify a prefix that should be removed from the Perl function names;
        for example: --pp sseecc__rrggyy__. This sets up the XS PPRREEFFIIXX keyword and
        removes the prefix from functions that are autoloaded through the
        ccoonnssttaanntt() mechanism.
    --ss sub1,,sub2
        Create a Perl subroutine for the specified macros rather than autoload
        with the ccoonnssttaanntt() subroutine. These macros are assumed to have a
        return type of cchhaarr **, as in the following example: --
        ss sseecc__rrggyy__wwiillddccaarrdd__nnaammee,,sseecc__rrggyy__wwiillddccaarrdd__ssiidd.
    --vv version
        Specify a version number for this extension. This version number is
        added to the templates. The default is 0.01.

    --xx
        Automatically generate XSUBs basing on function declarations in the
        header file. The package CC::::SSccaann should be installed. If this option
        is specified, the name of the header file might look like NAME1,,NAME2.
        In this case NAME1 is used instead of the specified string, but XSUBs
        are emitted only for the declarations included from file NAME2.
        Some types of arguments and return values for functions can result in
        XSUB declarations and typemap entries must be edited, such as objects
        that cannot be converted from or to a pointer (like lloonngg lloonngg),
        pointers to functions, and arrays. See also the section on the
        LIMITATIONS of --xx entry elsewhere in this document.

