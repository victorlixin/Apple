zip(1)                                                           zip(1)

  zziipp

  NNAAMMEE

    zip - package and compress (archive) files

  SSYYNNOOPPSSIISS

    zip [[-cdDfFghjklLmoqrSTuvVwyz@]] [[-b path]] [[-n suffixes]]
        [[-t mmddyy]] [[zipfile [[file1 file2 ...]]]] [[-xi list]]

  DDEESSCCRRIIPPTTIIOONN

    The zziipp(1) utility is a compression and file packaging utility for many
    different operating systems, including Interix. It is analogous to a
    combination of the Interix utilities ttaarr(1) and ccoommpprreessss(1) and is
    compatible with PKZIP (Phil Katz's ZIP for MS-DOS systems).

    The companion program uunnzziipp(1) unpacks zziipp(1) archives. The zziipp(1) and
    uunnzziipp(1) programs can work with archives produced by PKZIP, and PKZIP and
    PKUNZIP can work with archives produced by zziipp(1). The zziipp(1) utility
    version 2.0.1 is compatible with PKZIP 2.04. Note that PKUNZIP 1.10 cannot
    extract files produced by PKZIP 2.04 or zziipp(1) 2.0.1. You must use PKUNZIP
    2.04g or uunnzziipp(1) 5.0p1 (or later versions) to extract them.

    For a brief help on zziipp(1) and uunnzziipp(1), run each without specifying any
    parameters on the command line.

    The program is useful for packaging a set of files for distribution,
    archiving files, and saving disk space by temporarily compressing unused
    files or directories.

    The zziipp(1) utility accepts the following options:
    --bb path
        Use the specified path for the temporary zziipp(1) archive. For example:
        zip -b /tmp stuff *
        will put the temporary zziipp(1) archive in the directory //ttmmpp, copying
        over ssttuuffff..zziipp to the current directory when done. This option is
        useful only when updating an existing archive and if the file system
        containing this old archive does not have enough space to hold both
        old and new archive at the same time.

    --cc
        Add one-line comments for each file. File operations (adding,
        updating) are done first, and the user is then prompted for a one-line
        comment for each file. Enter the comment followed by return, or just
        return for no comment.

    --dd
        Remove (delete) entries from a zziipp(1) archive. For example:
        zip -d cat cat/tom/junk cat/harry/\* \*.o
        will remove the entry ccaatt//ttoomm//jjuunnkk, all of the files that start with
        ccaatt//hhaarrrryy//, and all of the files that end with ..oo (in any path). Note
        that shell path name expansion has been inhibited with backslashes, so
        that zziipp(1) can see the asterisks, enabling zziipp(1) to match on the
        contents of the zziipp(1) archive instead of the contents of the current
        directory.

    --DD
        Do not create entries in the zziipp(1) archive for directories. Directory
        entries are created by default so that their attributes can be saved
        in the zip archive. The environment variable ZIPOPT can be used to
        change the default options. For example with sh (the Bourne shell):
        ZIPOPT="-D"; export ZIPOPT
        (The variable ZIPOPT can be used for any option except --ii and --xx and
        can include several options.) The option --DD is a shorthand for --xx "*/
        " but the latter cannot be set as default in the ZIPOPT environment
        variable.

    --ff
        Replace (freshen) an existing entry in the zziipp(1) archive only if it
        has been modified more recently than the version already in the zziipp(1)
        archive. Unlike the update option --uu) this will not add files that are
        not already in the zziipp(1) archive. For example:
        zip -f cat
        This command should be run from the same directory from which the
        original zziipp(1) command was run, since paths stored in zziipp(1) archives
        are always relative.

    --FF
        Fix the zziipp(1) archive. This option can be used if some portions of
        the archive are missing. It is not guaranteed to work, so you must
        make a backup of the original archive first.
        When doubled as in --FFFF, the compressed sizes given inside the damaged
        archive are not trusted and zziipp scans for special signatures to
        identify the limits between the archive members. The single --FF is more
        reliable if the archive is not too much damaged; for example if it has
        only been truncated, so try this option first.
        Neither option will recover archives that have been incorrectly
        transferred in ASCII mode instead of binary. After the repair, the --
        tt option of uunnzziipp(1) might show that some files have a bad cyclic
        redundancy check (CRC). Such files cannot be recovered; you can remove
        them from the archive using the --dd option of zziipp(1).

    --gg
        Grow (append to) the specified zziipp(1) archive, instead of creating a
        new one. If this operation fails, zziipp(1) attempts to restore the
        archive to its original state. If the restoration fails, the archive
        might become corrupted.

    --hh
        Display the zziipp(1) help information (this also appears if zziipp(1) is
        run with no arguments).
    --ii files
        Include only the specified files, as in:
        zip -r cat . -i \*.c
        which will include only the files that end in ..cc in the current
        directory and its subdirectories. (Note for PKZIP users: the
        equivalent command is
        pkzip -r cat *.c
        PKZIP does not allow recursion in directories other than the current
        one.) The backslash prevents the shell file-name substitution, so that
        the name matching is performed by zziipp(1) at all directory levels.

    --jj
        Store just the name of a saved file (junk the path), and do not store
        directory names. By default, zziipp(1) will store the full path (relative
        to the current path).

    --kk
        Attempt to convert the names and paths to conform to MS-DOS, store
        only the MS-DOS attribute (just the user write attribute from
        Interix), and mark the entry as made under MS-DOS (even though it was
        not); for compatibility with PKUNZIP under MS-DOS which cannot handle
        certain names, such as those with two dots.

    --ll
        Translate the Interix end-of-line character LF into the MS-DOS
        convention CR-LF. This option should not be used on binary files. This
        option can be used on open and POSIX systems if the zip file is
        intended for PKUNZIP under MS-DOS. If the input files already contain
        CR LF, this option adds an extra CR. This ensures that uunnzziipp --aa on
        open and POSIX systems will get back an exact copy of the original
        file, to undo the effect of zziipp --ll.

    --llll
        Translate the MS-DOS end-of-line CR LF into POSIX (open systems) LF.
        This option should not be used on binary files. This option can be
        used on MS-DOS if the zip file is intended for uunnzziipp(1) under open and
        POSIX systems.

    --LL
        Display the zziipp(1) license.

    --mm
        Move the specified files into the zziipp(1) archive; actually, this
        deletes the target directories/files after making the specified zziipp(1)
        archive. If a directory becomes empty after removal of the files, the
        directory is also removed. No deletions are done until zziipp(1) has
        created the archive without error. This is useful for conserving disk
        space, but is potentially dangerous so it is recommended to use it in
        combination with --TT to test the archive before removing all input
        files.
    --nn suffixes
        Do not attempt to compress files named with the given suffixes. Such
        files are simply stored (0% compression) in the output zip file, so
        that zziipp(1) does not waste time trying to compress them. The suffixes
        are separated by either colons or semicolons. For example:
        zip -rn .Z:.zip:.tiff:.gif:.snd  cat cat
        will copy everything from cat into ccaatt..zziipp, but will store any files
        that end in ..ZZ, ..zziipp, ..ttiiffff, ..ggiiff, or ..ssnndd without trying to compress
        them (image and sound files often have their own specialized
        compression methods). By default, zziipp(1) does not compress files with
        extensions in the list .Z:.zip:.zoo:.arc:.lzh:.arj Such files are
        stored directly in the output archive. The environment variable ZIPOPT
        can be used to change the default options. For example under Interix
        with csh:
        setenv ZIPOPT "-n .gif:.zip"
        To attempt compression on all files, use:
        zip -n : cat
        The maximum compression option --99 also attempts compression on all
        files regardless of extension.

    --oo
        Set the "last modified" time of the zziipp(1) archive to the latest
        (oldest) "last modified" time found among the entries in the zziipp(1)
        archive. This can be used without any other operations, if desired.
        For example:
        zip -o cat
        will change the last modified time of ccaatt..zziipp to the latest time of
        the entries in ccaatt..zziipp.

    --qq
        Quiet mode; eliminate informational messages and comment prompts.
        (Useful, for example, in shell scripts and background tasks).

    --rr
        Travel the directory structure recursively; for example:
        zip -r cat cat
        In this case, all the files and directories in ccaatt are saved in a
        zziipp(1) archive named ccaatt..zziipp, including files with names starting with
        ".", because the recursion does not use the shell's file-name
        substitution mechanism. If you want to include only a specific subset
        of the files in directory ccaatt and its subdirectories, use the --
        ii option to the specify the pattern of files to be included. You
        should not use --rr with the name ".*", because that matches "..", which
        will attempt to zip up the parent directory (probably not what was
        intended).

    --SS
        Include system and hidden files. This option is effective on some
        systems only; it is ignored on Interix.
    --tt mmddyy
        Do not operate on files modified prior to the specified date, where mm
        is the month (0-12), dd is the day of the month (1-31), and yy are the
        last two digits of the year. For example:
        zip -rt 120791 infamy cat
        will add all the files in ccaatt and its subdirectories that were last
        modified on or after 7 December 1991, to the zziipp(1) archive
        infamy.zip.

    --TT
        Test the integrity of the new zip file. If the check fails, the old
        zip file is unchanged and (with the --mm option) not input files are
        removed.

    --uu
        Replace (update) an existing entry in the zziipp(1) archive only if it
        has been modified more recently than the version already in the zziipp(1)
        archive. For example:
        zip -u stuff *
        will add any new files in the current directory, and update any files
        that have been modified since the zziipp(1) archive ssttuuffff..zziipp was last
        created/modified (note that zziipp(1) will not try to pack stuff.zip into
        itself when you do this).
        Note that the --uu option with no arguments acts like the --ff (freshen)
        option.

    --vv
        Verbose mode. Display a progress indicator during compression.

    --VV
        Save Virtual Memory Systen (VMS) file attributes. This option is
        available on VMS only; zziipp(1) archives created with this option will
        generally not be usable on other systems.

    --ww
        Append the version number of the files to the name, including multiple
        versions of files. (VMS only; default: use only the most recent
        version of a specified file).
    --xx files
        Explicitly exclude the specified files, as in:
        zip -r cat cat -x \*.o
        which will include the contents of ccaatt in ccaatt..zziipp while excluding all
        the files that end in ..oo. The backslash avoids the shell file name
        substitution, so that the name matching is performed by zziipp(1) at all
        directory levels.

    --yy
        Store symbolic links as such in the zziipp(1) archive, instead of
        compressing and storing the file referred to by the link.
    --#
        Regulate the speed of compression using the specified digit #, where --
        00 indicates no compression (store all files), --11 indicates the fastest
        compression method (less compression) and --99 indicates the slowest
        compression method (optimal compression, ignores the suffix list). The
        default compression level is --66.

    --@@
        Take the list of input files from standard input.

    The zziipp(1) program puts one or more compressed files into a single zziipp(1)
    archive, along with information about the files (name, path, date, time of
    last modification, and protection, and check information to verify file
    integrity). An entire directory structure can be packed into a zziipp(1)
    archive with a single command. Compression ratios of 2:1 to 3:1 are common
    for text files. The zziipp(1) utility has one compression method (deflation)
    and can also store files without compression. The zziipp(1) utility
    automatically chooses the better of the two for each file to be
    compressed.

    When given the name of an existing zziipp(1) archive, zziipp(1) will replace
    identically named entries in the zziipp(1) archive or add entries for new
    names. For example, if ccaatt..zziipp exists and contains ccaatt//ffiillee11 and ccaatt//
    ffiillee22, and the directory ccaatt contains the files ccaatt//ffiillee11 and ccaatt//ffiillee33,
    then:

    zip -r cat cat

    will replace ccaatt//ffiillee11 in ccaatt..zziipp and add ccaatt//ffiillee33 to ccaatt..zziipp. After
    this, ccaatt..zziipp contains ccaatt//ffiillee11, ccaatt//ffiillee22, and ccaatt//ffiillee33, with ccaatt//ffiillee22
    unchanged from before.

    If the file list is specified as --@@, zziipp(1) takes the list of input files
    from standard input. Under Interix, this option can be used to powerful
    effect in conjunction with the ffiinndd(1) command. For example, to archive
    all the C source files in the current directory and its subdirectories:

    find . -name "*.[ch]" -print | zip source -@

    (note that the pattern must be quoted to keep the shell from expanding
    it). The zziipp(1) utility will also accept a single dash ("-") as the zip
    file name, in which case it will write the zip file to standard output,
    allowing the output to be piped to another program. For example:

    zip -r - . | dd of=/dev/nrst0 obs=16k

    would write the zip output directly to a tape with the specified block
    size for the purpose of backing up the current directory.

    The zziipp(1) utility also accepts a single dash ("-") as the name of a file
    to be compressed, in which case it will read the file from standard input,
    allowing zziipp to take input from another program. For example:

    tar cf - . | zip backup -

    would compress the output of the ttaarr command for the purpose of backing up
    the current directory. This generally produces better compression than the
    previous example using the --rr option, because zziipp(1) can take advantage of
    redundancy between files. The backup can be restored using the command:

    unzip -p backup | tar xf -

    When no zip file name is given and stdout is not a terminal, zziipp(1) acts
    as a filter, compressing standard input to standard output. For example:

    tar cf - . | zip | dd of=/dev/nrst0 obs=16k

    is equivalent to

    tar cf - . | zip - - | dd of=/dev/nrst0 obs=16k

    zziipp(1) archives created in this manner can be extracted with the program
    gguunnzziipp(1), which is provided in the ggzziipp(1) package. For example:

    dd if=/dev/nrst0  ibs=16k | gunzip | tar xvf -

    When changing an existing zziipp(1) archive, zziipp(1) will write a temporary
    file with the new contents, and only replace the old one when the process
    of creating the new version has been completed without error.

    If the name of the zziipp(1) archive does not contain an extension, the
    extension ..zziipp is added. If the name already contains an extension other
    than ..zziipp, the existing extension is kept unchanged.

  EEXXAAMMPPLLEESS

    The simplest example:

    zip stuff *

    creates the archive ssttuuffff..zziipp (assuming it does not exist) and puts all
    the files in the current directory in it, in compressed form (the ..zziipp
    suffix is added automatically, unless that archive name given contains a
    dot already; this allows the explicit specification of other suffixes).

    Because of the way the shell does file name substitution, files starting
    with "." are not included; to include these as well:

    zip stuff .* *

    Even this will not include any subdirectories from the current directory.

    To zip up an entire directory, the command:

    zip -r cat cat

    creates the archive ccaatt..zziipp, containing all the files and directories in
    the directory ccaatt that is contained within the current directory.

    You might want to make a zziipp(1) archive that contains the files in ccaatt,
    without recording the directory name, ccaatt. You can use the --jj option to
    leave off the paths, as in:

    zip -j cat cat/*

    If you are short on disk space, you might not have enough room to hold
    both the original directory and the corresponding compressed zziipp(1)
    archive. In this case, you can create the archive in steps using the --
    mm option. If cat contains the subdirectories tom, dick, and harry, you
    can:

    zip -rm cat cat/tom
    zip -rm cat cat/dick
    zip -rm cat cat/harry

    where the first command creates ccaatt..zziipp, and the next two add to it. At
    the completion of each zziipp(1) command, the last created archive is
    deleted, making room for the next zziipp(1) command to function.

  PPAATTTTEERRNN MMAATTCCHHIINNGG

    This section applies only to open and POSIX systems. Watch this space for
    details on MS-DOS and VMS operation.

    The standard shells (_ss_hh(1) and kksshh(1)) do file-name substitution on
    command arguments. The special characters are:

    ??
        Match any single character

    **
        Match any number of characters (including none)

    [[]]
        Match any character in the range indicated within the brackets
        (example: [a-f], [0-9]).

    When these characters are encountered (without being escaped with a
    backslash or quotes), the shell will look for files relative to the
    current path that match the pattern, and replace the argument with a list
    of the names that matched.

    The zziipp(1) program can do the same matching on names that are in the
    zziipp(1) archive being modified; or, in the case of the --xx (exclude) or --
    ii (include) options, on the list of files to be operated on, by using
    backslashes or quotes to tell the shell not to do the name expansion. In
    general, when zziipp(1) encounters a name in the list of files to do, it
    first looks for the name in the file system. If it finds it, it then adds
    it to the list of files to do. If it does not find it, it looks for the
    name in the zziipp(1) archive being modified (if it exists), using the
    pattern matching characters described above, if present. For each match,
    it will add that name to the list of files to be processed, unless this
    name matches one given with the --xx option, or does not match any name
    given with the --ii option.

    The pattern matching includes the path, and so patterns like \*.o match
    names that end in ".o", no matter what the path prefix is. Note that the
    backslash must precede every special character (that is, ?*[]), or the
    entire argument must be enclosed in double quotes ("").

    In general, use backslash to make zziipp(1) do the pattern matching with the
    --ff (freshen) and --dd (delete) options, and sometimes after the --xx (exclude)
    option when used with an appropriate operation (add, --uu, --ff, or --dd).

  BBUUGGSS

    zziipp(1) 2.0.1 is not compatible with PKUNZIP 1.10. Use zziipp(1) 1.1 to
    produce zziipp(1) files which can be extracted by PKUNZIP 1.10.

    The zziipp(1) files produced by zziipp(1) 2.0.1 must not be updated by zziipp(1)
    1.1 or PKZIP 1.10, if they contain encrypted members or if they have been
    produced in a pipe or on a non-seekable device. The old versions of zziipp(1)
    or PKZIP would create an archive with an incorrect format. The old
    versions can list the contents of the zip file but cannot extract it
    anyway (because of the new compression algorithm). If you do not use
    encryption and use regular disk files, you do not have to care about this
    problem.

    Under VMS, not all of the odd file formats are treated properly. Only
    stream-LF format zziipp(1) files are expected to work with zziipp(1). Others can
    be converted using Rahul Dhesi's BILF program. This version of zziipp(1)
    handles some of the conversion internally. When using Kermit to transfer
    zip files from Vax to MS-DOS, type "set file type block" on the Vax. When
    transferring from MS-DOS to Vax, type "set file type fixed" on the Vax. In
    both cases, type "set file type binary" on MS-DOS.

    Under VMS, zziipp(1) hangs for file specification that uses DECnet syntax
    cat::*.*.

    On OS/2, zip cannot match some names, such as those including an
    exclamation mark or a hash sign. This is a bug in OS/2 itself: the 32-bit
    DosFindFirst/Next do not find such names. Other programs such as GNU tar
    are also affected by this bug.

    Under OS/2, the amount of External Attributes displayed by DIR is (for
    compatibility) the amount returned by the 16-bit version of
    DDoossQQuueerryyPPaatthhIInnffoo(())(). Otherwise, OS/2 1.3 and 2.0 would report different
    EA sizes when DIRing a file. However, the structure layout returned by the
    32-bit DosQueryPathInfo() is a bit different; it uses extra padding bytes
    and link pointers (it is a linked list) to have all fields on four-byte
    boundaries for portability to future RISC OS/2 versions. Therefore the
    value reported by zziipp(1) (which uses this 32-bit-mode size) differs from
    that reported by DIR. The zziipp(1) utility stores the 32-bit format for
    portability, even the 16-bit MS-C-compiled version running on OS/2 1.3, so
    even this one shows the 32-bit-mode size.

  AAUUTTHHOORRSS

    Copyright (C) 1990-1993 Mark Adler, Richard B. Wales, Jean-loup Gailly,
    Kai Uwe Rommel, Igor Mandrichenko and John Bush. Permission is granted to
    any individual or institution to use, copy, or redistribute this software
    so long as all of the original files are included, that it is not sold for
    profit, and that this copyright notice is retained.

    LIKE ANYTHING ELSE THAT'S FREE, ZIP AND ITS ASSOCIATED UTILITIES ARE
    PROVIDED AS IS AND COME WITH NO WARRANTY OF ANY KIND, EITHER EXPRESSED OR
    IMPLIED. IN NO EVENT WILL THE COPYRIGHT HOLDERS BE LIABLE FOR ANY DAMAGES
    RESULTING FROM THE USE OF THIS SOFTWARE.

    Please send bug reports and comments by email to: zip-bugs@wkuvx1.bitnet
    For bug reports, please include the version of zziipp(1), the make options
    used to compile it, the computer and operating system in use, and as much
    additional information as possible.

  AACCKKNNOOWWLLEEDDGGEEMMEENNTTSS

    Thanks to R. P. Byrne for his Shrink.Pas program, which inspired this
    project, and from which the shrink algorithm was stolen; to Phil Katz for
    placing in the public domain the zziipp(1) file format, compression format,
    and .ZIP file name extension, and for accepting minor changes to the file
    format; to Steve Burg for clarifications on the deflate format; to
    Haruhiko Okumura and Leonid Broukhis for providing some useful ideas for
    the compression algorithm; to Keith Petersen, Rich Wales, Hunter Goatley
    and Mark Adler for providing a mailing list and ftp site for the INFO-ZIP
    group to use; and most importantly, to the INFO-ZIP group itself (listed
    in the file iinnffoozziipp..wwhhoo) without whose tireless testing and bug-fixing
    efforts a portable zziipp(1) would not have been possible. Finally, we should
    thank (blame) the first INFO-ZIP moderator, David Kirschbaum, for getting
    us into this mess in the first place. The manual page was rewritten for
    troff macros by R. P. C. Rodgers.

  SSEEEE AALLSSOO

    _g_z_i_p(1)

    _t_a_r(1)

    _u_n_z_i_p(1)

