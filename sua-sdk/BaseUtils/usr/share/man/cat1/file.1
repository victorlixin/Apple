file(1)                                                         file(1)

  ffiillee

  NNAAMMEE

    file - determine file type

  SSYYNNOOPPSSIISS

    file [[-c ]] [[-z ]] [[-f namefile]]
         [-m magicfile]] file ...

  DDEESSCCRRIIPPTTIIOONN

    The ffiillee(1) utility tests each argument in an attempt to classify it.
    There are three sets of tests, performed in this order: file system tests,
    magic number tests, and language tests. The first test that succeeds
    causes the file type to be printed.

    The type printed will usually contain one of the keywords tteexxtt,
    eexxeeccuuttaabbllee, or ddaattaa. TTeexxtt means the file contains only ASCII characters
    and is probably safe to read on an ASCII terminal. EExxeeccuuttaabbllee indicates
    the file contains the result of compiling a program for either a Microsoft
    operating system or for some other vendor's operating system. DDaattaa
    indicates anything else; data is usually 'binary' or nonprintable.
    Exceptions are familiar file formats (core files, tar archives) that are
    known to contain binary data. When modifying the file //uussrr//sshhaarree//mmaaggiicc or
    the program itself, preserve the keywords tteexxtt, eexxeeccuuttaabbllee, and ddaattaa.
    People depend on knowing that all the readable files in a directory have
    the word "text" printed. Do not do as Berkeley did and change "shell
    commands text" to "shell script".

  OOPPTTIIOONNSS

    --cc
        Check the format of the mmaaggiicc file; output displays the parsed form of
        the file. This is usually used in conjunction with --mm to debug a new
        mmaaggiicc file before installing it.
    --ff namefile
        Specifies that the names of the files to be examined are to be read
        (one per line) from namefile before the argument list. Either namefile
        or at least one file-name argument must be present; to test the
        standard input, use "-" as a file-name argument.
    --mm file
        Look in file for magic numbers, instead of //uussrr//sshhaarree//mmaaggiicc.

    --zz
        Try to look inside compressed files.

    The file-system tests are based on examining the return from a _ss_tt_aa_tt(2)
    system call. The program checks to determine whether the file is either
    empty or some sort of special file. Any known file types appropriate to
    the system on which you are running (sockets, symbolic links, or named
    pipes (FIFOs) on those systems that implement them) are intuited if they
    are defined in the system header file <<ssyyss//ssttaatt..hh>>.

    The magic-number tests are used to check for files with data in particular
    fixed formats. The canonical example of this is a binary executable
    (compiled program) aa..oouutt file, whose format is defined in <<aa..oouutt..hh>> and
    possibly <<eexxeecc..hh>> in the standard include directory. These files have a
    'magic number' stored in a particular place near the beginning of the file
    that tells the operating system that the file is a binary executable, and
    which of several types of binary executables it is. The concept of 'magic
    number' has been applied by extension to data files. Any file with some
    invariant identifier at a small fixed offset into the file can usually be
    described in this way. The information in these files is read from the
    magic file mmaaggiicc.

    If an argument appears to be an ASCII file, ffiillee(1) attempts to guess its
    language. The language tests look for particular strings (cf <<nnaammeess..hh>>)
    that can appear anywhere in the first few blocks of a file. For example,
    the keyword ..bbrr indicates that the file is most likely a troff input file,
    just as the keyword ssttrruucctt indicates a C program. These tests are less
    reliable than the previous two groups, so they are performed last. The
    language test routines also test for some miscellany (such as ttaarr(1)
    archives) and determine whether an unknown file should be labeled as
    'ascii text' or 'data'.

  FFIILLEESS

    The ffiillee(1) command uses the following files:

    //uussrr//sshhaarree//mmaaggiicc
        Default list of magic numbers.

  SSTTAANNDDAARRDDSS CCOONNFFOORRMMAANNCCEE

    This program is believed to exceed the System V Interface Definition of
    ffiillee(1), as near as one can determine from the vague language contained
    therein. Its behavior is mostly compatible with the System V program of
    the same name. This version knows more magic, however, so it will produce
    behavior (albeit more accurate) output in many cases.

    The one significant difference between this version and System V is that
    this version treats any white space as a delimiter, so spaces in pattern
    strings must be escaped. or example,

    >10    string    language impress\   (imPRESS data)

    in an existing mmaaggiicc file would have to be changed to

    >10    string    language\ impress   (imPRESS data)

    In addition, in this version, if a pattern string contains a backslash, it
    must be escaped. For example

    0    string         \begindata     Andrew Toolkit document

    in an existing mmaaggiicc file must be changed to

    0    string         \\begindata    Andrew Toolkit document

    SunOS releases 3.2 and later from Sun Microsystems include a _f_i_l_e(1)
    command derived from the System V one, but with some extensions. My
    version differs from Sun's only in minor ways. It includes the extension
    of the '&' operator, used as, for example:

    >16    long&0x7fffffff >0          not stripped

  MMAAGGIICC DDIIRREECCTTOORRYY

    The mmaaggiicc file entries have been collected from various sources, primarily
    USENET, and contributed by various authors. Christos Zoulas (address
    below) will collect additional or corrected magic file entries. A
    consolidation of mmaaggiicc file entries will be distributed periodically.

    The order of entries in the mmaaggiicc file is significant. Depending on which
    system you are using, the order that they are put together may be
    incorrect. If your old _f_i_l_e(1) command uses a mmaaggiicc file, keep the old
    mmaaggiicc file for comparison purposes (rename it to mmaaggiicc..oorriigg).

  HHIISSTTOORRYY

    There has been a _f_i_l_e(1) command since at least Research Version 6 (man
    page dated January, 1975). The System V version introduced one significant
    major change: the external list of magic number types. This slowed the
    program down slightly, but made it much more flexible.

    This program, based on the System V version, was written by Ian Darwin
    without looking at anybody else's source code.

    John Gilmore revised the code extensively, making it better than the first
    version. Geoff Collyer found several inadequacies and provided some mmaaggiicc
    file entries. The program has undergone continued evolution since.

  AAUUTTHHOORR

    Written by Ian F. Darwin, UUCP address {utzoo | ihnp4}!darwin!ian,
    Internet address ian@sq.com, postal address: P.O. Box 603, Station F,
    Toronto, Ontario, CANADA M4Y 2L8.

    Altered by Rob McMahon, cudcv@warwick.ac.uk, 1989, to extend the '&'
    operator from simple 'x&y != 0' to 'x&y op z'.

    Altered by Guy Harris, guy@auspex.com, 1993, to:

    *     put the "old-style" '&' operator back the way it was, because 1) Rob
          McMahon's change broke the previous style of usage, 2) the SunOS
          "new-style" '&' operator, which this version of _f_i_l_e(1) supports,
          also handles 'x&y op z', and 3) Rob's change wasn't documented in
          any case;
    *     put in multiple levels of '>';
    *     put in "beshort", "leshort", and other such keywords to look at
          numbers in the file in a specific byte order, rather than in the
          native byte order of the process running _f_i_l_e(1).

    Changes by Ian Darwin and various authors including Christos Zoulas
    (christos@ee.cornell.edu), 1990-1992.

  LLEEGGAALL NNOOTTIICCEE

    Copyright (c) Ian F. Darwin, Toronto, Canada, 1986, 1987, 1988, 1989,
    1990, 1991, 1992, 1993.

    This software is not subject to and may not be made subject to any license
    of the American Telephone and Telegraph Company, Sun Microsystems Inc.,
    Digital Equipment Inc., Lotus Development Inc., the Regents of the
    University of California, The X Consortium or MIT, or The Free Software
    Foundation.

    This software is not subject to any export provision of the United States
    Department of Commerce, and may be exported to any country/region or
    planet.

    Permission is granted to anyone to use this software for any purpose on
    any computer system, and to alter it and redistribute it freely, subject
    to the following restrictions:

    A few support files (getopt, strtok) distributed with this package are by
    Henry Spencer and are subject to the same terms as above.

    A few simple support files (strtol, strchr) distributed with this package
    are in the public domain; they are so marked.

    The files <<ttaarr..hh>> and iiss__ttaarr..cc were written by John Gilmore from his
    public-domain _t_a_r(1) program, and are not covered by the above
    restrictions.

  BBUUGGSS

    The ffiillee(1) utility uses several algorithms that favor speed over
    accuracy, thus it can be misled about the contents of ASCII files.

    The support for files ASCII (primarily for programming languages) is
    simplistic, inefficient and requires recompilation to update.

    There should be an "else" clause to follow a series of continuation lines.

    The mmaaggiicc file and keywords should have regular expression support. Their
    use of ASCII TAB as a field delimiter is ugly and makes it hard to edit
    the files, but is entrenched.

    The program does not deal with FORTRAN. It should be able to figure
    FORTRAN by seeing some keywords which appear indented at the start of
    line. Regular expression support would make this easy.

    The list of keywords in aassccmmaaggiicc probably belongs in the mmaaggiicc file. This
    could be done by using a keyword like '*' for the offset value.

    Another optimization would be to sort the mmaaggiicc file so that we can just
    run down all the tests for the first byte, first word, first long, etc,
    once we have fetched it. Complain about conflicts in the mmaaggiicc file
    entries. Make a rule that the mmaaggiicc entries sort based on file offset
    rather than position within the mmaaggiicc file?

    The program should provide a way to give an estimate of how good a guess
    is. We end up removing guesses (such as "From " as first 5 chars of file)
    because they are not as good as other guesses (such as "Newsgroups:
    " versus "Return-Path:"). Still, if the others don't pan out, it should be
    possible to use the first guess.

    This program is slower than some vendors' file commands.

    This manual page, and particularly this section, is too long.

  AAVVAAIILLAABBIILLIITTYY

    You can obtain the original author's latest version by anonymous FTP on
    tteessllaa..eeee..ccoorrnneellll..eedduu in the directory //ppuubb//ffiillee--XX..YYYY..ttaarr..ggzz.

  SSEEEE AALLSSOO

    _o_d(1)

    _m_a_g_i_c(5)

