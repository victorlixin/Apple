ctags(1)                                                       ctags(1)

  ccttaaggss

  NNAAMMEE

    ctags - create a tags file

  SSYYNNOOPPSSIISS

    ctags [[-BFadtuwvx]] [[ -f tagsfile]] name ...

  DDEESSCCRRIIPPTTIIOONN

    The ccttaaggss(1) utility makes a tags file for eexx(1) from the specified C,
    Pascal, FORTRAN, yyaacccc(1), lleexx(1), and LISt Processing programming language
    (LISP) sources. A tags file gives the locations of specified objects in a
    group of files. Each line of the tags file contains the object name, the
    file in which it is defined, and a search pattern for the object
    definition, separated by white space. Using the tags file, eexx(1) and vvii(1)
    can quickly locate these object definitions (using the --tt option).
    Depending upon the options provided to ccttaaggss(1), objects will consist of
    subroutines and ttyyppeeddeeff, ddeeffiinnee, ssttrruucctt, eennuumms and uunniioonn statements.

  OOPPTTIIOONNSS

    --aa
        Append to tags file.

    --BB
        Use backward searching patterns (?...?).

    --dd
        Create tags for ##ddeeffiinnee statements that do not take arguments; ##ddeeffiinnee
        statements that take arguments are tagged automatically.

    --FF
        Use forward searching patterns (/.../) (the default).
    --ff tagsfile
        Place the tag descriptions in a file called tagsfile. The default
        behavior is to place them in a file called ttaaggss.

    --tt
        Create tags for ttyyppeeddeeff, ssttrruucctt, uunniioonn, and eennuumm statements.

    --uu
        Update the specified files in the tags file; that is, all references
        to them are deleted, and the new values are appended to the file. (It
        should be noted that this option is implemented in a way that is
        rather slow. It is usually faster to simply rebuild the tags file.)

    --vv
        Produce on the standard output an index of the form expected by
        vvggrriinndd(1) (not supplied with Subsystem for UNIX-based Applications). This listing
        contains the object name, file name, and page number (assuming 64-line
        pages). Since the output will be sorted into lexicographic order, you
        may want to run the output through ssoorrtt(1); for example:
        ctags -v files | sort -f > index
        vgrind -x index

    --ww
        Suppress warning diagnostics.

    --xx
        Produce on the standard output a list of object names, the line number
        and file name on which each is defined, and the text of that line.
        This is a simple index that can be printed out as an off-line readable
        function index.

    Files whose names end in .c or .h are assumed to be C source files and are
    searched for C-style routine and macro definitions. Files whose names end
    in .y are assumed to be yyaacccc(1) source files. Files whose names end in .l
    are assumed to be LISP files if their first non-blank character is a
    semicolon (;;), opening parenthesis (((), or opening bracket ([), otherwise,
    they are treated as lleexx(1) files. Other files are first examined to
    determine whether they contain any Pascal or FORTRAN routine definitions,
    and, if not, are searched for C-style definitions.

    The tag mmaaiinn is treated specially in C programs. The tag formed is created
    by prepending M to the name of the file, with the trailing .c and any
    leading path name components removed. Because of this, it is practical to
    use ccttaaggss(1) in directories with more than one program. This
    implementation of ccttaaggss(1) recognizes both the //** **// style of C comments
    and the C++ //// to-end-of-line comment.

    yyaacccc(1) and lleexx(1) files each have a special tag. The yyyyppaarrssee
	function is the start of the second section of the yyaacccc(1) file, and yyyylleexx
	is the start of the second section of the lleexx(1) file.

  FFIILLEESS

    The ccttaaggss(1) utility uses the following files:

    tags
        Default output tags file

  DDIIAAGGNNOOSSTTIICCSS

    The ccttaaggss(1) utility exits with a value of 1 if an error occurred;
    otherwise it exits with 0. Duplicate objects are not considered errors.

  NNOOTTEESS

    Recognition of functions, subroutines and procedures for FORTRAN and
    Pascal is not very sophisticated. No attempt is made to deal with block
    structure; ccttaaggss(1) cannot handle two Pascal procedures in different
    blocks with the same name. The ccttaaggss(1) utility cannot handle Pascal
    types.

    The ccttaaggss(1) utility relies on the input being well formed, and any
    syntactical errors will cause problems. It also finds some legal syntax
    confusing. For example, since it does not understand ##iiffddeeff statements
    (incidentally, that is a feature, not a bug), any code with unbalanced
    braces inside ##iiffddeeff statements will cause it to become unstable.
    Similarly, multiple line changes within a definition will cause it to
    enter the last line of the object, rather than the first, as the searching
    pattern. The last line of multiple line ttyyppeeddeeffs will similarly be noted.

  SSEEEE AALLSSOO

    _e_x(1)

    _v_i(1)

