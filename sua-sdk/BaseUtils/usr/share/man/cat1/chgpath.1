chgpath(1)                                                   chgpath(1)

  cchhggppaatthh

  NNAAMMEE

    chgpath, ntpath2posix, posixpath2nt - convert path names between Windows
    format and POSIX format

  SSYYNNOOPPSSIISS

    chgpath [[-n||-p]] [[-l||-u||-c||-q]] path

    ntpath2posix [[-l||-u||-c||-q]] path

    posixpath2nt [[-l||-u||-q]] path

  DDEESSCCRRIIPPTTIIOONN

    The cchhggppaatthh(1) utility converts a path name between the Win32 format (for
    example, c:\SUA\usr\share) and the POSIX format (for example, /dev/fs/C/
    SUA/usr/share). The converted path name is written to standard output.

    If called as nnttppaatthh22ppoossiixx(1), it converts from Win32 format to POSIX
    format. If called as ppoossiixxppaatthh22nntt(1), it converts from POSIX format to
    Win32 format.

    By default, the utility maintains the case of the path, although when
    converting to POSIX format, it will always produce an uppercase drive
    letter.

  OOPPTTIIOONNSS

    --cc
        Adjust case to match an existing path name. (This only applies to
        cchhggppaatthh --pp and nnttppaatthh22ppoossiixx(1)) After translating the path name into
        POSIX format, the utility adjusts the case on a component-by-component
        basis. Nonexistent components are not changed. The --cc option takes
        precedence over --ll and --uu.

    --ll
        Produces a file name that is in lowercase. For nnttppaatthh22ppoossiixx(1), the
        drive letter is always an uppercase letter, even if this option is
        given.

    --nn
        When given to cchhggppaatthh(1), converts a POSIX-style path name to a Win32-
        style path name (_pp_oo_ss_ii_xx_pp_aa_tt_hh_22_nn_tt(1)).

    --pp
        When given to cchhggppaatthh(1), converts a Win32-style path name to a POSIX-
        style path name (_nn_tt_pp_aa_tt_hh_22_pp_oo_ss_ii_xx(1)).

    --qq
        Produces quiet operations. Suppresses messages such as warnings. See
        EXAMPLES.

    --uu
        Produces a file name that is in uppercase.

    These commands are normally used in shell scripts that, in turn, invoke
    Win32 commands.

  DDIIAAGGNNOOSSTTIICCSS

    The cchhggppaatthh(1) command returns 0 for success and >0 for failure.

  EEXXAAMMPPLLEESS

    To set the current TMP environment variable in a form that Win32 programs
    can understand:

    export TMP=$(posixpath2nt $TMP)

    To return it to the form expected by the SUA utilities:

    export TMP=$(ntpath2posix $TMP)

    Assuming SUA is installed in /dev/fs/C/SUA:

    $ ntpath2posix -c /dev/fs/C/SUA
    /dev/fs/C/SUA

    The following example displays output that contains a warning:

    $  chgpath -n -c /usr
    chgpath: WARNING: ignoring -c flag. Converting to an NT path.
    C:\SUA\usr

    To suppress the warning, you can use the --qq option:

    $  chgpath -n -c -q /usr
    C:\SUA\usr

  NNOOTTEESS

    The --cc option matches the first path name component returned by
    _rr_ee_aa_dd_dd_ii_rr(3). It is not recursive, so it can be misled by file hierarchies
    that are very complicated. For example, suppose you have the files and
    directories:

    C:\Something
    C:\Something\BIN
    C:\Something\BIN\file
    C:\Something\BIn\file
    C:\Something\Bin
    C:\Something\Bin\MyStuff
    C:\Something\Bin\MyStuff\myProg

    This command will not work:

    $ ntpath2posix -c C:\something\bin\mystuff\myprog
    /dev/fs/C/Something/Bin/myStuff/myProg

    This is still a useful option without providing a general replacement for
    ffiinndd(1).

    The internal buffer is limited to 512 characters, so path names longer
    than this will not be returned correctly.

  SSEEEE AALLSSOO

    _f_i_n_d(1)

