unzip(1)                                                       unzip(1)

  uunnzziipp

  NNAAMMEE

    unzip - list, test, and extract compressed files in a ZIP archive

  SSYYNNOOPPSSIISS

    unzip [[-Z]] [[-cflptuvz[[ajnoqsUV]]]] file[[.zip]]
          [[file ...]] [[-x xfile ...]] [[-d exdir]]

  DDEESSCCRRIIPPTTIIOONN

    The uunnzziipp(1) will list, test, or extract files from a ZIP archive,
    commonly found on MS-DOS systems. The default behavior (with no options)
    is to extract into the current directory (and subdirectories below it) all
    files from the specified ZIP archive. A companion program, zziipp(1), creates
    ZIP archives; both programs are compatible with PKWARE's PKZIP and PKUNZIP
    for MS-DOS.

    The main operands are the archive file, the members, a list of members to
    be excluded from processing, and a directory in which the extraction
    should take place. Only the archive is required.

    file[..zziipp]
        The path of one or more ZIP archives. If the file specification is a
        wildcard, each matching file is processed in an order determined by
        the operating system (or file system). Only the file name can be a
        wildcard; the path itself cannot. Wildcard expressions are similar to
        eeggrreepp(1) (regular) expressions and can contain:

    file
        The file, if specified, is the archive members to be processed. You
        can match multiple members with regular expressions (wildcards) as
        above. Again, be sure to quote expressions that would otherwise be
        expanded
    --dd exdir
        Extract files in the directory exdir. By default, all files and
        subdirectories are recreated in the current directory; the --dd option
        allows extraction in an arbitrary directory (always assuming one has
        permission to write to the directory). This option need not appear at
        the end of the command line; it is also accepted immediately after the
        zipfile specification, or between the file and the --xx option.
    --xx xfile
        Exclude the archive members xfile from processing. Because wildcard
        characters match directory separators ('/'), this option can be used
        to exclude any files that are in subdirectories. For example, "unzip
        cat *.[ch] -x */*" would extract all C source files in the main
        directory, but none in any subdirectories. Without the --xx option, all
        C source files in all directories within the zipfile would be
        extracted.

    Besides those operands, uunnzziipp(1) also accepts the following options, which
    specify actions:

    --cc
        Extract files to stdout/screen ("CRT"). This option is similar to the
        --pp option, except that the name of each file is printed as it is
        extracted, the --aa option is allowed, and ASCII-EBCDIC conversion is
        automatically performed if appropriate.

    --ff
        Freshen existing files; that is, extract only those files that already
        exist on disk and which are newer than the disk copies. By default
        uunnzziipp(1) queries before overwriting, but the --oo option can be used to
        suppress the queries.

    --ll
        List archive files (short format). The name, uncompressed file size,
        and modification date and time of each specified file is printed,
        along with totals for all files specified. If a file was archived from
        a single-case file system and the --UU option was not given, the file
        name is converted to lowercase and is prefixed with a caret (^). In
        addition, the archive comment and individual file comments (if any)
        are displayed.

    --pp
        Extract files to pipe (stdout). Nothing but the file data is sent to
        stdout, and the files are always extracted in binary format, just as
        they are stored (no conversions).

    --tt
        Test archive files. This option extracts each specified file in memory
        and compares the cyclic redundancy check (CRC), an enhanced checksum,
        of the expanded file with the original file's stored CRC value.

    --uu
        Update existing files and create new ones if needed. This option
        performs the same function as the --ff option, extracting (with query)
        files that are newer than those with the same name on disk; in
        addition, it extracts those files that do not already exist on disk.

    --vv
        List archive files (verbose format). In addition to the information
        given by the --ll option, the compression method, compressed size,
        compression ratio and 32-bit CRC is listed.

    --zz
        Display only the archive comment.

    --ZZ
        zziippiinnffoo(1) mode. If the first option on the command line is --ZZ, the
        remaining options are taken to be zziippiinnffoo(1) options. See the
        appropriate manual page for a description of these options.

  MMooddiiffiieerrss

    The following options modify the behavior of one or more actions:

    --aa
        Convert text files. Ordinarily all files are extracted exactly as they
        are stored (as "binary" files). The --aa option causes files identified
        by zziipp(1) as text files (those with the 't' rather than 'b'label in
        zziippiinnffoo(1) listings ) to be automatically extracted as such,
        converting line endings, end-of-file characters, and the character set
        itself as necessary. For example, Interix files use line feeds (LFs)
        for end-of-line (EOL) and have no end-of-file (EOF) marker; Macintosh
        computers use carriage returns (CRs) for EOLs; and most PC-based
        operating systems use CR+LF for EOLs and CTRL+Z for EOF. In addition,
        IBM mainframes and the Michigan Terminal System use EBCDIC rather than
        the more common ASCII character set, and Windows supports Unicode.)
        Note that the zziipp(1) utility's identification of text files is by no
        means perfect; some "text" files can actually be binary and vice
        versa. The uunnzziipp(1) utility therefore prints "[text]" or "[binary]" as
        a visual check for each file it extracts when using the --aa option. The
        --aaaa option forces all files to be extracted as text, regardless of the
        supposed file type.

    --jj
        Junk paths. The archive's directory structure is not recreated; all
        files are deposited in the extraction directory (by default, the
        current one).

    --nn
        Never overwrite existing files. If a file already exists, skip the
        extraction of that file without prompting. By default, uunnzziipp(1)
        queries before extracting any file that already exists; the user can
        choose to overwrite only the current file, overwrite all files, skip
        extraction of the current file, skip extraction of all existing files,
        or rename the current file.

    --oo
        Overwrite existing files without prompting. This is a dangerous
        option, so use it with care. (It is often used with --ff, however.)

    --qq
        Perform operations quietly (--qqqq=even quieter). Ordinarily, uunnzziipp(1)
        prints the names of the files it is extracting or testing, the
        extraction methods, any file or zipfile comments that might be stored
        in the archive, and possibly a summary when finished with each
        archive. The --qq and --qqqq options suppress the printing of some or all
        of these messages.

    --ss
        [OS/2, Windows, MS-DOS] Convert spaces in file names to underscores.
        By default, uunnzziipp(1) extracts file names with spaces intact (for
        example, "EA DATA. SF"). This can be awkward, however, because MS-DOS
        in particular does not gracefully support spaces in file names.
        Conversion of spaces to underscores can eliminate this awkwardness in
        some cases.

    --UU
        Leave file names uppercase if created under MS-DOS, VMS, and so on.
        Depending on the archiver, files archived under single-case file
        systems can be stored as all-uppercase names; this can be awkward when
        extracting to a case-preserving file system such as OS/2 HPFS or a
        case-sensitive one, such as under Interix. By default uunnzziipp(1)
        converts such file names to lowercase; this option causes all file
        names to be extracted exactly as they are stored (except in the cases
        of truncation, conversion of unsupported characters, and the like).

    --VV
        Retain (VMS) file version numbers. VMS files can be stored with a
        version number, in the format file..ext;##. By default the ";##"
        version numbers are stripped, but this option allows them to be
        retained. (On file systems that limit file names to particularly short
        lengths, the version numbers can be truncated or stripped regardless
        of this option.)

    --XX
        [VMS] Restore owner/protection info (might require system privileges).
        Ordinary file attributes are always restored, but this option also
        allows unique identifier codes(UICs) to be restored.

    --$$
        [MS-DOS, OS/2, Windows, Amiga] Restore the volume label if the
        extraction medium is removable (as, for example, in the case of a a
        diskette). Doubling the option (--$$$$) allows fixed media (hard disks)
        to be labelled as well. By default, volume labels are ignored.

  EENNVVIIRROONNMMEENNTT OOPPTTIIOONNSS

    The uunnzziipp(1)utility's default behavior can be modified by using options
    placed in an environment variable. This can be done with any option, but
    it is probably most useful with the --qq, --aa, --oo, or --nn modifiers: make
    uunnzziipp(1) quieter by default, make it auto-convert text files, or make it
    always overwrite or never overwrite files as it extracts them. For
    example, to make uunnzziipp(1) act as quietly as possible, only reporting
    errors, one would use one of the following commands:

    UNZIP=-qq; export UNZIP  Bourne shell
    setenv UNZIP -qq         BSD C shell

    Environment options are considered to be just like any other command-line
    options, except that they are effectively the first options on the command
    line. To override an environment option, use the "minus operator" to
    remove it. For instance, to override one of the quiet flags in the example
    above, use the command

    unzip --q[other options] zipfile

    The first hyphen is the normal switch character, and the second is a minus
    sign, acting on the qq option. Thus the effect here is to cancel one
    quantum of quietness. To cancel both quiet flags, two (or more) minuses
    can be used:

    unzip -t--q zipfile
    unzip ---qt zipfile

    (the two are equivalent). This might seem awkward or confusing, but it is
    reasonably intuitive: just ignore the first hyphen and go from there.

  EEXXAAMMPPLLEESS

    To use uunnzziipp(1) to extract all members of the archive lleetttteerrss..zziipp into the
    current directory and subdirectories below it, creating any subdirectories
    as necessary, use:

    unzip letters"

    To extract all members of lleetttteerrss..zziipp into the current directory only,
    use:

    unzip -j letters

    To test lleetttteerrss..zziipp, printing only a summary message indicating whether
    the archive is OK or not, use:

    unzip -tq letters

    To extract to standard output all members of lleetttteerrss..zziipp whose names end
    in ..tteexx, auto-converting to the local end-of-line convention and piping
    the output into mmoorree(1), use:

    unzip -ca letters \*.tex | more"

    (The backslash before the asterisk is required when the shell expands
    wildcards, as with Interix; double quotes could have been used instead, as
    in the source example provided later in this topic.) To extract the binary
    file ppaappeerr11..ddvvii to standard output and pipe it to a printing program, use:

    unzip -p articles paper1.dvi | dvips

    To extract all FORTRAN and C source files--*.f, *.c, *.h, and Makefile--
    into the /tmp directory,use:

    unzip source.zip "*.[fch]"" Makefile -d /tmp"

    (the double quotes are necessary to have the shell treat the enclosed
    characters as literals). To extract only newer versions of the files
    already in the current directory, without querying, use the following
    (NOTE: Be careful when unzipping in one time zone a zip file created in
    another. ZIP archives to date contain no time-zone information, and a
    "newer" file from an eastern time zone can, in fact, be older):

    unzip -fo sources

    To extract newer versions of the files already in the current directory,
    and to create any files not already there (same caveat as previous
    example), use:

    unzip -uo sources"

    In the last five examples, assume that UNZIP or UNZIP_OPTS is set to --qq.
    To do a singly quiet listing:

    unzip -l file

    To do a doubly quiet listing:

    unzip -ql file

    To do a standard listing, use:

    unzip --ql file

    or

    unzip -l-q file

    or

    unzip -l--q file    (extra minuses don't hurt)

  TTIIPPSS

    The current maintainer, being a lazy sort, finds it very useful to define
    a pair of aliases: tt for "unzip -tq" and ii for "unzip -Z" (or
    "zipinfo"). One can then simply type "tt zipfile" to test an archive
    something that is worth making a habit of doing. With luck uunnzziipp(1) will
    report "No errors detected in zipfile.zip,".

  BBUUGGSS

    Under DEC Ultrix, uunnzziipp(1) will sometimes fail on long zipfiles (bad
    Cyclical Redundancy Checking (CRC), not always reproducible). This is
    apparently due either to a hardware bug (cache memory) or an operating
    system bug (improper handling of page faults?).

    Dates and times of stored directories are not restored.

  VVEERRSSIIOONNSS

    v1.2 15 Mar 89
        Samuel H. Smith

    v2.0 9 Sep 89
        Samuel H. Smith

    v2.x fall 1989
        many Usenet contributors

    v3.0 1 May 90
        Info-ZIP (DPK, consolidator)

    v3.1 15 Aug 90
        Info-ZIP (DPK, consolidator)

    v4.0 1 Dec 90
        Info-ZIP (GRR, maintainer)

    v4.1 12 May 91
        Info-ZIP

    v4.2 20 Mar 92
        Info-ZIP (zip-bugs subgroup; GRR, maint.)

    v5.0 21 Aug 92
        Info-ZIP (zip-bugs subgroup; GRR, maint.)

    v5.1 7 Feb 94
        Info-ZIP (zip-bugs subgroup; GRR, maint.)

  SSEEEE AALLSSOO

    _z_i_p(1)

