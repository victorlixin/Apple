nsupdate(8)                                                 nsupdate(8)

NNAAMMEE
       nsupdate - Dynamic DNS update utility

SSYYNNOOPPSSIISS
       nnssuuppddaattee [--dd] [[--yy _k_e_y_n_a_m_e_:_s_e_c_r_e_t] [--kk _k_e_y_f_i_l_e]]
                [--tt _t_i_m_e_o_u_t] [--uu _u_d_p_t_i_m_e_o_u_t] [--rr _u_d_p_r_e_t_r_i_e_s] [--vv]
                [filename]

DDEESSCCRRIIPPTTIIOONN
       nnssuuppddaattee is used to submit Dynamic DNS Update requests as
       defined in RFC2136 to a name server. This allows resource
       records to be added or removed from a zone without
       manually editing the zone file. A single update request
       can contain requests to add or remove more than one
       resource record.

       Zones that are under dynamic control via nnssuuppddaattee or a
       DHCP server should not be edited by hand. Manual edits
       could conflict with dynamic updates and cause data to be
       lost.

       The resource records that are dynamically added or removed
       with nnssuuppddaattee have to be in the same zone. Requests are
       sent to the zone's master server. This is identified by
       the MNAME field of the zone's SOA record.

       The --dd option makes nnssuuppddaattee operate in debug mode. This
       provides tracing information about the update requests
       that are made and the replies received from the name
       server.

       Transaction signatures can be used to authenticate the
       Dynamic DNS updates. These use the TSIG resource record
       type described in RFC2845 or the SIG(0) record described
       in RFC3535 and RFC2931. TSIG relies on a shared secret
       that should only be known to nnssuuppddaattee and the name server.
       Currently, the only supported encryption algorithm for
       TSIG is HMAC-MD5, which is defined in RFC 2104. Once other
       algorithms are defined for TSIG, applications will need to
       ensure they select the appropriate algorithm as well as
       the key when authenticating each other. For instance
       suitable kkeeyy and sseerrvveerr statements would be added to
       _/_e_t_c_/_n_a_m_e_d_._c_o_n_f so that the name server can associate the
       appropriate secret key and algorithm with the IP address
       of the client application that will be using TSIG
       authentication. SIG(0) uses public key cryptography. To
       use a SIG(0) key, the public key must be stored in a KEY
       record in a zone served by the name server.  nnssuuppddaattee does
       not read _/_e_t_c_/_n_a_m_e_d_._c_o_n_f.

       nnssuuppddaattee uses the --yy or --kk option (with an HMAC-MD5 key)
       to provide the shared secret needed to generate a TSIG
       record for authenticating Dynamic DNS update requests.
       These options are mutually exclusive. With the --kk option,
       nnssuuppddaattee reads the shared secret from the file _k_e_y_f_i_l_e,
       whose name is of the form _K_{_n_a_m_e_}_._+_1_5_7_._+_{_r_a_n_d_o_m_}_._p_r_i_v_a_t_e.
       For historical reasons, the file
       _K_{_n_a_m_e_}_._+_1_5_7_._+_{_r_a_n_d_o_m_}_._k_e_y must also be present. When the
       --yy option is used, a signature is generated from
       _k_e_y_n_a_m_e_:_s_e_c_r_e_t_._k_e_y_n_a_m_e is the name of the key, and _s_e_c_r_e_t
       is the base64 encoded shared secret. Use of the --yy option
       is discouraged because the shared secret is supplied as a
       command line argument in clear text. This may be visible
       in the output from ppss(1 ) or in a history file maintained
       by the user's shell.

       The --kk may also be used to specify a SIG(0) key used to
       authenticate Dynamic DNS update requests. In this case,
       the key specified is not an HMAC-MD5 key.

       By default nnssuuppddaattee uses UDP to send update requests to
       the name server unless they are too large to fit in a UDP
       request in which case TCP will be used. The --vv option
       makes nnssuuppddaattee use a TCP connection. This may be
       preferable when a batch of update requests is made.

       The --tt option sets the maximum time a update request can
       take before it is aborted. The default is 300 seconds.
       Zero can be used to disable the timeout.

       The --uu option sets the UDP retry interval. The default is
       3 seconds. If zero the interval will be computed from the
       timeout interval and number of UDP retries.

       The --rr option sets the number of UDP retries. The default
       is 3. If zero only one update request will be made.

IINNPPUUTT FFOORRMMAATT
       nnssuuppddaattee reads input from _f_i_l_e_n_a_m_e or standard input. Each
       command is supplied on exactly one line of input. Some
       commands are for administrative purposes. The others are
       either update instructions or prerequisite checks on the
       contents of the zone. These checks set conditions that
       some name or set of resource records (RRset) either exists
       or is absent from the zone. These conditions must be met
       if the entire update request is to succeed. Updates will
       be rejected if the tests for the prerequisite conditions
       fail.

       Every update request consists of zero or more
       prerequisites and zero or more updates. This allows a
       suitably authenticated update request to proceed if some
       specified resource records are present or missing from the
       zone. A blank input line (or the sseenndd command) causes the
       accumulated commands to be sent as one Dynamic DNS update
       request to the name server.

       The command formats and their meaning are as follows:


              Sends all dynamic update requests to the name
                     server
              _s_e_r_v_e_r_n_a_m_e. When no server statement is provided,
              nnssuuppddaattee will send updates to the master server of
              the correct zone. The MNAME field of that zone's
              SOA record will identify the master server for that
              zone.  _p_o_r_t is the port number on _s_e_r_v_e_r_n_a_m_e where
              the dynamic update requests get sent. If no port
              number is specified, the default DNS port number of
              53 is used.


              Sends all dynamic update requests using the local
             _a_d_d_r_e_s_s. When no local statement is provided,
             nnssuuppddaattee will send updates using an address and port
             chosen by the system.  _p_o_r_t can additionally be used
             to make requests come from a specific port. If no
             port number is specified, the system will assign
             one.


              Specifies that all updates are to be made to the
                   zone
            _z_o_n_e_n_a_m_e. If no _z_o_n_e statement is provided, nnssuuppddaattee
            will attempt determine the correct zone to update
            based on the rest of the input.


              Specify the default class. If no
             _c_l_a_s_s is specified the default class is _I_N.


              Specifies that all updates are to be TSIG signed
                  using the
           _k_e_y_n_a_m_e_k_e_y_s_e_c_r_e_t pair. The kkeeyy command overrides any
           key specified on the command line via --yy or --kk.


              Requires that no resource record of any type exists
                              with name
                       _d_o_m_a_i_n_-_n_a_m_e.


              Requires that
                       _d_o_m_a_i_n_-_n_a_m_e exists (has as at least one
                       resource record, of any type).


              Requires that no resource record exists of the
                             specified
                      _t_y_p_e, _c_l_a_s_s and _d_o_m_a_i_n_-_n_a_m_e. If _c_l_a_s_s is
                      omitted, IN (internet) is assumed.


              This requires that a resource record of the
                             specified
                      _t_y_p_e, _c_l_a_s_s and _d_o_m_a_i_n_-_n_a_m_e must exist. If
                      _c_l_a_s_s is omitted, IN (internet) is assumed.


              The     _d_a_t_a from each set of prerequisites of this
                      form sharing a common _t_y_p_e, _c_l_a_s_s, and
                      _d_o_m_a_i_n_-_n_a_m_e are combined to form a set of
                      RRs. This set of RRs must exactly match the
                      set of RRs existing in the zone at the
                      given _t_y_p_e, _c_l_a_s_s, and _d_o_m_a_i_n_-_n_a_m_e. The
                      _d_a_t_a are written in the standard text
                      representation of the resource record's
                      RDATA.


              Deletes any resource records named
                     _d_o_m_a_i_n_-_n_a_m_e. If _t_y_p_e and _d_a_t_a is provided,
                     only matching resource records will be
                     removed. The internet class is assumed if
                     _c_l_a_s_s is not supplied. The _t_t_l is ignored,
                     and is only allowed for compatibility.


              Adds a new resource record with the specified
                  _t_t_l, _c_l_a_s_s and _d_a_t_a.


              Displays the current message, containing all of the
                   prerequisites and updates specified since the
                   last send.


              Sends the current message. This is equivalent to
                   entering a blank line.


              Displays the answer.

       Lines beginning with a semicolon are comments and are
       ignored.

EEXXAAMMPPLLEESS
       The examples below show how nnssuuppddaattee could be used to
       insert and delete resource records from the eexxaammppllee..ccoomm
       zone. Notice that the input in each example contains a
       trailing blank line so that a group of commands are sent
       as one dynamic update request to the master name server
       for eexxaammppllee..ccoomm.

       # nsupdate
       > update delete oldhost.example.com A
       > update add newhost.example.com 86400 A 172.16.1.1
       > send


       Any A records for oollddhhoosstt..eexxaammppllee..ccoomm are deleted. and an
       A record for nneewwhhoosstt..eexxaammppllee..ccoomm it IP address 172.16.1.1
       is added. The newly-added record has a 1 day TTL (86400
       seconds)

       # nsupdate
       > prereq nxdomain nickname.example.com
       > update add nickname.example.com 86400 CNAME somehost.example.com
       > send


       The prerequisite condition gets the name server to check
       that there are no resource records of any type for
       nniicckknnaammee..eexxaammppllee..ccoomm. If there are, the update request
       fails. If this name does not exist, a CNAME for it is
       added. This ensures that when the CNAME is added, it
       cannot conflict with the long-standing rule in RFC1034
       that a name must not exist as any other record type if it
       exists as a CNAME. (The rule has been updated for DNSSEC
       in RFC2535 to allow CNAMEs to have RRSIG, DNSKEY and NSEC
       records.)

FFIILLEESS
       //eettcc//rreessoollvv..ccoonnff
              used to identify default name server

SSEEEE AALLSSOO
       RRFFCC22113366(), RRFFCC33000077(), RRFFCC22110044(), RRFFCC22884455(), RRFFCC11003344(),
       RRFFCC22553355(), RRFFCC22993311().

BBUUGGSS
       The TSIG key is redundantly stored in two separate files.
       This is a consequence of nsupdate using the DST library
       for its cryptographic operations, and may change in future
       releases.

