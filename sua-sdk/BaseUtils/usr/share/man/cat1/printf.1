printf(1)                                                     printf(1)

  pprriinnttff

  NNAAMMEE

    printf - formatted output

  SSYYNNOOPPSSIISS

    printf format [[arguments  ...]]

  DDEESSCCRRIIPPTTIIOONN

    The pprriinnttff(1) utility takes its first argument as a format, and uses that
    format for printing all remaining arguments. The format is a character
    string that contains three types of objects: plain characters, which are
    simply copied to standard output; character escape sequences, which are
    converted and copied to the standard output; and format specifications,
    each of which causes printing of the next successive argument.

    The arguments after the first are treated as strings if the corresponding
    format is either cc or ss; otherwise it is evaluated as a C constant, with
    the following extensions:

    *     A leading plus or minus sign is allowed.
    *     If the leading character is a single or double quote, or not a
          digit, plus, or minus sign, the value is the ASCII code of the next
          character.

    The format string is reused as often as necessary to satisfy the
    arguments. Any extra format specifications are evaluated with zero or the
    null string.

    Character escape sequences are in backslash (\\) notation as defined in the
    ISO or ANSI C Standard. The characters and their meanings are as follows:
    \\aa       Write a <bell> character.

    \\bb       Write a <back-space> character.

    \\ff       Write a <form-feed> character.

    \\nn       Write a <newline> character.

    \\rr       Write a <carriage-return> character.

    \\tt       Write a <tab> character.

    \\vv       Write a <vertical-tab> character.

    \\''       Write a <single-quote> character.

    \\\\       Write a backslash character.

    \\ddd     Write an eight-bit character whose ASCII value is the one-
             , two-, or three-digit octal number ddd.

    Each format specification is introduced by the percent character (%%).

    The remainder of the format specification includes, in the following
    order, zero or more of the following flags:

    ##
        Specifies that the value should be printed in an "alternate form." For
        cc, dd, and ss, formats, this option has no effect. For the oo formats the
        precision of the number is increased to force the first character of
        the output string to a zero. For the xx (X) format, a non-zero result
        has the string 0x (0X) prepended to it. For ee, EE, ff, gg, and GG,
        formats, the result will always contain a decimal point, even if no
        digits follow the point (normally, a decimal point only appears in the
        results of those formats if a digit follows the decimal point). For gg
        and GG formats, trailing zeros are not removed from the result as they
        would otherwise be.

    --
        Specifies left adjustment of the output in the indicated field.

    ++
        Specifies that there should always be a sign placed before the number
        when using signed formats.

    ' '
        A space; specifies that a blank should be left before a positive
        number for a signed format. A '+' overrides a space if both are used.

    00
        A zero; indicates that zero-padding should be used rather than blank-
        padding. A '-' overrides a '0' if both are used.

    Field width
        An optional digit string specifying a field width. If the output
        string has fewer characters than the field width, it will be blank-
        padded on the left (or right, if the left-adjustment indicator has
        been given) to make up the field width (note that a leading zero is a
        flag, but an embedded zero is part of a field width).

    Precision
        An optional period, '.', followed by an optional digit string giving a
        precision that specifies the number of digits to appear after the
        decimal point, for ee and ff formats, or the maximum number of
        characters to be printed from a string. If the digit string is
        missing, the precision is treated as zero.

    Format
        A character that indicates the type of format to use (one of
        ddiioouuxxXXffwwEEggGGccss).

    A field width or precision can be '*' instead of a digit string. In this
    case, an argument supplies the field width or precision.

    The format characters and their meanings are:

    ddiioouuXXxx
        The argument is printed as a signed decimal (dd or ii), unsigned
        decimal, unsigned octal, or unsigned hexadecimal (XX or xx),
        respectively. The argument is printed in the style '[-]ddd.ddd' where
        the number of occurrences of dd after the decimal point is equal to the
        precision specification for the argument. If the precision is missing,
        six digits are given; if the precision is explicitly 0, no digits and
        no decimal point are printed.

    eeEE
        The argument is printed in the style ee where there is one digit before
        the decimal point, and the number after is equal to the precision
        specification for the argument; when the precision is missing, six
        digits are produced. An uppercase E is used for an EE format.

    ggGG
        The argument is printed in style ff or in style ee (EE), whichever gives
        full precision in minimum space.

    cc
        The first character of argument is printed. If an ll (ell) qualifier is
        present, the character is assumed to be a wide-character code and is
        printed as if the CC format character were used.

    ss
        Characters from the string argument are printed until the end is
        reached, or until the number of characters indicated by the precision
        specification is reached. If the precision is 0 or missing, however,
        all characters in the string are printed. If an ll (ell) qualifier is
        present, the string is assumed to be a wide-character string and is
        printed as if the SS format character were used.

    CC
        The first wide-character code of argument is printed. This is the same
        as the llcc format specification.

    SS
        The wide-character string of argument is printed. This is the same as
        the llss format specification.

    %%
        Print a '%'; no argument is used.

    In no case does a nonexistent or small field width cause truncation of a
    field. Padding takes place only if the specified field width exceeds the
    actual width.

  DDIIAAGGNNOOSSTTIICCSS

    The pprriinnttff(1) utility exits 0 on success, 1 on failure.

  NNOOTTEESS

    Because the floating-point numbers are translated from ASCII to floating-
    point and then back again, floating-point precision might be lost.

    ANSI hexadecimal character constants were deliberately not provided.

  SSEEEE AALLSSOO

    _e_c_h_o(1)

