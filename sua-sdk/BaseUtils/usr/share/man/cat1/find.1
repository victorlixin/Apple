find(1)                                                         find(1)

  ffiinndd

  NNAAMMEE

    find - walk a file hierarchy

  SSYYNNOOPPSSIISS

    find [[-L|-P]] [[-DdHhiXx]] [[-level num]] [[-f file]] file  [[file ...]]
    [[expression]]

  DDEESSCCRRIIPPTTIIOONN

    The ffiinndd(1) utility recursively descends the directory tree for each file
    listed, evaluating an expression (composed of the primaries and operands
    listed below) in terms of each file in the tree.

  OOPPTTIIOONNSS

    --dd
        Performs a depth-first traversal; that is, directories are visited in
        post-order, and all entries in a directory are acted upon before the
        directory itself. By default, ffiinndd(1) visits directories in pre-order;
        that is, before their contents. Note: the default is not a breadth-
        first traversal.

    --DD
        Always display domain name in long formats. The default is to display
        the domain name only if it is different from the value of the
        environment variable USERDOMAIN, normally the current domain.
	See pdomain(1) for more information.

    --ff
        Specifies the file hierarchy for ffiinndd(1) to traverse. File hierarchies
        can also be specified as the operands immediately following the
        options.

    --hh
        Causes ffiinndd(1) to return information about files referenced by
        symbolic links rather than about the links themselves. If the
        referenced file does not exist, the information is for the link, not
        the file.

    --HH
        Follows symbolic links in tree traversal.

    --ii
        Forces the primaries --nnaammee and --ppaatthh to act as the primaries
        --iinnaammee and --iippaatthh instead. Useful when walking a file system that
        is case insensitive (as many Windows file systems are) or the
        case is unknown.

    --LL
        Same as --hh.

    --PP
        Causes ffiinndd(1) to return information about files referenced by
        symbolic links rather than about the links themselves. If the
        referenced file does not exist, the information is for the link, not
        the file. File information of all symbolic links not on the command
        line pertains to the link itself.

    --xx
        Prevents ffiinndd(1) from descending into directories that have a device
        number that differs from that of the file from which the descent
        began.

    --XX
        Warns of file names containing delimiting characters used by xxaarrggss(1).
        If a file name contains any of the delimiting characters used by
        xxaarrggss(1), ffiinndd(1) displays a diagnostic message on standard error and
        skips the file. Delimiting characters include single quotes ('' ),
        double quotes ( "" ), backslash (\\), space, tab and newline characters.
        Alternatively, the -print0 primary may be used in conjunction with the
        --00 option to xargs(1), allowing all file names to be processed
        safely.

  PPRRIIMMAARRIIEESS

    --aammiinn _n
        True if the difference between the file last access time and the
        time ffiinndd was started, rounded up to the next full minute, is _n
        minutes.

    --aanneewweerr _f_i_l_e
        True if the current file has a more recent last access time than
        _f_i_l_e.

    --aattiimmee n
        True if the difference between the file last access time and the time
        ffiinndd(1) was started, rounded up to the next full 24-hour period, is n
        24-hour periods.

    --ccmmiinn _n
        True if the difference between the time of last change of file
        status information and the time ffiinndd was started, rounded up to
        the next full minute, is _n minutes.

    --ccnneewweerr _f_i_l_e
        True if the current file has a more recent last change time than
        _f_i_l_e.

    --ccttiimmee n
        True if the difference between the time of last change of file status
        information and the time ffiinndd(1) was started, rounded up to the next
        full 24-hour period, is n 24-hour periods.

    --ddeepptthh
        Same as the --dd option.

    --eemmppttyy
        True if the current file or directory is empty.

    --eexxeecc utility argument ... ;;
        True if the program named utility returns a zero value as its exit
        status. Optional arguments can be passed to the utility. The
        expression must be terminated by a semicolon (;). If the string {{}}
        appears anywhere in the utility name or the arguments, it is replaced
        by the path name of the current file. Because the semicolon (;;) has
        special meaning to the shell, it must be escaped or quoted. Utility
        will be executed from the directory from which ffiinndd(1) was executed.
    --eexxeeccddiirr utility argument ... ;;
        Identical to --eexxeecc, except that the utility is executed from the
        directory that holds the current file. The file name substituted for
        "{}" is not qualified.

    --ffoollllooww
        Same as the --HH option.
    --ffssttyyppee type
        True if the file is contained in a file system of type type. Currently
        supported types are llooccaall, mmffss, nnffss, mmssddooss, rrddoonnllyy, and uuffss. The types
        llooccaall and rrddoonnllyy are not specific file-system types. The former
        matches any file system physically mounted on the system where the
        ffiinndd(1) is being executed, and the latter matches any file system that
        is mounted read-only.
    --ggrroouupp gname
        True if the file belongs to the group gname. If gname is numeric and
        there is no such group name, gname is treated as a group id.

    --iiccaassee
        Always true; causes case-insensitive matching for --nnaammee and --ppaatthh,
        similar to the --ii option.
    --iinnaammee _p_a_t_t_e_r_n
         True if the last component of the pathname being examined matches
         _p_a_t_t_e_r_n.  Case insensitive.

    --iinnuumm n
        True if the file has file serial number n.
    --iippaatthh _p_a_t_t_e_r_n
        True if the pathname being examined matches _p_a_t_t_e_r_n.  Case insensitive.

    --lliinnkkss n
        True if the file has n links.

    --llss
        This primary always evaluates to true. The following information for
        the current file is written to standard output: its file serial
        number, size in 512-byte blocks, file permissions, number of hard
        links, owner, group, size in bytes, last modification time, and path
        name. If the file is a block or character special file, the major and
        minor numbers will be displayed instead of the size in bytes. If the
        file is a symbolic link, the path name of the linked-to file will be
        displayed preceded by -->>. The format is identical to that produced by
        llss --ddggiillss.
    --mmaaxxddeepptthh n
        True if the search depth is at least the value specified in n. The
        search will go only that deep, relative to the starting directory.
    --mmiinnddeepptthh _n
        True if the current search depth is at least what is specified in _n.

    --mmmmiinn _n
        True if the difference between the file last modification time
        and the time ffiinndd was started, rounded up to the next full
        minute, is _n minutes.

    --mmoouunntt
        Prevents ffiinndd(1) from descending into directories whose device number
        differs from that of the file from which the descent began. See the --
        xx option.
    --mmttiimmee n
        True if the difference between the file last modification time and the
        time ffiinndd(1) was started, rounded up to the next full 24-hour period,
        is n 24-hour periods.
    --nnaammee pattern
        True if the last component of the path name being examined matches
        pattern. Special shell-pattern matching characters ([[,, ]],, **,, and ??)
        can be used as part of pattern. These characters can be matched
        explicitly by escaping them with a backslash (\\). The pattern should
        be quoted or escaped to prevent the shell from evaluating it; see the
        section entitled Examples.
    --nneewweerr file
        True if the current file has a more recent last modification time than
        file.

    --nnoouusseerr
        True if the file belongs to an unknown user.

    --nnooggrroouupp
        True if the file belongs to an unknown group.
    --ookk utility argument ... ;;
        The --ookk primary is identical to the --eexxeecc primary with the exception
        that ffiinndd(1) requests user affirmation for the execution of the
        utility by printing a message to the terminal and reading a response.
        If the response is other than yy the command is not executed and the
        value of the ok expression is false.
    --ppaatthh pattern
        True if the path name being examined matches pattern. Special shell-
        pattern matching characters ([[,, ]],, **,, and ??) can be used as part of
        pattern. These characters can be matched explicitly by escaping them
        with a backslash (\\). Forward slashes (//) are treated as normal
        characters and need not be matched explicitly.
    --ppeerrmm mode
        The mode may be either symbolic (see cchhmmoodd(1)) or an octal number. If
        the mode is symbolic, a starting value of zero is assumed and the mode
        sets or clears permissions without regard to the file mode creation
        mask of the process. If the mode is octal, only bits 07777 (S_ISUID |
        S_ISGID | S_IRWXU | S_IRWXG | S_IRWXO) of the file's mode bits
        participate in the comparison. If the mode is preceded by a dash (--),
        this primary evaluates to true if at least all of the bits in the mode
        are set in the file's mode bits. If the mode is not preceded by a
        dash, this primary evaluates to true if the bits in the mode exactly
        match the file's mode bits. Note that the first character of a
        symbolic mode cannot be a dash (-).

    --pprriinntt
        This primary always evaluates to true. It prints the path name of the
        current file to standard output. The expression is appended to the
        user specified expression if neither --eexxeecc, --llss or --ookk is specified.

    --pprriinntt00
        This primary always evaluates to true. It prints the path name of the
        current file to standard output, followed by a null character.

    --pprruunnee
        This primary always evaluates to true. It causes ffiinndd(1) not to
        descend into the current file. The --pprruunnee primary has no effect if the
        --dd option was specified.
    --ssiizzee n[cc]
        True if the file's size, rounded up, in 512-byte blocks is n. If n is
        followed by a c, then the primary is true if the file's size is n
        bytes.
    --ttyyppee t
        True if the file is of the specified type. Possible file types are as
        follows:

        bb
            Block special

        cc
            Character special

        dd
            Directory

        ff
            Regular file

        ll
            Symlink

        pp
            FIFO

        ss
            Socket
    --uusseerr uname
        True if the file belongs to the user uname. If uname is numeric and
        there is no such user name, uname is treated as a user id.

    --xxddeevv
        Same as --mmoouunntt.

    All primaries that take a numeric argument allow the number to be preceded
    by a plus sign (++) or a minus sign (--). A preceding plus sign means more
    than n, a preceding minus sign means less than n, and if neither is
    present, it means exactly n.

  OOPPEERRAATTOORRSS

    The primaries may be combined using the following operators. The operators
    are listed in order of decreasing precedence.
    --lleevveell num
        Only descend num levels in the directory hierachy.
    !!expression
        This is the unary NNOOTT operator. It evaluates to true if the expression
        is false. Because the exclamation mark (!!) might have special meaning
        to your shell, you may need to escape or quote it in some manner.
    (expression)
        This evaluates to true if the parenthesized expression evaluates to
        true. Because parentheses have special meaning to the shell, they must
        be escaped or quoted in some manner.
    expression --aanndd expression
        The --aanndd operator is the logical AANNDD operator. Because it is implied
        by the juxtaposition of two expressions, it need not be specified. The
        expression evaluates to true if both expressions are true. The second
        expression is not evaluated if the first expression is false. It can
        be shortened to --aa.
    expression --oorr expression
        The --oorr operator is the logical OORR operator. The expression evaluates
        to true if either the first or the second expression is true. The
        second expression is not evaluated if the first expression is true.
        The operator can be shortened to --oo.

    All operands and primaries must be separate arguments to ffiinndd(1).
    Primaries which themselves take arguments expect each argument to be a
    separate argument to ffiinndd(1).

  DDIIAAGGNNOOSSTTIICCSS

    The ffiinndd(1) command returns 0 if all instances of path were successfully
	traversed, and >0 otherwise.

  EEXXAAMMPPLLEESS

    The following examples are shown as given to the shell:

    Print out a list of all the files whose names do not end in .c.

    find  /  \!  -name  *.c  -print

    Print out a list of all the files whose names do not end in .c or .h.

    find  /  \!  \( -name  *.c -a -name *.h \) -print

    Print out a list of all the files owned by user "wnj" that are newer than
    the file tttttt.

    find  /  -newer  ttt  -user  wnj  -print

    Print out a list of all the files which are not both newer than tttttt and
    owned by "wnj".

    find  /  \!  \(  -newer  ttt  -user  wnj  \)  -print

    Print out a list of all the files that are either owned by "wnj" or that
    are newer than tttttt.

    find  /  \(  -newer  ttt  -or  -user wnj  \)  -print

    Copy all files older than tttttt to //ttmmpp.

    find / \! -newer ttt -exec cp {} /tmp ";"

  SSEEEE AALLSSOO

    _x_a_r_g_s(1)

