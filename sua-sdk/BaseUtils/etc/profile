#--------------------------------------
# 
# ***** DO NOT EDIT THIS FILE ****
# ***** DO NOT EDIT THIS FILE ****
#
# This file may be replaced in subsequent releases of SUA
# To avoid any problems, do not edit this file.
#
# Make any local system changes in /etc/profile.lcl
# which gets included at the end of this file
#
#
#--------------------------------------
#
#
# Copyright (c) Microsoft Corporation.  All rights reserved.
#
#
# THIS SOFTWARE IS PROVIDED ``AS IS'' BY MICROSOFT CORP. INC. AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED.  IN NO EVENT SHALL MICROSOFT CORPORATION BE LIABLE
# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
# OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
# LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
# OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.
#C-

#----------------------------------------------
# RCSID = $Header: /E/SUA/src/etc.files/profile,v 1.37 1999/05/19 13:10:46 SSI_DEV+mark Exp $
#
# Filename: /etc/profile
# 
# Welcome to the SUA Commands and Utilities.
#
# This is the system level shell profile that is sourced in when a shell 
# starts.  This is where system level environment configuration should take 
# place, and it should be done by the system's administrator.
#
# Please remember to ensure that this file has no carriage-return/line-feeds
# after editing it. If you do use a Win32 program to edit this file,
# be sure to run /SUA/bin/flip to convert it back into the 
# UNIX/POSIX format.
#
#  e.g) From a CMD.EXE command prompt
#
#    $ c:\SUA\bin\flip -u profile
#
# The file //C/SUA/etc/profile.usr is an example user profile.
# You may copy it into the home directory of each user of the SUA
# commands and utilities, and rename it to .profile in the user's home
# directory. The user can then edit it to his or her own preferences.

umask 022

# -------------
# PATH setup:

# save the original 'PATH'  environment variable to PATH_ORIG
# so the user can use it in his/her personal profile later.
#
export PATH_ORIG=$PATH

# 
#  When a POSIX subsystem process is started, the PATH environment 
#  variable is created from the system NT 'Path' variable by changing 
#  the directory separator from ";" to ":", and the drive letter ids
#  from "N:" to "/N".
#
#  We now prefix it with the path to where the SUA commands
#  and utilities product was installed.
#
#
# remove trailing '/' if any 
__X11=/usr/X11R6

export PATH="/bin:/opt/gcc.3.3/bin:/usr/contrib/bin:${__X11}/bin:/usr/local/bin:/usr/contrib/win32/bin"

#
# Check for the existence of Visual Studio 2005. If exist set the interix compiler dir path. 
#
#
	if [ "$INTERIX_COMPILERDIR" == "" ]; then
         if [ "$VS80COMNTOOLS" != "" ]; then
  		_compdir=$(ntpath2posix -c "${VS80COMNTOOLS}")
export INTERIX_COMPILERDIR=$(dirname "$(dirname	"${_compdir}")")
		export SUA_COMPILERDIR=${INTERIX_COMPILERDIR}
	fi
fi

#
# now check for the existence of a directory to the local compiler 
#
if [ "$INTERIX_COMPILERDIR" != "" ]; then
    #
    # VC/BIN and SharedIDE/BIN are necessary for MSVC5.0 support
    # Vc98/BIN and Common/Msdev98/Bin are necessary for MSVC6.0
    # Common7/Tools/Bin Vc7/bin for Microsoft Visual Studio .NET 2003
    #
    VC5_DIRS="VC/BIN SharedIDE/BIN"
    VC6_DIRS="Vc98/BIN Common/Msdev98/BIN"
    VC7_DIRS="Common7/Tools Common7/Tools/Bin Vc7/bin Common7/IDE SDK/v1.1/Bin"

    case $PROCESSOR_ARCHITECTURE in 
	x86);;
	AMD64) VC8_DIRS=VC/bin/amd64;;
	IA64) VC8_DIRS=VC/bin/ia64;; 
    esac
    VC8_DIRS="${VC8_DIRS} VC/bin VC/vcpackages SDK/v2.0/Bin"
    for _i in ${VC8_DIRS} ${VC7_DIRS} ${VC6_DIRS} ${VC5_DIRS} BIN; do
	_i=$(ntpath2posix -c "${INTERIX_COMPILERDIR}/${_i}")
	if [ -d "${_i}" ]; then
	    export PATH="$PATH:${_i}"
	fi
    done
    unset _i
fi


# now add the Windows system32 directory into PATH
# and enable PATH_WINDOWS mechanism which allows path searches
# to match binaries with Windows suffixes automatically
# Make sure this is added *after* /usr/contrib/win32/bin
# since we want the runwin32 script versions of the system32 commands
# to be found first.
#
__dir="$(winpath2unix ${SYSTEMROOT}/system32)"
export PATH="$PATH:${__dir}"
export PATH_WINDOWS="${__dir}"

#
# now add SFU common directory into PATH.
#
__dir="$(winpath2unix ${WINDIR}/SUA/common)"
export PATH="$PATH:${__dir}"
export PATH_WINDOWS="${PATH_WINDOWS}:${__dir}"

unset __dir


# -------------
#
# TMPDIR is used by a number of utilities as a place in which temporary files
# can always be placed.
#
# Look for several 'tmp' environment variables and check if any of these
# directories exist.
# If so, then use this directory as the value for TMPDIR
# Order of precedence:
#    INTERIX_TMPDIR 
#    TMPDIR	// user can set this in "ControlPanel/System/Environment"
#
# Note: INTERIX_TMPDIR and TMPDIR are available so that user can set these
#       via the "ControlPanel/System/Environment".
#
origTMPDIR=${TMPDIR}	 # save original value
unset TMPDIR		# unset TMPDIR so we can tell below if TMPDIR was set

for _i in ${INTERIX_TMPDIR} ${origTMPDIR}; do

   if [ -d "${_i}" ]; then
	# check if dir is writable
	#
	(print > "${_i}/.tmp$$xx") >/dev/null 2>&1 \
		&& rm -f "${_i}/.tmp$$xx"  

	if [ $? = 0 ]; then
	    export TMPDIR="${_i}"
	    break
	fi
   fi
done
unset origTMPDIR
unset _i
#
# If TMPDIR still not set, then use the default value of "/tmp"
# which was created at install time
# NOTE: permissions on this directory may need to be changed to 777
#       because this is not done at install time.
#
export TMPDIR=${TMPDIR:-/tmp}

# *** NOTE:
#    we do NOT convert TMP or TEMP (if they exist) to POSIX format
#    because user may invoke a Win32 program which uses this value
#    and if so, it must be in the Win32 format


#
# shared library support.
# Define LD_LIBRARY_PATH to the directory where shared libraries are.
#
if [ $PROCESSOR_ARCHITECTURE == "x86" ] ; then
export LD_LIBRARY_PATH=/usr/lib:${__X11}/lib
else
export LD_LIBRARY_PATH=/usr/lib/x86:${__X11}/lib
export GCC_EXEC_PREFIX=/opt/gcc.3.3/lib
export LIBRARY_PATH=/usr/lib/x86
fi
# -------------
#
# Terminal Behaviour
# The terminal behaves properly with respect to newlines, (versus carriage-
# return/newline) and cursor control for utilities like more and vi, if
# the following variables are correctly configured.
# TERM is set to the default 'interix',
# TERMCAP needs to point to the directory with the termcap file.
#

export TERM=${TERM:-interix}
export TERMCAP="${TERMCAP:-/usr/share/termcap}"

#
# Set up the default MANPATH
#
if [ "$MANPATH" = "" ]; then
    export MANPATH="/usr/share/man:${__X11}/man:/usr/X11R5/man"
fi


# Set up X11 variables
#
export XAPPLRESDIR="${XAPPLRESDIR:-${__X11}/lib/X11/app-defaults}"

export XFILESEARCHPATH=\
"${XFILESEARCHPATH:-${XAPPLRESDIR}/%N%S:${__X11}/include/X11/bitmaps/%N%S}"

export XKEYSYMDB="${XKEYSYMDB:-${__X11}/lib/X11/XKeysymDB}"
export XCMSDB="${XCMSDB:-${__X11}/lib/X11/Xcms.txt}"
export UIDPATH="${__X11}/lib/X11/uid/%U"
export XNLSPATH="${__X11}/lib/X11/locale"

#
# try to inherit DISPLAY from environment.
# If not, then make sure its set to something reasonable
#
if [ "$DISPLAY" = "" ]; then
    __hostname=$(uname -n)
    if [ "$__hostname" = "" ]; then
	export DISPLAY="localhost:0.0"
    else
	export DISPLAY="$__hostname:0.0"
    fi
    unset __hostname
fi

# -------------
#
# These environment variables are used by various utilities to invoke 
# an editor.  Set to vi initially.  The last is for utilities.
#
export EDITOR=vi
export VISUAL=vi
export FCEDIT=vi

# user must explicitly set SHELL - we don't want to inherit a bogus one
# from the NT/Win32 environment because it will probably be in the 
# incorrect path syntax and it may point to the wrong shell
#
unset SHELL		

# -------------
#
# Change directory to user's home directory.
# On UNIX, this would be done by the login(1) program, but since
# we don't always run login(1) (for example, from a shortcut) we emulate
# it here to be sure.
#
if [ "$HOME" != "" ]; then
    cd "$HOME"
fi

# -------------
# now read in the system local profile
#
if [ -f /etc/profile.lcl ]; then
    . /etc/profile.lcl
fi

# -------------
# now unset the local variables
#
unset __X11

#
# USERDOMAIN - a variable used by various utilities
#            
# If its not defined yet, then initialize it to the user's current
# logged in domain name
#
if [ "$USERDOMAIN" = "" ]; then
    # get user name
    __name="$(id -D -un)"	 # get fully qualified domain user name 

    # the string preceeding the '+' in the user name
    # should be the current USERDOMAIN
    #
    export USERDOMAIN=${__name%+*}

    unset __name
fi


