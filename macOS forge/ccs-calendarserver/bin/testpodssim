#!/bin/sh
# -*- sh-basic-offset: 2 -*-

##
# Copyright (c) 2005-2017 Apple Inc. All rights reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
##

set -e;
set -u;

wd="$(cd "$(dirname "$0")/.." && pwd -L)";

. "${wd}/bin/_build.sh";

init_build > /dev/null;

sim="${wd}/contrib/performance/loadtest/sim.py";

##
# Command line handling
##

   verbose="";
    config="${wd}/contrib/performance/loadtest/standard-configs/accelerated-activity-config.plist";
   clients="${wd}/contrib/performance/loadtest/standard-configs/accelerated-activity-clients.plist";
   runtime="--runtime 300";
   logfile="";

usage ()
{
  program="$(basename "$0")";
  echo "Usage: ${program} [-r RUNTIME] [-l LOGFILE]";
  echo "Options:";
  echo "        -r  Set the runtime";
  echo "        -l  Log file";

  if [ "${1-}" = "-" ]; then return 0; fi;
  exit 64;
}

while getopts 'hl:r:' option; do
  case "$option" in
    '?') usage; ;;
    'h') usage -; exit 0; ;;
    'r') runtime="--runtime=${OPTARG}"; ;;
    'l') logfile="--logfile=${OPTARG}"; ;;
  esac;
done;

shift $((${OPTIND} - 1));

##
# Do The Right Thing
##

do_setup="false";
develop > /dev/null;

# Set up sandbox

sandboxdir="/tmp/sim_server_sandboxðŸ’£"
sandboxdir_u="/tmp/sim_server_sandbox\ud83d\udca3"

if [ -d "${sandboxdir}" ]; then
  rm -rf "${sandboxdir}"
fi;

configdir="${sandboxdir}/Config"
serverrootA="${sandboxdir}/podA"
serverrootB="${sandboxdir}/podB"

configdir_u="${sandboxdir_u}/Config"
serverrootA_u="${sandboxdir_u}/podA"
serverrootB_u="${sandboxdir_u}/podB"

mkdir -p "${configdir}/auth"
mkdir -p "${serverrootA}/Logs" "${serverrootA}/Run" "${serverrootA}/Data/Documents"
mkdir -p "${serverrootB}/Logs" "${serverrootB}/Run" "${serverrootB}/Data/Documents"

cp conf/caldavd-test.plist "${configdir}/caldavd-sim.plist"
cp conf/caldavd-test-podA.plist "${configdir}/caldavd-sim-podA.plist"
cp conf/caldavd-test-podB.plist "${configdir}/caldavd-sim-podB.plist"
cp conf/auth/proxies-test-pod.xml "${configdir}/auth/proxies-sim.xml"
cp conf/auth/resources-test-pod.xml "${configdir}/auth/resources-sim.xml"
cp conf/auth/augments-test-pod.xml "${configdir}/auth/augments-sim.xml"
cp conf/auth/accounts-test-pod.xml "${configdir}/auth/accounts-sim.xml"

# Modify the plists

python -c "import plistlib; f=plistlib.readPlist('${configdir}/caldavd-sim.plist'); f['ConfigRoot'] = u'${configdir_u}'; f['RunRoot'] = 'Run'; f['Authentication']['Kerberos']['Enabled'] = False; plistlib.writePlist(f, '${configdir}/caldavd-sim.plist');"
python -c "import plistlib; f=plistlib.readPlist('${configdir}/caldavd-sim-podA.plist'); f['ImportConfig'] = u'${configdir_u}/caldavd-sim.plist'; f['ServerRoot'] = u'${serverrootA_u}'; f['ConfigRoot'] = u'${configdir_u}'; f['ProxyLoadFromFile'] = u'${configdir_u}/auth/proxies-sim.xml'; f['ResourceService']['params']['xmlFile'] = u'${configdir_u}/auth/resources-sim.xml'; f['DirectoryService']['params']['xmlFile'] = u'${configdir_u}/auth/accounts-sim.xml'; f['AugmentService']['params']['xmlFiles'] = [u'${configdir_u}/auth/augments-sim.xml']; plistlib.writePlist(f, '${configdir}/caldavd-sim-podA.plist');"
python -c "import plistlib; f=plistlib.readPlist('${configdir}/caldavd-sim-podB.plist'); f['ImportConfig'] = u'${configdir_u}/caldavd-sim.plist'; f['ServerRoot'] = u'${serverrootB_u}'; f['ConfigRoot'] = u'${configdir_u}'; f['ProxyLoadFromFile'] = u'${configdir_u}/auth/proxies-sim.xml'; f['ResourceService']['params']['xmlFile'] = u'${configdir_u}/auth/resources-sim.xml'; f['DirectoryService']['params']['xmlFile'] = u'${configdir_u}/auth/accounts-sim.xml'; f['AugmentService']['params']['xmlFiles'] = [u'${configdir_u}/auth/augments-sim.xml']; plistlib.writePlist(f, '${configdir}/caldavd-sim-podB.plist');"

# Modify config to update ports and other bits

cp "${config}" "${configdir}/sim-config.plist"
config="${configdir}/sim-config.plist"
python -c "import plistlib; f=plistlib.readPlist('${configdir}/sim-config.plist'); f['servers']['PodB']['enabled'] = True; f['clientDataSerialization']['UseOldData'] = False; plistlib.writePlist(f, '${configdir}/sim-config.plist');"

# Modify clients to update ports and other bits

cp "${clients}" "${configdir}/sim-clients.plist"
clients="${configdir}/sim-clients.plist"

runpod() {
	local podsuffix="$1"; shift;

	# Start the server
	
	"${wd}/bin/run" -nd -c "${configdir}/caldavd-sim-${podsuffix}.plist"
	
	/bin/echo -n "Waiting for server ${podsuffix} to start up..."
	
	while [ ! -f "${sandboxdir}/${podsuffix}/Run/caldav-instance-0.pid" ]; do
	  sleep 1
	  /bin/echo -n "."
	done;
	
	echo "Server ${podsuffix} has started"
}

stoppod() {
	local podsuffix="$1"; shift;

	echo "Stopping server ${podsuffix}"
	"${wd}/bin/run" -nk -c "${configdir}/caldavd-sim-${podsuffix}.plist"
}

runpod "podA";
runpod "podB";

# Don't exit if sim.py fails, because we need to clean up afterwards.

set +e

# Run Sim

echo ""
echo "Starting Sim run"

"${python}" "${sim}" --config "${config}" --clients "${clients}" "${runtime}" "${logfile}"

# Capture exit status of sim.py to use as this script's exit status.

STATUS=$?

# Re-enable exit on failure incase run -nk fails

set -e

stoppod "podA";
stoppod "podB";

# Exit with the exit status of sim.py, to reflect the test suite's result

exit $STATUS
